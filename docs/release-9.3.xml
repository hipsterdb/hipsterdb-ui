<?xml version="1.0"?>
<sect1
id="release-9-3-12"
>  <title
>Release 9.3.12</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2016-03-31</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.11.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.12</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, if you are upgrading from a version earlier than 9.3.9,
    see <xref
linkend="release-9-3-9"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>
    <listitem
>     <para
>      Fix incorrect handling of NULL index entries in
      indexed <literal
>ROW()</literal> comparisons (Tom Lane)
     </para>

     <para
>      An index search using a row comparison such as <literal
>ROW(a, b) 
      ROW('x', 'y')</literal> would stop upon reaching a NULL entry in
      the <structfield
>b</structfield> column, ignoring the fact that there might be
      non-NULL <structfield
>b</structfield> values associated with later values
      of <structfield
>a</structfield>.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid unlikely data-loss scenarios due to renaming files without
      adequate <function
>fsync()</function> calls before and after (Michael Paquier,
      Tomas Vondra, Andres Freund)
     </para>
    </listitem>

    <listitem
>     <para
>      Correctly handle cases where <literal
>pg_subtrans</literal> is close to XID
      wraparound during server startup (Jeff Janes)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix corner-case crash due to trying to free <function
>localeconv()</function>
      output strings more than once (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix parsing of affix files for <literal
>ispell</literal> dictionaries
      (Tom Lane)
     </para>

     <para
>      The code could go wrong if the affix file contained any characters
      whose byte length changes during case-folding, for
      example <literal
>I</literal> in Turkish UTF8 locales.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid use of <function
>sscanf()</function> to parse <literal
>ispell</literal>
      dictionary files (Artur Zakirov)
     </para>

     <para
>      This dodges a portability problem on FreeBSD-derived platforms
      (including OS X).
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid a crash on old Windows versions (before 7SP1/2008R2SP1) with an
      AVX2-capable CPU and a Postgres build done with Visual Studio 2013
      (Christian Ullrich)
     </para>

     <para
>      This is a workaround for a bug in Visual Studio 2013's runtime
      library, which Microsoft have stated they will not fix in that
      version.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>psql</application>'s tab completion logic to handle multibyte
      characters properly (Kyotaro Horiguchi, Robert Haas)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>psql</application>'s tab completion for
      <literal
>SECURITY LABEL</literal> (Tom Lane)
     </para>

     <para
>      Pressing TAB after <literal
>SECURITY LABEL</literal> might cause a crash
      or offering of inappropriate keywords.
     </para>
    </listitem>

    <listitem
>     <para
>      Make <application
>pg_ctl</application> accept a wait timeout from the
      <envar
>PGCTLTIMEOUT</envar> environment variable, if none is specified on
      the command line (Noah Misch)
     </para>

     <para
>      This eases testing of slower buildfarm members by allowing them
      to globally specify a longer-than-normal timeout for postmaster
      startup and shutdown.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix incorrect test for Windows service status
      in <application
>pg_ctl</application> (Manuel Mathar)
     </para>

     <para
>      The previous set of minor releases attempted to
      fix <application
>pg_ctl</application> to properly determine whether to send log
      messages to Window's Event Log, but got the test backwards.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>pgbench</application> to correctly handle the combination
      of <literal
>-C</literal> and <literal
>-M prepared</literal> options (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>pg_upgrade</application>, skip creating a deletion script when
      the new data directory is inside the old data directory (Bruce
      Momjian)
     </para>

     <para
>      Blind application of the script in such cases would result in loss of
      the new data directory.
     </para>
    </listitem>

    <listitem
>     <para
>      In PL/Perl, properly translate empty Postgres arrays into empty Perl
      arrays (Alex Hunsaker)
     </para>
    </listitem>

    <listitem
>     <para
>      Make PL/Python cope with function names that aren't valid Python
      identifiers (Jim Nasby)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix multiple mistakes in the statistics returned
      by <filename
>contrib/pgstattuple</filename>'s <function
>pgstatindex()</function>
      function (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Remove dependency on <literal
>psed</literal> in MSVC builds, since it's no
      longer provided by core Perl (Michael Paquier, Andrew Dunstan)
     </para>
    </listitem>

    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2016c
      for DST law changes in Azerbaijan, Chile, Haiti, Palestine, and Russia
      (Altai, Astrakhan, Kirov, Sakhalin, Ulyanovsk regions), plus
      historical corrections for Lithuania, Moldova, and Russia
      (Kaliningrad, Samara, Volgograd).
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-11"
>  <title
>Release 9.3.11</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2016-02-11</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.10.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.11</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, if you are upgrading from a version earlier than 9.3.9,
    see <xref
linkend="release-9-3-9"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>
    <listitem
>     <para
>      Fix infinite loops and buffer-overrun problems in regular expressions
      (Tom Lane)
     </para>

     <para
>      Very large character ranges in bracket expressions could cause
      infinite loops in some cases, and memory overwrites in other cases.
      (CVE-2016-0773)
     </para>
    </listitem>

    <listitem
>     <para
>      Perform an immediate shutdown if the <filename
>postmaster.pid</filename> file
      is removed (Tom Lane)
     </para>

     <para
>      The postmaster now checks every minute or so
      that <filename
>postmaster.pid</filename> is still there and still contains its
      own PID.  If not, it performs an immediate shutdown, as though it had
      received <systemitem
>SIGQUIT</systemitem>.  The main motivation for this change
      is to ensure that failed buildfarm runs will get cleaned up without
      manual intervention; but it also serves to limit the bad effects if a
      DBA forcibly removes <filename
>postmaster.pid</filename> and then starts a new
      postmaster.
     </para>
    </listitem>

    <listitem
>     <para
>      In <literal
>SERIALIZABLE</literal> transaction isolation mode, serialization
      anomalies could be missed due to race conditions during insertions
      (Kevin Grittner, Thomas Munro)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix failure to emit appropriate WAL records when doing <literal
>ALTER
      TABLE ... SET TABLESPACE</literal> for unlogged relations (Michael Paquier,
      Andres Freund)
     </para>

     <para
>      Even though the relation's data is unlogged, the move must be logged or
      the relation will be inaccessible after a standby is promoted to master.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix possible misinitialization of unlogged relations at the end of
      crash recovery (Andres Freund, Michael Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure walsender slots are fully re-initialized when being re-used
      (Magnus Hagander)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <command
>ALTER COLUMN TYPE</command> to reconstruct inherited check
      constraints properly (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <command
>REASSIGN OWNED</command> to change ownership of composite types
      properly (lvaro Herrera)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <command
>REASSIGN OWNED</command> and <command
>ALTER OWNER</command> to correctly
      update granted-permissions lists when changing owners of data types,
      foreign data wrappers, or foreign servers (Bruce Momjian,
      lvaro Herrera)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <command
>REASSIGN OWNED</command> to ignore foreign user mappings,
      rather than fail (lvaro Herrera)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix possible crash after doing query rewrite for an updatable view
      (Stephen Frost)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix planner's handling of <literal
>LATERAL</literal> references (Tom
      Lane)
     </para>

     <para
>      This fixes some corner cases that led to <quote
>failed to build any
      N-way joins</quote> or <quote
>could not devise a query plan</quote> planner
      failures.
     </para>
    </listitem>

    <listitem
>     <para
>      Add more defenses against bad planner cost estimates for GIN index
      scans when the index's internal statistics are very out-of-date
      (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Make planner cope with hypothetical GIN indexes suggested by an index
      advisor plug-in (Julien Rouhaud)
     </para>
    </listitem>

    <listitem
>     <para
>      Speed up generation of unique table aliases in <command
>EXPLAIN</command> and
      rule dumping, and ensure that generated aliases do not
      exceed <literal
>NAMEDATALEN</literal> (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix dumping of whole-row Vars in <literal
>ROW()</literal>
      and <literal
>VALUES()</literal> lists (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix possible internal overflow in <type
>numeric</type> division
      (Dean Rasheed)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix enforcement of restrictions inside parentheses within regular
      expression lookahead constraints (Tom Lane)
     </para>

     <para
>      Lookahead constraints aren't allowed to contain backrefs, and
      parentheses within them are always considered non-capturing, according
      to the manual.  However, the code failed to handle these cases properly
      inside a parenthesized subexpression, and would give unexpected
      results.
     </para>
    </listitem>

    <listitem
>     <para
>      Conversion of regular expressions to indexscan bounds could produce
      incorrect bounds from regexps containing lookahead constraints
      (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix regular-expression compiler to handle loops of constraint arcs
      (Tom Lane)
     </para>

     <para
>      The code added for CVE-2007-4772 was both incomplete, in that it didn't
      handle loops involving more than one state, and incorrect, in that it
      could cause assertion failures (though there seem to be no bad
      consequences of that in a non-assert build).  Multi-state loops would
      cause the compiler to run until the query was canceled or it reached
      the too-many-states error condition.
     </para>
    </listitem>

    <listitem
>     <para
>      Improve memory-usage accounting in regular-expression compiler
      (Tom Lane)
     </para>

     <para
>      This causes the code to emit <quote
>regular expression is too
      complex</quote> errors in some cases that previously used unreasonable
      amounts of time and memory.
     </para>
    </listitem>

    <listitem
>     <para
>      Improve performance of regular-expression compiler (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Make <literal
>%h</literal> and <literal
>%r</literal> escapes
      in <varname
>log_line_prefix</varname> work for messages emitted due
      to <varname
>log_connections</varname> (Tom Lane)
     </para>

     <para
>      Previously, <literal
>%h</literal>/<literal
>%r</literal> started to work just after a
      new session had emitted the <quote
>connection received</quote> log message;
      now they work for that message too.
     </para>
    </listitem>

    <listitem
>     <para
>      On Windows, ensure the shared-memory mapping handle gets closed in
      child processes that don't need it (Tom Lane, Amit Kapila)
     </para>

     <para
>      This oversight resulted in failure to recover from crashes
      whenever <varname
>logging_collector</varname> is turned on.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix possible failure to detect socket EOF in non-blocking mode on
      Windows (Tom Lane)
     </para>

     <para
>      It's not entirely clear whether this problem can happen in pre-9.5
      branches, but if it did, the symptom would be that a walsender process
      would wait indefinitely rather than noticing a loss of connection.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid leaking a token handle during SSPI authentication
      (Christian Ullrich)
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>psql</application>, ensure that <application
>libreadline</application>'s idea
      of the screen size is updated when the terminal window size changes
      (Merlin Moncure)
     </para>

     <para
>      Previously, <application
>libreadline</application> did not notice if the window
      was resized during query output, leading to strange behavior during
      later input of multiline queries.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>psql</application>'s <literal
>\det</literal> command to interpret its
      pattern argument the same way as other <literal
>\d</literal> commands with
      potentially schema-qualified patterns do (Reece Hart)
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid possible crash in <application
>psql</application>'s <literal
>\c</literal> command
      when previous connection was via Unix socket and command specifies a
      new hostname and same username (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      In <literal
>pg_ctl start -w</literal>, test child process status directly
      rather than relying on heuristics (Tom Lane, Michael Paquier)
     </para>

     <para
>      Previously, <application
>pg_ctl</application> relied on an assumption that the new
      postmaster would always create <filename
>postmaster.pid</filename> within five
      seconds.  But that can fail on heavily-loaded systems,
      causing <application
>pg_ctl</application> to report incorrectly that the
      postmaster failed to start.
     </para>

     <para
>      Except on Windows, this change also means that a <literal
>pg_ctl start
      -w</literal> done immediately after another such command will now reliably
      fail, whereas previously it would report success if done within two
      seconds of the first command.
     </para>
    </listitem>

    <listitem
>     <para
>      In <literal
>pg_ctl start -w</literal>, don't attempt to use a wildcard listen
      address to connect to the postmaster (Kondo Yuta)
     </para>

     <para
>      On Windows, <application
>pg_ctl</application> would fail to detect postmaster
      startup if <varname
>listen_addresses</varname> is set to <literal
>0.0.0.0</literal>
      or <literal
>::</literal>, because it would try to use that value verbatim as
      the address to connect to, which doesn't work.  Instead assume
      that <literal
>127.0.0.1</literal> or <literal
>::1</literal>, respectively, is the
      right thing to use.
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>pg_ctl</application> on Windows, check service status to decide
      where to send output, rather than checking if standard output is a
      terminal (Michael Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>pg_dump</application> and <application
>pg_basebackup</application>, adopt
      the GNU convention for handling tar-archive members exceeding 8GB
      (Tom Lane)
     </para>

     <para
>      The POSIX standard for <literal
>tar</literal> file format does not allow
      archive member files to exceed 8GB, but most modern implementations
      of <application
>tar</application> support an extension that fixes that.  Adopt
      this extension so that <application
>pg_dump</application> with <option
>-Ft</option> no
      longer fails on tables with more than 8GB of data, and so
      that <application
>pg_basebackup</application> can handle files larger than 8GB.
      In addition, fix some portability issues that could cause failures for
      members between 4GB and 8GB on some platforms.  Potentially these
      problems could cause unrecoverable data loss due to unreadable backup
      files.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix assorted corner-case bugs in <application
>pg_dump</application>'s processing
      of extension member objects (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Make <application
>pg_dump</application> mark a view's triggers as needing to be
      processed after its rule, to prevent possible failure during
      parallel <application
>pg_restore</application> (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure that relation option values are properly quoted
      in <application
>pg_dump</application> (Kouhei Sutou, Tom Lane)
     </para>

     <para
>      A reloption value that isn't a simple identifier or number could lead
      to dump/reload failures due to syntax errors in CREATE statements
      issued by <application
>pg_dump</application>.  This is not an issue with any
      reloption currently supported by core <productname
>PostgreSQL</productname>, but
      extensions could allow reloptions that cause the problem.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid repeated password prompts during parallel <application
>pg_dump</application>
      (Zeus Kronion)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>pg_upgrade</application>'s file-copying code to handle errors
      properly on Windows (Bruce Momjian)
     </para>
    </listitem>

    <listitem
>     <para
>      Install guards in <application
>pgbench</application> against corner-case overflow
      conditions during evaluation of script-specified division or modulo
      operators (Fabien Coelho, Michael Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix failure to localize messages emitted
      by <application
>pg_receivexlog</application> and <application
>pg_recvlogical</application>
      (Ioseph Kim)
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid dump/reload problems when using both <application
>plpython2</application>
      and <application
>plpython3</application> (Tom Lane)
     </para>

     <para
>      In principle, both versions of <application
>PL/Python</application> can be used in
      the same database, though not in the same session (because the two
      versions of <application
>libpython</application> cannot safely be used concurrently).
      However, <application
>pg_restore</application> and <application
>pg_upgrade</application> both
      do things that can fall foul of the same-session restriction.  Work
      around that by changing the timing of the check.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>PL/Python</application> regression tests to pass with Python 3.5
      (Peter Eisentraut)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix premature clearing of <application
>libpq</application>'s input buffer when
      socket EOF is seen (Tom Lane)
     </para>

     <para
>      This mistake caused <application
>libpq</application> to sometimes not report the
      backend's final error message before reporting <quote
>server closed the
      connection unexpectedly</quote>.
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent certain <application
>PL/Java</application> parameters from being set by
      non-superusers (Noah Misch)
     </para>

     <para
>      This change mitigates a <application
>PL/Java</application> security bug
      (CVE-2016-0766), which was fixed in <application
>PL/Java</application> by marking
      these parameters as superuser-only.  To fix the security hazard for
      sites that update <productname
>PostgreSQL</productname> more frequently
      than <application
>PL/Java</application>, make the core code aware of them also.
     </para>
    </listitem>

    <listitem
>     <para
>      Improve <application
>libpq</application>'s handling of out-of-memory situations
      (Michael Paquier, Amit Kapila, Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix order of arguments
      in <application
>ecpg</application>-generated <literal
>typedef</literal> statements
      (Michael Meskes)
     </para>
    </listitem>

    <listitem
>     <para
>      Use <literal
>%g</literal> not <literal
>%f</literal> format
      in <application
>ecpg</application>'s <function
>PGTYPESnumeric_from_double()</function>
      (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>ecpg</application>-supplied header files to not contain comments
      continued from a preprocessor directive line onto the next line
      (Michael Meskes)
     </para>

     <para
>      Such a comment is rejected by <application
>ecpg</application>.  It's not yet clear
      whether <application
>ecpg</application> itself should be changed.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <function
>hstore_to_json_loose()</function>'s test for whether
      an <type
>hstore</type> value can be converted to a JSON number (Tom Lane)
     </para>

     <para
>      Previously this function could be fooled by non-alphanumeric trailing
      characters, leading to emitting syntactically-invalid JSON.
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure that <filename
>contrib/pgcrypto</filename>'s <function
>crypt()</function>
      function can be interrupted by query cancel (Andreas Karlsson)
     </para>
    </listitem>

    <listitem
>     <para
>      Accept <application
>flex</application> versions later than 2.5.x
      (Tom Lane, Michael Paquier)
     </para>

     <para
>      Now that flex 2.6.0 has been released, the version checks in our build
      scripts needed to be adjusted.
     </para>
    </listitem>

    <listitem
>     <para
>      Improve reproducibility of build output by ensuring filenames are given
      to the linker in a fixed order (Christoph Berg)
     </para>

     <para
>      This avoids possible bitwise differences in the produced executable
      files from one build to the next.
     </para>
    </listitem>

    <listitem
>     <para
>      Install our <filename
>missing</filename> script where PGXS builds can find it
      (Jim Nasby)
     </para>

     <para
>      This allows sane behavior in a PGXS build done on a machine where build
      tools such as <application
>bison</application> are missing.
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure that <filename
>dynloader.h</filename> is included in the installed
      header files in MSVC builds (Bruce Momjian, Michael Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      Add variant regression test expected-output file to match behavior of
      current <application
>libxml2</application> (Tom Lane)
     </para>

     <para
>      The fix for <application
>libxml2</application>'s CVE-2015-7499 causes it not to
      output error context reports in some cases where it used to do so.
      This seems to be a bug, but we'll probably have to live with it for
      some time, so work around it.
     </para>
    </listitem>

    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2016a for
      DST law changes in Cayman Islands, Metlakatla, and Trans-Baikal
      Territory (Zabaykalsky Krai), plus historical corrections for Pakistan.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-10"
>  <title
>Release 9.3.10</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2015-10-08</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.9.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.10</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, if you are upgrading from a version earlier than 9.3.9,
    see <xref
linkend="release-9-3-9"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>
    <listitem
>     <para
>      Guard against stack overflows in <type
>json</type> parsing
      (Oskari Saarenmaa)
     </para>

     <para
>      If an application constructs PostgreSQL <type
>json</type>
      or <type
>jsonb</type> values from arbitrary user input, the application's
      users can reliably crash the PostgreSQL server, causing momentary
      denial of service.  (CVE-2015-5289)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <filename
>contrib/pgcrypto</filename> to detect and report
      too-short <function
>crypt()</function> salts (Josh Kupershmidt)
     </para>

     <para
>      Certain invalid salt arguments crashed the server or disclosed a few
      bytes of server memory.  We have not ruled out the viability of
      attacks that arrange for presence of confidential information in the
      disclosed bytes, but they seem unlikely.  (CVE-2015-5288)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix subtransaction cleanup after a portal (cursor) belonging to an
      outer subtransaction fails (Tom Lane, Michael Paquier)
     </para>

     <para
>      A function executed in an outer-subtransaction cursor could cause an
      assertion failure or crash by referencing a relation created within an
      inner subtransaction.
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure all relations referred to by an updatable view are properly
      locked during an update statement (Dean Rasheed)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix insertion of relations into the relation cache <quote
>init file</quote>
      (Tom Lane)
     </para>

     <para
>      An oversight in a patch in the most recent minor releases
      caused <structname
>pg_trigger_tgrelid_tgname_index</structname> to be omitted
      from the init file.  Subsequent sessions detected this, then deemed the
      init file to be broken and silently ignored it, resulting in a
      significant degradation in session startup time.  In addition to fixing
      the bug, install some guards so that any similar future mistake will be
      more obvious.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid O(N^2) behavior when inserting many tuples into a SPI query
      result (Neil Conway)
     </para>
    </listitem>

    <listitem
>     <para
>      Improve <command
>LISTEN</command> startup time when there are many unread
      notifications (Matt Newell)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix performance problem when a session alters large numbers of foreign
      key constraints (Jan Wieck, Tom Lane)
     </para>

     <para
>      This was seen primarily when restoring <application
>pg_dump</application> output
      for databases with many thousands of tables.
     </para>
    </listitem>

    <listitem
>     <para
>      Disable SSL renegotiation by default (Michael Paquier, Andres Freund)
     </para>

     <para
>      While use of SSL renegotiation is a good idea in theory, we have seen
      too many bugs in practice, both in the underlying OpenSSL library and
      in our usage of it.  Renegotiation will be removed entirely in 9.5 and
      later.  In the older branches, just change the default value
      of <varname
>ssl_renegotiation_limit</varname> to zero (disabled).
     </para>
    </listitem>

    <listitem
>     <para
>      Lower the minimum values of the <literal
>*_freeze_max_age</literal> parameters
      (Andres Freund)
     </para>

     <para
>      This is mainly to make tests of related behavior less time-consuming,
      but it may also be of value for installations with limited disk space.
     </para>
    </listitem>

    <listitem
>     <para
>      Limit the maximum value of <varname
>wal_buffers</varname> to 2GB to avoid
      server crashes (Josh Berkus)
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid logging complaints when a parameter that can only be set at
      server start appears multiple times in <filename
>postgresql.conf</filename>,
      and fix counting of line numbers after an <literal
>include_dir</literal>
      directive (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix rare internal overflow in multiplication of <type
>numeric</type> values
      (Dean Rasheed)
     </para>
    </listitem>

    <listitem
>     <para
>      Guard against hard-to-reach stack overflows involving record types,
      range types, <type
>json</type>, <type
>jsonb</type>, <type
>tsquery</type>,
      <type
>ltxtquery</type> and <type
>query_int</type> (Noah Misch)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix handling of <literal
>DOW</literal> and <literal
>DOY</literal> in datetime input
      (Greg Stark)
     </para>

     <para
>      These tokens aren't meant to be used in datetime values, but previously
      they resulted in opaque internal error messages rather
      than <quote
>invalid input syntax</quote>.
     </para>
    </listitem>

    <listitem
>     <para
>      Add more query-cancel checks to regular expression matching (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Add recursion depth protections to regular expression, <literal
>SIMILAR
      TO</literal>, and <literal
>LIKE</literal> matching (Tom Lane)
     </para>

     <para
>      Suitable search patterns and a low stack depth limit could lead to
      stack-overrun crashes.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix potential infinite loop in regular expression execution (Tom Lane)
     </para>

     <para
>      A search pattern that can apparently match a zero-length string, but
      actually doesn't match because of a back reference, could lead to an
      infinite loop.
     </para>
    </listitem>

    <listitem
>     <para
>      In regular expression execution, correctly record match data for
      capturing parentheses within a quantifier even when the match is
      zero-length (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix low-memory failures in regular expression compilation
      (Andreas Seltenreich)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix low-probability memory leak during regular expression execution
      (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix rare low-memory failure in lock cleanup during transaction abort
      (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <quote
>unexpected out-of-memory situation during sort</quote> errors
      when using tuplestores with small <varname
>work_mem</varname> settings (Tom
      Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix very-low-probability stack overrun in <function
>qsort</function> (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <quote
>invalid memory alloc request size</quote> failure in hash joins
      with large <varname
>work_mem</varname> settings (Tomas Vondra, Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix assorted planner bugs (Tom Lane)
     </para>

     <para
>      These mistakes could lead to incorrect query plans that would give wrong
      answers, or to assertion failures in assert-enabled builds, or to odd
      planner errors such as <quote
>could not devise a query plan for the
      given query</quote>, <quote
>could not find pathkey item to
      sort</quote>, <quote
>plan should not reference subplan's variable</quote>,
      or <quote
>failed to assign all NestLoopParams to plan nodes</quote>.
      Thanks are due to Andreas Seltenreich and Piotr Stefaniak for fuzz
      testing that exposed these problems.
     </para>
    </listitem>

    <listitem
>     <para
>      Improve planner's performance for <command
>UPDATE</command>/<command
>DELETE</command>
      on large inheritance sets (Tom Lane, Dean Rasheed)
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure standby promotion trigger files are removed at postmaster
      startup (Michael Paquier, Fujii Masao)
     </para>

     <para
>      This prevents unwanted promotion from occurring if these files appear
      in a database backup that is used to initialize a new standby server.
     </para>
    </listitem>

    <listitem
>     <para
>      During postmaster shutdown, ensure that per-socket lock files are
      removed and listen sockets are closed before we remove
      the <filename
>postmaster.pid</filename> file (Tom Lane)
     </para>

     <para
>      This avoids race-condition failures if an external script attempts to
      start a new postmaster as soon as <literal
>pg_ctl stop</literal> returns.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix postmaster's handling of a startup-process crash during crash
      recovery (Tom Lane)
     </para>

     <para
>      If, during a crash recovery cycle, the startup process crashes without
      having restored database consistency, we'd try to launch a new startup
      process, which typically would just crash again, leading to an infinite
      loop.
     </para>
    </listitem>

    <listitem
>     <para
>      Make emergency autovacuuming for multixact wraparound more robust
      (Andres Freund)
     </para>
    </listitem>

    <listitem
>     <para
>      Do not print a <literal
>WARNING</literal> when an autovacuum worker is already
      gone when we attempt to signal it, and reduce log verbosity for such
      signals (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent autovacuum launcher from sleeping unduly long if the server
      clock is moved backwards a large amount (lvaro Herrera)
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure that cleanup of a GIN index's pending-insertions list is
      interruptable by cancel requests (Jeff Janes)
     </para>
    </listitem>

    <listitem
>     <para
>      Allow all-zeroes pages in GIN indexes to be reused (Heikki Linnakangas)
     </para>

     <para
>      Such a page might be left behind after a crash.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix handling of all-zeroes pages in SP-GiST indexes (Heikki
      Linnakangas)
     </para>

     <para
>      <command
>VACUUM</command> attempted to recycle such pages, but did so in a
      way that wasn't crash-safe.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix off-by-one error that led to otherwise-harmless warnings
      about <quote
>apparent wraparound</quote> in subtrans/multixact truncation
      (Thomas Munro)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix misreporting of <command
>CONTINUE</command> and <command
>MOVE</command> statement
      types in <application
>PL/pgSQL</application>'s error context messages
      (Pavel Stehule, Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>PL/Perl</application> to handle non-<acronym
>ASCII</acronym> error
      message texts correctly (Alex Hunsaker)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>PL/Python</application> crash when returning the string
      representation of a <type
>record</type> result (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix some places in <application
>PL/Tcl</application> that neglected to check for
      failure of <function
>malloc()</function> calls (Michael Paquier, lvaro
      Herrera)
     </para>
    </listitem>

    <listitem
>     <para
>      In <filename
>contrib/isn</filename>, fix output of ISBN-13 numbers that begin
      with 979 (Fabien Coelho)
     </para>

     <para
>      EANs beginning with 979 (but not 9790) are considered ISBNs, but they
      must be printed in the new 13-digit format, not the 10-digit format.
     </para>
    </listitem>

    <listitem
>     <para
>      Improve <filename
>contrib/postgres_fdw</filename>'s handling of
      collation-related decisions (Tom Lane)
     </para>

     <para
>      The main user-visible effect is expected to be that comparisons
      involving <type
>varchar</type> columns will be sent to the remote server
      for execution in more cases than before.
     </para>
    </listitem>

    <listitem
>     <para
>      Improve <application
>libpq</application>'s handling of out-of-memory conditions
      (Michael Paquier, Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix memory leaks and missing out-of-memory checks
      in <application
>ecpg</application> (Michael Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>psql</application>'s code for locale-aware formatting of numeric
      output (Tom Lane)
     </para>

     <para
>      The formatting code invoked by <literal
>\pset numericlocale on</literal>
      did the wrong thing for some uncommon cases such as numbers with an
      exponent but no decimal point.  It could also mangle already-localized
      output from the <type
>money</type> data type.
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent crash in <application
>psql</application>'s <command
>\c</command> command when
      there is no current connection (Noah Misch)
     </para>
    </listitem>

    <listitem
>     <para
>      Make <application
>pg_dump</application> handle inherited <literal
>NOT VALID</literal>
      check constraints correctly (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix selection of default <application
>zlib</application> compression level
      in <application
>pg_dump</application>'s directory output format (Andrew Dunstan)
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure that temporary files created during a <application
>pg_dump</application>
      run with <acronym
>tar</acronym>-format output are not world-readable (Michael
      Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>pg_dump</application> and <application
>pg_upgrade</application> to support
      cases where the <literal
>postgres</literal> or <literal
>template1</literal> database
      is in a non-default tablespace (Marti Raudsepp, Bruce Momjian)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>pg_dump</application> to handle object privileges sanely when
      dumping from a server too old to have a particular privilege type
      (Tom Lane)
     </para>

     <para
>      When dumping data types from pre-9.2 servers, and when dumping
      functions or procedural languages from pre-7.3
      servers, <application
>pg_dump</application> would
      produce <command
>GRANT</command>/<command
>REVOKE</command> commands that revoked the
      owner's grantable privileges and instead granted all privileges
      to <literal
>PUBLIC</literal>.  Since the privileges involved are
      just <literal
>USAGE</literal> and <literal
>EXECUTE</literal>, this isn't a security
      problem, but it's certainly a surprising representation of the older
      systems' behavior.  Fix it to leave the default privilege state alone
      in these cases.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>pg_dump</application> to dump shell types (Tom Lane)
     </para>

     <para
>      Shell types (that is, not-yet-fully-defined types) aren't useful for
      much, but nonetheless <application
>pg_dump</application> should dump them.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix assorted minor memory leaks in <application
>pg_dump</application> and other
      client-side programs (Michael Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix spinlock assembly code for PPC hardware to be compatible
      with <acronym
>AIX</acronym>'s native assembler (Tom Lane)
     </para>

     <para
>      Building with <application
>gcc</application> didn't work if <application
>gcc</application>
      had been configured to use the native assembler, which is becoming more
      common.
     </para>
    </listitem>

    <listitem
>     <para
>      On <acronym
>AIX</acronym>, test the <literal
>-qlonglong</literal> compiler option
      rather than just assuming it's safe to use (Noah Misch)
     </para>
    </listitem>

    <listitem
>     <para
>      On <acronym
>AIX</acronym>, use <literal
>-Wl,-brtllib</literal> link option to allow
      symbols to be resolved at runtime (Noah Misch)
     </para>

     <para
>      Perl relies on this ability in 5.8.0 and later.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid use of inline functions when compiling with
      32-bit <application
>xlc</application>, due to compiler bugs (Noah Misch)
     </para>
    </listitem>

    <listitem
>     <para
>      Use <filename
>librt</filename> for <function
>sched_yield()</function> when necessary,
      which it is on some Solaris versions (Oskari Saarenmaa)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix Windows <filename
>install.bat</filename> script to handle target directory
      names that contain spaces (Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Make the numeric form of the <productname
>PostgreSQL</productname> version number
      (e.g., <literal
>90405</literal>) readily available to extension Makefiles,
      as a variable named <varname
>VERSION_NUM</varname> (Michael Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2015g for
      DST law changes in Cayman Islands, Fiji, Moldova, Morocco, Norfolk
      Island, North Korea, Turkey, and Uruguay.  There is a new zone name
      <literal
>America/Fort_Nelson</literal> for the Canadian Northern Rockies.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-9"
>  <title
>Release 9.3.9</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2015-06-12</simpara>
  </note>

  <para
>   This release contains a small number of fixes from 9.3.8.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.9</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, if you are upgrading an installation that was previously
    upgraded using a <application
>pg_upgrade</application> version between 9.3.0 and
    9.3.4 inclusive, see the first changelog entry below.
   </para>

   <para
>    Also, if you are upgrading from a version earlier than 9.3.7,
    see <xref
linkend="release-9-3-7"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>
    <listitem
>     <para
>      Fix possible failure to recover from an inconsistent database state
      (Robert Haas)
     </para>

     <para
>      Recent <productname
>PostgreSQL</productname> releases introduced mechanisms to
      protect against multixact wraparound, but some of that code did not
      account for the possibility that it would need to run during crash
      recovery, when the database may not be in a consistent state.  This
      could result in failure to restart after a crash, or failure to start
      up a secondary server.  The lingering effects of a previously-fixed
      bug in <application
>pg_upgrade</application> could also cause such a failure, in
      installations that had used <application
>pg_upgrade</application> versions
      between 9.3.0 and 9.3.4.
     </para>

     <para
>      The <application
>pg_upgrade</application> bug in question was that it would
      set <literal
>oldestMultiXid</literal> to 1 in <filename
>pg_control</filename> even
      if the true value should be higher.  With the fixes introduced in
      this release, such a situation will result in immediate emergency
      autovacuuming until a correct <literal
>oldestMultiXid</literal> value can be
      determined.  If that would pose a hardship, users can avoid it by
      doing manual vacuuming <emphasis
>before</emphasis> upgrading to this release.
      In detail:

      <orderedlist
>       <listitem
>        <para
>         Check whether <application
>pg_controldata</application> reports <quote
>Latest
         checkpoint's oldestMultiXid</quote> to be 1.  If not, there's nothing
         to do.
        </para>
       </listitem>
       <listitem
>        <para
>         Look in <filename
>PGDATA/pg_multixact/offsets</filename> to see if there's a
         file named <filename
>0000</filename>.  If there is, there's nothing to do.
        </para>
       </listitem>
       <listitem
>        <para
>         Otherwise, for each table that has
         <structname
>pg_class</structname>.<structfield
>relminmxid</structfield> equal to 1,
         <command
>VACUUM</command> that table with
         both <xref
linkend="guc-vacuum-multixact-freeze-min-age"
>         and <xref
linkend="guc-vacuum-multixact-freeze-table-age"
> set to
         zero.  (You can use the vacuum cost delay parameters described
         in <xref
linkend="runtime-config-resource-vacuum-cost"
> to reduce
         the performance consequences for concurrent sessions.)  You must
         use <productname
>PostgreSQL</productname> 9.3.5 or later to perform this step.
        </xref></xref></xref></para>
       </listitem>
      </orderedlist>
     </para>
    </listitem>

    <listitem
>     <para
>      Fix rare failure to invalidate relation cache init file (Tom Lane)
     </para>

     <para
>      With just the wrong timing of concurrent activity, a <command
>VACUUM
      FULL</command> on a system catalog might fail to update the <quote
>init file</quote>
      that's used to avoid cache-loading work for new sessions.  This would
      result in later sessions being unable to access that catalog at all.
      This is a very ancient bug, but it's so hard to trigger that no
      reproducible case had been seen until recently.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid deadlock between incoming sessions and <literal
>CREATE/DROP
      DATABASE</literal> (Tom Lane)
     </para>

     <para
>      A new session starting in a database that is the target of
      a <command
>DROP DATABASE</command> command, or is the template for
      a <command
>CREATE DATABASE</command> command, could cause the command to wait
      for five seconds and then fail, even if the new session would have
      exited before that.
     </para>
    </listitem>

    <listitem
>     <para
>      Improve planner's cost estimates for semi-joins and anti-joins with
      inner indexscans (Tom Lane, Tomas Vondra)
     </para>

     <para
>      This type of plan is quite cheap when all the join clauses are used
      as index scan conditions, even if the inner scan would nominally
      fetch many rows, because the executor will stop after obtaining one
      row.  The planner only partially accounted for that effect, and would
      therefore overestimate the cost, leading it to possibly choose some
      other much less efficient plan type.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-8"
>  <title
>Release 9.3.8</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2015-06-04</simpara>
  </note>

  <para
>   This release contains a small number of fixes from 9.3.7.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.8</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, if you are upgrading from a version earlier than 9.3.7,
    see <xref
linkend="release-9-3-7"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>
    <listitem
>     <para
>      Avoid failures while <function
>fsync</function>'ing data directory during
      crash restart (Abhijit Menon-Sen, Tom Lane)
     </para>

     <para
>      In the previous minor releases we added a patch to <function
>fsync</function>
      everything in the data directory after a crash.  Unfortunately its
      response to any error condition was to fail, thereby preventing the
      server from starting up, even when the problem was quite harmless.
      An example is that an unwritable file in the data directory would
      prevent restart on some platforms; but it is common to make SSL
      certificate files unwritable by the server.  Revise this behavior so
      that permissions failures are ignored altogether, and other types of
      failures are logged but do not prevent continuing.
     </para>

     <para
>      Also apply the same rules in <literal
>initdb --sync-only</literal>.
      This case is less critical but it should act similarly.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <function
>pg_get_functiondef()</function> to show
      functions' <literal
>LEAKPROOF</literal> property, if set (Jeevan Chalke)
     </para>
    </listitem>

    <listitem
>     <para
>      Remove <application
>configure</application>'s check prohibiting linking to a
      threaded <application
>libpython</application>
      on <systemitem
class="osname"
>OpenBSD</systemitem> (Tom Lane)
     </para>

     <para
>      The failure this restriction was meant to prevent seems to not be a
      problem anymore on current <systemitem
class="osname"
>OpenBSD</systemitem>
      versions.
     </para>
    </listitem>


    <listitem
>     <para
>      Allow <application
>libpq</application> to use TLS protocol versions beyond v1
      (Noah Misch)
     </para>

     <para
>      For a long time, <application
>libpq</application> was coded so that the only SSL
      protocol it would allow was TLS v1.  Now that newer TLS versions are
      becoming popular, allow it to negotiate the highest commonly-supported
      TLS version with the server.  (<productname
>PostgreSQL</productname> servers were
      already capable of such negotiation, so no change is needed on the
      server side.)  This is a back-patch of a change already released in
      9.4.0.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-7"
>  <title
>Release 9.3.7</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2015-05-22</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.6.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.7</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, if you use <filename
>contrib/citext</filename>'s
    <function
>regexp_matches()</function> functions, see the changelog entry below
    about that.
   </para>

   <para
>    Also, if you are upgrading from a version earlier than 9.3.6,
    see <xref
linkend="release-9-3-6"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>
    <listitem
>     <para
>      Avoid possible crash when client disconnects just before the
      authentication timeout expires (Benkocs Norbert Attila)
     </para>

     <para
>      If the timeout interrupt fired partway through the session shutdown
      sequence, SSL-related state would be freed twice, typically causing a
      crash and hence denial of service to other sessions.  Experimentation
      shows that an unauthenticated remote attacker could trigger the bug
      somewhat consistently, hence treat as security issue.
      (CVE-2015-3165)
     </para>
    </listitem>

    <listitem
>     <para
>      Improve detection of system-call failures (Noah Misch)
     </para>

     <para
>      Our replacement implementation of <function
>snprintf()</function> failed to
      check for errors reported by the underlying system library calls;
      the main case that might be missed is out-of-memory situations.
      In the worst case this might lead to information exposure, due to our
      code assuming that a buffer had been overwritten when it hadn't been.
      Also, there were a few places in which security-relevant calls of other
      system library functions did not check for failure.
     </para>

     <para
>      It remains possible that some calls of the <function
>*printf()</function>
      family of functions are vulnerable to information disclosure if an
      out-of-memory error occurs at just the wrong time.  We judge the risk
      to not be large, but will continue analysis in this area.
      (CVE-2015-3166)
     </para>
    </listitem>

    <listitem
>     <para
>      In <filename
>contrib/pgcrypto</filename>, uniformly report decryption failures
      as <quote
>Wrong key or corrupt data</quote> (Noah Misch)
     </para>

     <para
>      Previously, some cases of decryption with an incorrect key could report
      other error message texts.  It has been shown that such variance in
      error reports can aid attackers in recovering keys from other systems.
      While it's unknown whether <filename
>pgcrypto</filename>'s specific behaviors
      are likewise exploitable, it seems better to avoid the risk by using a
      one-size-fits-all message.
      (CVE-2015-3167)
     </para>
    </listitem>

    <listitem
>     <para
>      Protect against wraparound of multixact member IDs
      (lvaro Herrera, Robert Haas, Thomas Munro)
     </para>

     <para
>      Under certain usage patterns, the existing defenses against this might
      be insufficient, allowing <filename
>pg_multixact/members</filename> files to be
      removed too early, resulting in data loss.
      The fix for this includes modifying the server to fail transactions
      that would result in overwriting old multixact member ID data, and
      improving autovacuum to ensure it will act proactively to prevent
      multixact member ID wraparound, as it does for transaction ID
      wraparound.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix incorrect declaration of <filename
>contrib/citext</filename>'s
      <function
>regexp_matches()</function> functions (Tom Lane)
     </para>

     <para
>      These functions should return <type
>setof text[]</type>, like the core
      functions they are wrappers for; but they were incorrectly declared as
      returning just <type
>text[]</type>.  This mistake had two results: first,
      if there was no match you got a scalar null result, whereas what you
      should get is an empty set (zero rows).  Second, the <literal
>g</literal> flag
      was effectively ignored, since you would get only one result array even
      if there were multiple matches.
     </para>

     <para
>      While the latter behavior is clearly a bug, there might be applications
      depending on the former behavior; therefore the function declarations
      will not be changed by default until <productname
>PostgreSQL</productname> 9.5.
      In pre-9.5 branches, the old behavior exists in version 1.0 of
      the <literal
>citext</literal> extension, while we have provided corrected
      declarations in version 1.1 (which is <emphasis
>not</emphasis> installed by
      default).  To adopt the fix in pre-9.5 branches, execute
      <literal
>ALTER EXTENSION citext UPDATE TO '1.1'</literal> in each database in
      which <literal
>citext</literal> is installed.  (You can also <quote
>update</quote>
      back to 1.0 if you need to undo that.)  Be aware that either update
      direction will require dropping and recreating any views or rules that
      use <filename
>citext</filename>'s <function
>regexp_matches()</function> functions.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix incorrect checking of deferred exclusion constraints after a HOT
      update (Tom Lane)
     </para>

     <para
>      If a new row that potentially violates a deferred exclusion constraint
      is HOT-updated (that is, no indexed columns change and the row can be
      stored back onto the same table page) later in the same transaction,
      the exclusion constraint would be reported as violated when the check
      finally occurred, even if the row(s) the new row originally conflicted
      with had been deleted.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix planning of star-schema-style queries (Tom Lane)
     </para>

     <para
>      Sometimes, efficient scanning of a large table requires that index
      parameters be provided from more than one other table (commonly,
      dimension tables whose keys are needed to index a large fact table).
      The planner should be able to find such plans, but an overly
      restrictive search heuristic prevented it.
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent improper reordering of antijoins (NOT EXISTS joins) versus
      other outer joins (Tom Lane)
     </para>

     <para
>      This oversight in the planner has been observed to cause <quote
>could
      not find RelOptInfo for given relids</quote> errors, but it seems possible
      that sometimes an incorrect query plan might get past that consistency
      check and result in silently-wrong query output.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix incorrect matching of subexpressions in outer-join plan nodes
      (Tom Lane)
     </para>

     <para
>      Previously, if textually identical non-strict subexpressions were used
      both above and below an outer join, the planner might try to re-use
      the value computed below the join, which would be incorrect because the
      executor would force the value to NULL in case of an unmatched outer row.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix GEQO planner to cope with failure of its join order heuristic
      (Tom Lane)
     </para>

     <para
>      This oversight has been seen to lead to <quote
>failed to join all
      relations together</quote> errors in queries involving <literal
>LATERAL</literal>,
      and that might happen in other cases as well.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix possible deadlock at startup
      when <literal
>max_prepared_transactions</literal> is too small
      (Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Don't archive useless preallocated WAL files after a timeline switch
      (Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Recursively <function
>fsync()</function> the data directory after a crash
      (Abhijit Menon-Sen, Robert Haas)
     </para>

     <para
>      This ensures consistency if another crash occurs shortly later.  (The
      second crash would have to be a system-level crash, not just a database
      crash, for there to be a problem.)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix autovacuum launcher's possible failure to shut down, if an error
      occurs after it receives SIGTERM (lvaro Herrera)
     </para>
    </listitem>

    <listitem
>     <para
>      Cope with unexpected signals in <function
>LockBufferForCleanup()</function>
      (Andres Freund)
     </para>

     <para
>      This oversight could result in spurious errors about <quote
>multiple
      backends attempting to wait for pincount 1</quote>.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix crash when doing <literal
>COPY IN</literal> to a table with check
      constraints that contain whole-row references (Tom Lane)
     </para>

     <para
>      The known failure case only crashes in 9.4 and up, but there is very
      similar code in 9.3 and 9.2, so back-patch those branches as well.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid waiting for WAL flush or synchronous replication during commit of
      a transaction that was read-only so far as the user is concerned
      (Andres Freund)
     </para>

     <para
>      Previously, a delay could occur at commit in transactions that had
      written WAL due to HOT page pruning, leading to undesirable effects
      such as sessions getting stuck at startup if all synchronous replicas
      are down.  Sessions have also been observed to get stuck in catchup
      interrupt processing when using synchronous replication; this will fix
      that problem as well.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix crash when manipulating hash indexes on temporary tables
      (Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix possible failure during hash index bucket split, if other processes
      are modifying the index concurrently (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Check for interrupts while analyzing index expressions (Jeff Janes)
     </para>

     <para
>      <command
>ANALYZE</command> executes index expressions many times; if there are
      slow functions in such an expression, it's desirable to be able to
      cancel the <command
>ANALYZE</command> before that loop finishes.
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure <structfield
>tableoid</structfield> of a foreign table is reported
      correctly when a <literal
>READ COMMITTED</literal> recheck occurs after
      locking rows in <command
>SELECT FOR UPDATE</command>, <command
>UPDATE</command>,
      or <command
>DELETE</command> (Etsuro Fujita)
     </para>
    </listitem>

    <listitem
>     <para
>      Add the name of the target server to object description strings for
      foreign-server user mappings (lvaro Herrera)
     </para>
    </listitem>

    <listitem
>     <para
>      Include the schema name in object identity strings for conversions
      (lvaro Herrera)
     </para>
    </listitem>

    <listitem
>     <para
>      Recommend setting <literal
>include_realm</literal> to 1 when using
      Kerberos/GSSAPI/SSPI authentication (Stephen Frost)
     </para>

     <para
>      Without this, identically-named users from different realms cannot be
      distinguished.  For the moment this is only a documentation change, but
      it will become the default setting in <productname
>PostgreSQL</productname> 9.5.
     </para>
    </listitem>

    <listitem
>     <para
>      Remove code for matching IPv4 <filename
>pg_hba.conf</filename> entries to
      IPv4-in-IPv6 addresses (Tom Lane)
     </para>

     <para
>      This hack was added in 2003 in response to a report that some Linux
      kernels of the time would report IPv4 connections as having
      IPv4-in-IPv6 addresses.  However, the logic was accidentally broken in
      9.0.  The lack of any field complaints since then shows that it's not
      needed anymore.  Now we have reports that the broken code causes
      crashes on some systems, so let's just remove it rather than fix it.
      (Had we chosen to fix it, that would make for a subtle and potentially
      security-sensitive change in the effective meaning of
      IPv4 <filename
>pg_hba.conf</filename> entries, which does not seem like a good
      thing to do in minor releases.)
     </para>
    </listitem>

    <listitem
>     <para
>      Report WAL flush, not insert, position in <literal
>IDENTIFY_SYSTEM</literal>
      replication command (Heikki Linnakangas)
     </para>

     <para
>      This avoids a possible startup failure
      in <application
>pg_receivexlog</application>.
     </para>
    </listitem>

    <listitem
>     <para
>      While shutting down service on Windows, periodically send status
      updates to the Service Control Manager to prevent it from killing the
      service too soon; and ensure that <application
>pg_ctl</application> will wait for
      shutdown (Krystian Bigaj)
     </para>
    </listitem>

    <listitem
>     <para
>      Reduce risk of network deadlock when using <application
>libpq</application>'s
      non-blocking mode (Heikki Linnakangas)
     </para>

     <para
>      When sending large volumes of data, it's important to drain the input
      buffer every so often, in case the server has sent enough response data
      to cause it to block on output.  (A typical scenario is that the server
      is sending a stream of NOTICE messages during <literal
>COPY FROM
      STDIN</literal>.)  This worked properly in the normal blocking mode, but not
      so much in non-blocking mode.  We've modified <application
>libpq</application>
      to opportunistically drain input when it can, but a full defense
      against this problem requires application cooperation: the application
      should watch for socket read-ready as well as write-ready conditions,
      and be sure to call <function
>PQconsumeInput()</function> upon read-ready.
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>libpq</application>, fix misparsing of empty values in URI
      connection strings (Thomas Fanghaenel)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix array handling in <application
>ecpg</application> (Michael Meskes)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>psql</application> to sanely handle URIs and conninfo strings as
      the first parameter to <command
>\connect</command>
      (David Fetter, Andrew Dunstan, lvaro Herrera)
     </para>

     <para
>      This syntax has been accepted (but undocumented) for a long time, but
      previously some parameters might be taken from the old connection
      instead of the given string, which was agreed to be undesirable.
     </para>
    </listitem>

    <listitem
>     <para
>      Suppress incorrect complaints from <application
>psql</application> on some
      platforms that it failed to write <filename
>~/.psql_history</filename> at exit
      (Tom Lane)
     </para>

     <para
>      This misbehavior was caused by a workaround for a bug in very old
      (pre-2006) versions of <application
>libedit</application>.  We fixed it by
      removing the workaround, which will cause a similar failure to appear
      for anyone still using such versions of <application
>libedit</application>.
      Recommendation: upgrade that library, or use <application
>libreadline</application>.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>pg_dump</application>'s rule for deciding which casts are
      system-provided casts that should not be dumped (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>pg_dump</application>, fix failure to honor <literal
>-Z</literal>
      compression level option together with <literal
>-Fd</literal>
      (Michael Paquier)
     </para>
    </listitem>

    <listitem
>     <para
>      Make <application
>pg_dump</application> consider foreign key relationships
      between extension configuration tables while choosing dump order
      (Gilles Darold, Michael Paquier, Stephen Frost)
     </para>

     <para
>      This oversight could result in producing dumps that fail to reload
      because foreign key constraints are transiently violated.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid possible <application
>pg_dump</application> failure when concurrent sessions
      are creating and dropping temporary functions (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix dumping of views that are just <literal
>VALUES(...)</literal> but have
      column aliases (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>pg_upgrade</application>, force timeline 1 in the new cluster
      (Bruce Momjian)
     </para>

     <para
>      This change prevents upgrade failures caused by bogus complaints about
      missing WAL history files.
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>pg_upgrade</application>, check for improperly non-connectable
      databases before proceeding
      (Bruce Momjian)
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>pg_upgrade</application>, quote directory paths
      properly in the generated <literal
>delete_old_cluster</literal> script
      (Bruce Momjian)
     </para>
    </listitem>

    <listitem
>     <para
>      In <application
>pg_upgrade</application>, preserve database-level freezing info
      properly
      (Bruce Momjian)
     </para>

     <para
>      This oversight could cause missing-clog-file errors for tables within
      the <literal
>postgres</literal> and <literal
>template1</literal> databases.
     </para>
    </listitem>

    <listitem
>     <para
>      Run <application
>pg_upgrade</application> and <application
>pg_resetxlog</application> with
      restricted privileges on Windows, so that they don't fail when run by
      an administrator (Muhammad Asif Naeem)
     </para>
    </listitem>

    <listitem
>     <para
>      Improve handling of <function
>readdir()</function> failures when scanning
      directories in <application
>initdb</application> and <application
>pg_basebackup</application>
      (Marco Nenciarini)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix slow sorting algorithm in <filename
>contrib/intarray</filename> (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix compile failure on Sparc V8 machines (Rob Rowan)
     </para>
    </listitem>

    <listitem
>     <para
>      Silence some build warnings on OS X (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2015d
      for DST law changes in Egypt, Mongolia, and Palestine, plus historical
      changes in Canada and Chile.  Also adopt revised zone abbreviations for
      the America/Adak zone (HST/HDT not HAST/HADT).
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-6"
>  <title
>Release 9.3.6</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2015-02-05</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.5.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.6</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, if you are a Windows user and are using the <quote
>Norwegian
    (Bokml)</quote> locale, manual action is needed after the upgrade to
    replace any <quote
>Norwegian (Bokml)_Norway</quote> locale names stored
    in <productname
>PostgreSQL</productname> system catalogs with the plain-ASCII
    alias <quote
>Norwegian_Norway</quote>.  For details see
    <ulink
url="http://wiki.postgresql.org/wiki/Changes_To_Norwegian_Locale"
></ulink>
   </para>

   <para
>    Also, if you are upgrading from a version earlier than 9.3.5,
    see <xref
linkend="release-9-3-5"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>

    <listitem
>     <para
>      Fix buffer overruns in <function
>to_char()</function>
      (Bruce Momjian)
     </para>

     <para
>      When <function
>to_char()</function> processes a numeric formatting template
      calling for a large number of digits, <productname
>PostgreSQL</productname>
      would read past the end of a buffer.  When processing a crafted
      timestamp formatting template, <productname
>PostgreSQL</productname> would write
      past the end of a buffer.  Either case could crash the server.
      We have not ruled out the possibility of attacks that lead to
      privilege escalation, though they seem unlikely.
      (CVE-2015-0241)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix buffer overrun in replacement <function
>*printf()</function> functions
      (Tom Lane)
     </para>

     <para
>      <productname
>PostgreSQL</productname> includes a replacement implementation
      of <function
>printf</function> and related functions.  This code will overrun
      a stack buffer when formatting a floating point number (conversion
      specifiers <literal
>e</literal>, <literal
>E</literal>, <literal
>f</literal>, <literal
>F</literal>,
      <literal
>g</literal> or <literal
>G</literal>) with requested precision greater than
      about 500.  This will crash the server, and we have not ruled out the
      possibility of attacks that lead to privilege escalation.
      A database user can trigger such a buffer overrun through
      the <function
>to_char()</function> SQL function.  While that is the only
      affected core <productname
>PostgreSQL</productname> functionality, extension
      modules that use printf-family functions may be at risk as well.
     </para>

     <para
>      This issue primarily affects <productname
>PostgreSQL</productname> on Windows.
      <productname
>PostgreSQL</productname> uses the system implementation of these
      functions where adequate, which it is on other modern platforms.
      (CVE-2015-0242)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix buffer overruns in <filename
>contrib/pgcrypto</filename>
      (Marko Tiikkaja, Noah Misch)
     </para>

     <para
>      Errors in memory size tracking within the <filename
>pgcrypto</filename>
      module permitted stack buffer overruns and improper dependence on the
      contents of uninitialized memory.  The buffer overrun cases can
      crash the server, and we have not ruled out the possibility of
      attacks that lead to privilege escalation.
      (CVE-2015-0243)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible loss of frontend/backend protocol synchronization after
      an error
      (Heikki Linnakangas)
     </para>

     <para
>      If any error occurred while the server was in the middle of reading a
      protocol message from the client, it could lose synchronization and
      incorrectly try to interpret part of the message's data as a new
      protocol message.  An attacker able to submit crafted binary data
      within a command parameter might succeed in injecting his own SQL
      commands this way.  Statement timeout and query cancellation are the
      most likely sources of errors triggering this scenario.  Particularly
      vulnerable are applications that use a timeout and also submit
      arbitrary user-crafted data as binary query parameters.  Disabling
      statement timeout will reduce, but not eliminate, the risk of
      exploit.  Our thanks to Emil Lenngren for reporting this issue.
      (CVE-2015-0244)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix information leak via constraint-violation error messages
      (Stephen Frost)
     </para>

     <para
>      Some server error messages show the values of columns that violate
      a constraint, such as a unique constraint.  If the user does not have
      <literal
>SELECT</literal> privilege on all columns of the table, this could
      mean exposing values that the user should not be able to see.  Adjust
      the code so that values are displayed only when they came from the SQL
      command or could be selected by the user.
      (CVE-2014-8161)
     </para>
    </listitem>


    <listitem
>     <para
>      Lock down regression testing's temporary installations on Windows
      (Noah Misch)
     </para>

     <para
>      Use SSPI authentication to allow connections only from the OS user
      who launched the test suite.  This closes on Windows the same
      vulnerability previously closed on other platforms, namely that other
      users might be able to connect to the test postmaster.
      (CVE-2014-0067)
     </para>
    </listitem>


    <listitem
>     <para
>      Cope with the Windows locale named <quote
>Norwegian (Bokml)</quote>
      (Heikki Linnakangas)
     </para>

     <para
>      Non-ASCII locale names are problematic since it's not clear what
      encoding they should be represented in.  Map the troublesome locale
      name to a plain-ASCII alias, <quote
>Norwegian_Norway</quote>.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid possible data corruption if <command
>ALTER DATABASE SET
      TABLESPACE</command> is used to move a database to a new tablespace and then
      shortly later move it back to its original tablespace (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid corrupting tables when <command
>ANALYZE</command> inside a transaction
      is rolled back (Andres Freund, Tom Lane, Michael Paquier)
     </para>

     <para
>      If the failing transaction had earlier removed the last index, rule, or
      trigger from the table, the table would be left in a corrupted state
      with the relevant <structname
>pg_class</structname> flags not set though they
      should be.
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure that unlogged tables are copied correctly
      during <command
>CREATE DATABASE</command> or <command
>ALTER DATABASE SET
      TABLESPACE</command> (Pavan Deolasee, Andres Freund)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix incorrect processing
      of <structname
>CreateEventTrigStmt</structname>.<structfield
>eventname</structfield> (Petr
      Jelinek)
     </para>

     <para
>      This could result in misbehavior if <command
>CREATE EVENT TRIGGER</command>
      were executed as a prepared query, or via extended query protocol.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <command
>DROP</command>'s dependency searching to correctly handle the
      case where a table column is recursively visited before its table
      (Petr Jelinek, Tom Lane)
     </para>

     <para
>      This case is only known to arise when an extension creates both a
      datatype and a table using that datatype.  The faulty code might
      refuse a <command
>DROP EXTENSION</command> unless <literal
>CASCADE</literal> is
      specified, which should not be required.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix use-of-already-freed-memory problem in EvalPlanQual processing
      (Tom Lane)
     </para>

     <para
>      In <literal
>READ COMMITTED</literal> mode, queries that lock or update
      recently-updated rows could crash as a result of this bug.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid possible deadlock while trying to acquire tuple locks
      in EvalPlanQual processing (lvaro Herrera, Mark Kirkwood)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix failure to wait when a transaction tries to acquire a <literal
>FOR
      NO KEY EXCLUSIVE</literal> tuple lock, while multiple other transactions
      currently hold <literal
>FOR SHARE</literal> locks (lvaro Herrera)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix planning of <command
>SELECT FOR UPDATE</command> when using a partial
      index on a child table (Kyotaro Horiguchi)
     </para>

     <para
>      In <literal
>READ COMMITTED</literal> mode, <command
>SELECT FOR UPDATE</command> must
      also recheck the partial index's <literal
>WHERE</literal> condition when
      rechecking a recently-updated row to see if it still satisfies the
      query's <literal
>WHERE</literal> condition.  This requirement was missed if the
      index belonged to an inheritance child table, so that it was possible
      to incorrectly return rows that no longer satisfy the query condition.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix corner case wherein <command
>SELECT FOR UPDATE</command> could return a row
      twice, and possibly miss returning other rows (Tom Lane)
     </para>

     <para
>      In <literal
>READ COMMITTED</literal> mode, a <command
>SELECT FOR UPDATE</command>
      that is scanning an inheritance tree could incorrectly return a row
      from a prior child table instead of the one it should return from a
      later child table.
     </para>
    </listitem>


    <listitem
>     <para
>      Improve performance of <command
>EXPLAIN</command> with large range tables
      (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Reject duplicate column names in the referenced-columns list of
      a <literal
>FOREIGN KEY</literal> declaration (David Rowley)
     </para>

     <para
>      This restriction is per SQL standard.  Previously we did not reject
      the case explicitly, but later on the code would fail with
      bizarre-looking errors.
     </para>
    </listitem>


    <listitem
>     <para
>      Re-enable error for <literal
>SELECT ... OFFSET -1</literal> (Tom Lane)
     </para>

     <para
>      A negative offset value has been an error since 8.4, but an
      optimization added in 9.3 accidentally turned the case into a no-op.
      Restore the expected behavior.
     </para>
    </listitem>


    <listitem
>     <para
>      Restore previous behavior of conversion of domains to JSON
      (Tom Lane)
     </para>

     <para
>      This change causes domains over numeric and boolean to be treated
      like their base types for purposes of conversion to JSON.  It worked
      like that before 9.3.5 and 9.2.9, but was unintentionally changed
      while fixing a related problem.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <function
>json_agg()</function> to not return extra trailing right
      brackets in its result (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix bugs in raising a <type
>numeric</type> value to a large integral power
      (Tom Lane)
     </para>

     <para
>      The previous code could get a wrong answer, or consume excessive
      amounts of time and memory before realizing that the answer must
      overflow.
     </para>
    </listitem>


    <listitem
>     <para
>      In <function
>numeric_recv()</function>, truncate away any fractional digits
      that would be hidden according to the value's <literal
>dscale</literal> field
      (Tom Lane)
     </para>

     <para
>      A <type
>numeric</type> value's display scale (<literal
>dscale</literal>) should
      never be less than the number of nonzero fractional digits; but
      apparently there's at least one broken client application that
      transmits binary <type
>numeric</type> values in which that's true.
      This leads to strange behavior since the extra digits are taken into
      account by arithmetic operations even though they aren't printed.
      The least risky fix seems to be to truncate away such <quote
>hidden</quote>
      digits on receipt, so that the value is indeed what it prints as.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix incorrect search for shortest-first regular expression matches
      (Tom Lane)
     </para>

     <para
>      Matching would often fail when the number of allowed iterations is
      limited by a <literal
>?</literal> quantifier or a bound expression.
     </para>
    </listitem>


    <listitem
>     <para
>      Reject out-of-range numeric timezone specifications (Tom Lane)
     </para>

     <para
>      Simple numeric timezone specifications exceeding +/- 168 hours (one
      week) would be accepted, but could then cause null-pointer dereference
      crashes in certain operations.  There's no use-case for such large UTC
      offsets, so reject them.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix bugs in <type
>tsquery</type> <literal
>@</literal> <type
>tsquery</type>
      operator (Heikki Linnakangas)
     </para>

     <para
>      Two different terms would be considered to match if they had the same
      CRC.  Also, if the second operand had more terms than the first, it
      would be assumed not to be contained in the first; which is wrong
      since it might contain duplicate terms.
     </para>
    </listitem>


    <listitem
>     <para
>      Improve ispell dictionary's defenses against bad affix files (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Allow more than 64K phrases in a thesaurus dictionary (David Boutin)
     </para>

     <para
>      The previous coding could crash on an oversize dictionary, so this was
      deemed a back-patchable bug fix rather than a feature addition.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix namespace handling in <function
>xpath()</function> (Ali Akbar)
     </para>

     <para
>      Previously, the <type
>xml</type> value resulting from
      an <function
>xpath()</function> call would not have namespace declarations if
      the namespace declarations were attached to an ancestor element in the
      input <type
>xml</type> value, rather than to the specific element being
      returned.  Propagate the ancestral declaration so that the result is
      correct when considered in isolation.
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure that whole-row variables expose nonempty column names
      to functions that pay attention to column names within composite
      arguments (Tom Lane)
     </para>

     <para
>      In some contexts, constructs like <literal
>row_to_json(tab.*)</literal> may
      not produce the expected column names.  This is fixed properly as of
      9.4; in older branches, just ensure that we produce some nonempty
      name.  (In some cases this will be the underlying table's column name
      rather than the query-assigned alias that should theoretically be
      visible.)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix mishandling of system columns,
      particularly <structfield
>tableoid</structfield>, in FDW queries (Etsuro Fujita)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix assorted oversights in range-operator selectivity estimation
      (Emre Hasegeli)
     </para>

     <para
>      This patch fixes corner-case <quote
>unexpected operator NNNN</quote> planner
      errors, and improves the selectivity estimates for some other cases.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid doing <literal
><replaceable
>indexed_column</replaceable> = ANY
      (<replaceable
>array</replaceable>)</literal> as an index qualifier if that leads
      to an inferior plan (Andrew Gierth)
     </para>

     <para
>      In some cases, <literal
>= ANY</literal> conditions applied to non-first index
      columns would be done as index conditions even though it would be
      better to use them as simple filter conditions.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <quote
>variable not found in subplan target list</quote> planner
      failure when an inline-able SQL function taking a composite argument
      is used in a <literal
>LATERAL</literal> subselect and the composite argument
      is a lateral reference (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix planner problems with nested append relations, such as inherited
      tables within <literal
>UNION ALL</literal> subqueries (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fail cleanly when a GiST index tuple doesn't fit on a page, rather
      than going into infinite recursion (Andrew Gierth)
     </para>
    </listitem>


    <listitem
>     <para
>      Exempt tables that have per-table <varname
>cost_limit</varname>
      and/or <varname
>cost_delay</varname> settings from autovacuum's global cost
      balancing rules (lvaro Herrera)
     </para>

     <para
>      The previous behavior resulted in basically ignoring these per-table
      settings, which was unintended.  Now, a table having such settings
      will be vacuumed using those settings, independently of what is going
      on in other autovacuum workers.  This may result in heavier total I/O
      load than before, so such settings should be re-examined for sanity.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid wholesale autovacuuming when autovacuum is nominally off
      (Tom Lane)
     </para>

     <para
>      Even when autovacuum is nominally off, we will still launch autovacuum
      worker processes to vacuum tables that are at risk of XID wraparound.
      However, such a worker process then proceeded to vacuum all tables in
      the target database, if they met the usual thresholds for
      autovacuuming.  This is at best pretty unexpected; at worst it delays
      response to the wraparound threat.  Fix it so that if autovacuum is
      turned off, workers <emphasis
>only</emphasis> do anti-wraparound vacuums and
      not any other work.
     </para>
    </listitem>


    <listitem
>     <para
>      During crash recovery, ensure that unlogged relations are rewritten as
      empty and are synced to disk before recovery is considered complete
      (Abhijit Menon-Sen, Andres Freund)
     </para>

     <para
>      This prevents scenarios in which unlogged relations might contain
      garbage data following database crash recovery.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix race condition between hot standby queries and replaying a
      full-page image (Heikki Linnakangas)
     </para>

     <para
>      This mistake could result in transient errors in queries being
      executed in hot standby.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix several cases where recovery logic improperly ignored WAL records
      for <literal
>COMMIT/ABORT PREPARED</literal> (Heikki Linnakangas)
     </para>

     <para
>      The most notable oversight was
      that <varname
>recovery_target_xid</varname> could not be used to stop at
      a two-phase commit.
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent latest WAL file from being archived a second time at completion
      of crash recovery (Fujii Masao)
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid creating unnecessary <filename
>.ready</filename> marker files for
      timeline history files (Fujii Masao)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible null pointer dereference when an empty prepared statement
      is used and the <varname
>log_statement</varname> setting is <literal
>mod</literal>
      or <literal
>ddl</literal> (Fujii Masao)
     </para>
    </listitem>


    <listitem
>     <para
>      Change <quote
>pgstat wait timeout</quote> warning message to be LOG level,
      and rephrase it to be more understandable (Tom Lane)
     </para>

     <para
>      This message was originally thought to be essentially a can't-happen
      case, but it occurs often enough on our slower buildfarm members to be
      a nuisance.  Reduce it to LOG level, and expend a bit more effort on
      the wording: it now reads <quote
>using stale statistics instead of
      current ones because stats collector is not responding</quote>.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible corruption of postmaster's list of dynamic background
      workers (Andres Freund)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix SPARC spinlock implementation to ensure correctness if the CPU is
      being run in a non-TSO coherency mode, as some non-Solaris kernels do
      (Andres Freund)
     </para>
    </listitem>


    <listitem
>     <para
>      Warn if OS X's <function
>setlocale()</function> starts an unwanted extra
      thread inside the postmaster (Noah Misch)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix processing of repeated <literal
>dbname</literal> parameters
      in <function
>PQconnectdbParams()</function> (Alex Shulgin)
     </para>

     <para
>      Unexpected behavior ensued if the first occurrence
      of <literal
>dbname</literal> contained a connection string or URI to be
      expanded.
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure that <application
>libpq</application> reports a suitable error message on
      unexpected socket EOF (Marko Tiikkaja, Tom Lane)
     </para>

     <para
>      Depending on kernel behavior, <application
>libpq</application> might return an
      empty error string rather than something useful when the server
      unexpectedly closed the socket.
     </para>
    </listitem>


    <listitem
>     <para
>      Clear any old error message during <function
>PQreset()</function>
      (Heikki Linnakangas)
     </para>

     <para
>      If <function
>PQreset()</function> is called repeatedly, and the connection
      cannot be re-established, error messages from the failed connection
      attempts kept accumulating in the <structname
>PGconn</structname>'s error
      string.
     </para>
    </listitem>


    <listitem
>     <para
>      Properly handle out-of-memory conditions while parsing connection
      options in <application
>libpq</application> (Alex Shulgin, Heikki Linnakangas)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix array overrun in <application
>ecpg</application>'s version
      of <function
>ParseDateTime()</function> (Michael Paquier)
     </para>
    </listitem>


    <listitem
>     <para
>      In <application
>initdb</application>, give a clearer error message if a password
      file is specified but is empty (Mats Erik Andersson)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>psql</application>'s <command
>\s</command> command to work nicely with
      libedit, and add pager support (Stepan Rutz, Tom Lane)
     </para>

     <para
>      When using libedit rather than readline, <command
>\s</command> printed the
      command history in a fairly unreadable encoded format, and on recent
      libedit versions might fail altogether.  Fix that by printing the
      history ourselves rather than having the library do it.  A pleasant
      side-effect is that the pager is used if appropriate.
     </para>

     <para
>      This patch also fixes a bug that caused newline encoding to be applied
      inconsistently when saving the command history with libedit.
      Multiline history entries written by older <application
>psql</application>
      versions will be read cleanly with this patch, but perhaps not
      vice versa, depending on the exact libedit versions involved.
     </para>
    </listitem>


    <listitem
>     <para
>      Improve consistency of parsing of <application
>psql</application>'s special
      variables (Tom Lane)
     </para>

     <para
>      Allow variant spellings of <literal
>on</literal> and <literal
>off</literal> (such
      as <literal
>1</literal>/<literal
>0</literal>) for <literal
>ECHO_HIDDEN</literal>
      and <literal
>ON_ERROR_ROLLBACK</literal>.  Report a warning for unrecognized
      values for <literal
>COMP_KEYWORD_CASE</literal>, <literal
>ECHO</literal>,
      <literal
>ECHO_HIDDEN</literal>, <literal
>HISTCONTROL</literal>,
      <literal
>ON_ERROR_ROLLBACK</literal>, and <literal
>VERBOSITY</literal>.  Recognize
      all values for all these variables case-insensitively; previously
      there was a mishmash of case-sensitive and case-insensitive behaviors.
     </para>
    </listitem>


    <listitem
>     <para
>      Make <application
>psql</application>'s <command
>\watch</command> command display
      nulls as specified by <command
>\pset null</command> (Fujii Masao)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>psql</application>'s expanded-mode display to work
      consistently when using <literal
>border</literal> = 3
      and <literal
>linestyle</literal> = <literal
>ascii</literal> or <literal
>unicode</literal>
      (Stephen Frost)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>pg_dump</application> to handle comments on event triggers
      without failing (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Allow parallel <application
>pg_dump</application> to
      use <option
>--serializable-deferrable</option> (Kevin Grittner)
     </para>
    </listitem>


    <listitem
>     <para
>      Improve performance of <application
>pg_dump</application> when the database
      contains many instances of multiple dependency paths between the same
      two objects (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>pg_dumpall</application> to restore its ability to dump from
      pre-8.1 servers (Gilles Darold)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible deadlock during parallel restore of a schema-only dump
      (Robert Haas, Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix core dump in <literal
>pg_dump --binary-upgrade</literal> on zero-column
      composite type (Rushabh Lathia)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix failure to fsync tables in nondefault tablespaces
      during <application
>pg_upgrade</application> (Abhijit Menon-Sen, Andres Freund)
     </para>

     <para
>      With an operating system crash and some bad luck, this could result in
      data loss during an upgrade.
     </para>
    </listitem>


    <listitem
>     <para
>      In <application
>pg_upgrade</application>, cope with cases where the new cluster
      creates a TOAST table for a table that didn't previously have one
      (Bruce Momjian)
     </para>

     <para
>      Previously this could result in failures due to OID conflicts.
     </para>
    </listitem>


    <listitem
>     <para
>      In <application
>pg_upgrade</application>, don't try to
      set <literal
>autovacuum_multixact_freeze_max_age</literal> for the old cluster
      (Bruce Momjian)
     </para>

     <para
>      This could result in failure because not all 9.3.X versions have that
      parameter.  Fortunately, we don't actually need to set it at all.
     </para>
    </listitem>


    <listitem
>     <para
>      In <application
>pg_upgrade</application>, preserve the transaction ID epoch
      (Bruce Momjian)
     </para>

     <para
>      This oversight did not bother <productname
>PostgreSQL</productname> proper,
      but could confuse some external replication tools.
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent WAL files created by <literal
>pg_basebackup -x/-X</literal> from
      being archived again when the standby is promoted (Andres Freund)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix memory leak in <application
>pg_receivexlog</application> (Fujii Masao)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix unintended suppression of <application
>pg_receivexlog</application> verbose
      messages (Fujii Masao)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix failure of <filename
>contrib/auto_explain</filename> to print per-node
      timing information when doing <command
>EXPLAIN ANALYZE</command> (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix upgrade-from-unpackaged script for <filename
>contrib/citext</filename>
      (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid integer overflow and buffer overrun
      in <filename
>contrib/hstore</filename>'s <function
>hstore_to_json()</function>
      (Heikki Linnakangas)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix recognition of numbers in <function
>hstore_to_json_loose()</function>,
      so that JSON numbers and strings are correctly distinguished
      (Andrew Dunstan)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix block number checking
      in <filename
>contrib/pageinspect</filename>'s <function
>get_raw_page()</function>
      (Tom Lane)
     </para>

     <para
>      The incorrect checking logic could prevent access to some pages in
      non-main relation forks.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <filename
>contrib/pgcrypto</filename>'s <function
>pgp_sym_decrypt()</function>
      to not fail on messages whose length is 6 less than a power of 2
      (Marko Tiikkaja)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix file descriptor leak in <filename
>contrib/pg_test_fsync</filename>
      (Jeff Janes)
     </para>

     <para
>      This could cause failure to remove temporary files on Windows.
     </para>
    </listitem>


    <listitem
>     <para
>      Handle unexpected query results, especially NULLs, safely in
      <filename
>contrib/tablefunc</filename>'s <function
>connectby()</function>
      (Michael Paquier)
     </para>

     <para
>      <function
>connectby()</function> previously crashed if it encountered a NULL
      key value.  It now prints that row but doesn't recurse further.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid a possible crash in <filename
>contrib/xml2</filename>'s
      <function
>xslt_process()</function> (Mark Simonetti)
     </para>

     <para
>      <application
>libxslt</application> seems to have an undocumented dependency on
      the order in which resources are freed; reorder our calls to avoid a
      crash.
     </para>
    </listitem>


    <listitem
>     <para
>      Mark some <filename
>contrib</filename> I/O functions with correct volatility
      properties (Tom Lane)
     </para>

     <para
>      The previous over-conservative marking was immaterial in normal use,
      but could cause optimization problems or rejection of valid index
      expression definitions.  Since the consequences are not large, we've
      just adjusted the function definitions in the extension modules'
      scripts, without changing version numbers.
     </para>
    </listitem>


    <listitem
>     <para
>      Numerous cleanups of warnings from Coverity static code analyzer
      (Andres Freund, Tatsuo Ishii, Marko Kreen, Tom Lane, Michael Paquier)
     </para>

     <para
>      These changes are mostly cosmetic but in some cases fix corner-case
      bugs, for example a crash rather than a proper error report after an
      out-of-memory failure.  None are believed to represent security
      issues.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix setup of background workers in EXEC_BACKEND builds, eg Windows
      (Robert Haas)
     </para>
    </listitem>


    <listitem
>     <para
>      Detect incompatible OpenLDAP versions during build (Noah Misch)
     </para>

     <para
>      With OpenLDAP versions 2.4.24 through 2.4.31,
      inclusive, <productname
>PostgreSQL</productname> backends can crash at exit.
      Raise a warning during <application
>configure</application> based on the
      compile-time OpenLDAP version number, and test the crashing scenario
      in the <filename
>contrib/dblink</filename> regression test.
     </para>
    </listitem>


    <listitem
>     <para
>      In non-MSVC Windows builds, ensure <filename
>libpq.dll</filename> is installed
      with execute permissions (Noah Misch)
     </para>
    </listitem>


    <listitem
>     <para
>      Make <application
>pg_regress</application> remove any temporary installation it
      created upon successful exit (Tom Lane)
     </para>

     <para
>      This results in a very substantial reduction in disk space usage
      during <literal
>make check-world</literal>, since that sequence involves
      creation of numerous temporary installations.
     </para>
    </listitem>


    <listitem
>     <para
>      Support time zone abbreviations that change UTC offset from time to
      time (Tom Lane)
     </para>

     <para
>      Previously, <productname
>PostgreSQL</productname> assumed that the UTC offset
      associated with a time zone abbreviation (such as <literal
>EST</literal>)
      never changes in the usage of any particular locale.  However this
      assumption fails in the real world, so introduce the ability for a
      zone abbreviation to represent a UTC offset that sometimes changes.
      Update the zone abbreviation definition files to make use of this
      feature in timezone locales that have changed the UTC offset of their
      abbreviations since 1970 (according to the IANA timezone database).
      In such timezones, <productname
>PostgreSQL</productname> will now associate the
      correct UTC offset with the abbreviation depending on the given date.
     </para>
    </listitem>


    <listitem
>     <para
>      Update time zone abbreviations lists (Tom Lane)
     </para>

     <para
>      Add CST (China Standard Time) to our lists.
      Remove references to ADT as <quote
>Arabia Daylight Time</quote>, an
      abbreviation that's been out of use since 2007; therefore, claiming
      there is a conflict with <quote
>Atlantic Daylight Time</quote> doesn't seem
      especially helpful.
      Fix entirely incorrect GMT offsets for CKT (Cook Islands), FJT, and FJST
      (Fiji); we didn't even have them on the proper side of the date line.
     </para>
    </listitem>


    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2015a.
     </para>

     <para
>      The IANA timezone database has adopted abbreviations of the form
      <literal
>A<replaceable
>x</replaceable>ST</literal>/<literal
>A<replaceable
>x</replaceable>DT</literal>
      for all Australian time zones, reflecting what they believe to be
      current majority practice Down Under.  These names do not conflict
      with usage elsewhere (other than ACST for Acre Summer Time, which has
      been in disuse since 1994).  Accordingly, adopt these names into
      our <quote
>Default</quote> timezone abbreviation set.
      The <quote
>Australia</quote> abbreviation set now contains only CST, EAST,
      EST, SAST, SAT, and WST, all of which are thought to be mostly
      historical usage.  Note that SAST has also been changed to be South
      Africa Standard Time in the <quote
>Default</quote> abbreviation set.
     </para>

     <para
>      Also, add zone abbreviations SRET (Asia/Srednekolymsk) and XJT
      (Asia/Urumqi), and use WSST/WSDT for western Samoa.  Also, there were
      DST law changes in Chile, Mexico, the Turks  Caicos Islands
      (America/Grand_Turk), and Fiji.  There is a new zone
      Pacific/Bougainville for portions of Papua New Guinea.  Also, numerous
      corrections for historical (pre-1970) time zone data.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-5"
>  <title
>Release 9.3.5</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2014-07-24</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.4.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.5</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, this release corrects a logic error
    in <application
>pg_upgrade</application>, as well as an index corruption problem in
    some GiST indexes.  See the first two changelog entries below to find out
    whether your installation has been affected and what steps you should take
    if so.
   </para>

   <para
>    Also, if you are upgrading from a version earlier than 9.3.4,
    see <xref
linkend="release-9-3-4"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>

    <listitem
>     <para
>      In <application
>pg_upgrade</application>, remove <filename
>pg_multixact</filename> files
      left behind by <application
>initdb</application> (Bruce Momjian)
     </para>

     <para
>      If you used a pre-9.3.5 version of <application
>pg_upgrade</application> to
      upgrade a database cluster to 9.3, it might have left behind a file
      <filename
>$PGDATA/pg_multixact/offsets/0000</filename> that should not be
      there and will eventually cause problems in <command
>VACUUM</command>.
      <emphasis
>However, in common cases this file is actually valid and
      must not be removed.</emphasis>
      To determine whether your installation has this problem, run this
      query as superuser, in any database of the cluster:
<programlisting
>WITH list(file) AS (SELECT * FROM pg_ls_dir('pg_multixact/offsets'))
SELECT EXISTS (SELECT * FROM list WHERE file = '0000') AND
       NOT EXISTS (SELECT * FROM list WHERE file = '0001') AND
       NOT EXISTS (SELECT * FROM list WHERE file = 'FFFF') AND
       EXISTS (SELECT * FROM list WHERE file != '0000')
       AS file_0000_removal_required;</programlisting>
      If this query returns <literal
>t</literal>, manually remove the file
      <filename
>$PGDATA/pg_multixact/offsets/0000</filename>.
      Do nothing if the query returns <literal
>f</literal>.
     </para>
    </listitem>


    <listitem
>     <para
>      Correctly initialize padding bytes in <filename
>contrib/btree_gist</filename>
      indexes on <type
>bit</type> columns (Heikki Linnakangas)
     </para>

     <para
>      This error could result in incorrect query results due to values that
      should compare equal not being seen as equal.
      Users with GiST indexes on <type
>bit</type> or <type
>bit varying</type>
      columns should <command
>REINDEX</command> those indexes after installing this
      update.
     </para>
    </listitem>


    <listitem
>     <para
>      Protect against torn pages when deleting GIN list pages (Heikki
      Linnakangas)
     </para>

     <para
>      This fix prevents possible index corruption if a system crash occurs
      while the page update is being written to disk.
     </para>
    </listitem>


    <listitem
>     <para
>      Don't clear the right-link of a GiST index page while replaying
      updates from WAL (Heikki Linnakangas)
     </para>

     <para
>      This error could lead to transiently wrong answers from GiST index
      scans performed in Hot Standby.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix corner-case infinite loop during insertion into an SP-GiST text
      index (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix incorrect answers from SP-GiST index searches
      with <literal
>-|-</literal> (range adjacency) operator
      (Heikki Linnakangas)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix wraparound handling for <filename
>pg_multixact/members</filename>
      (lvaro Herrera)
     </para>
    </listitem>


    <listitem
>     <para
>      Truncate <structname
>pg_multixact</structname> during checkpoints, not
      during <command
>VACUUM</command> (lvaro Herrera)
     </para>

     <para
>      This change ensures that <structname
>pg_multixact</structname> segments can't be
      removed if they'd still be needed during WAL replay after a crash.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible inconsistency of all-visible flags after WAL recovery
      (Heikki Linnakangas)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possibly-incorrect cache invalidation during nested calls
      to <function
>ReceiveSharedInvalidMessages</function> (Andres Freund)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix race condition when updating a tuple concurrently locked by
      another process (Andres Freund, lvaro Herrera)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <quote
>could not find pathkey item to sort</quote> planner failures
      with <literal
>UNION ALL</literal> over subqueries reading from tables with
      inheritance children (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Don't assume a subquery's output is unique if there's a set-returning
      function in its targetlist (David Rowley)
     </para>

     <para
>      This oversight could lead to misoptimization of constructs
      like <literal
>WHERE x IN (SELECT y, generate_series(1,10) FROM t GROUP
      BY y)</literal>.
     </para>
    </listitem>


    <listitem
>     <para
>      Improve planner to drop constant-NULL inputs
      of <literal
>AND</literal>/<literal
>OR</literal> when possible (Tom Lane)
     </para>

     <para
>      This change fixes some cases where the more aggressive parameter
      substitution done by 9.2 and later can lead to a worse plan than
      older versions produced.
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure that the planner sees equivalent <literal
>VARIADIC</literal> and
      non-<literal
>VARIADIC</literal> function calls as equivalent (Tom Lane)
     </para>

     <para
>      This bug could for example result in failure to use expression indexes
      involving variadic functions.  It might be necessary to re-create such
      indexes, and/or re-create views including variadic function calls that
      should match the indexes, for the fix to be effective for existing 9.3
      installations.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix handling of nested <type
>JSON</type> objects
      in <function
>json_populate_recordset()</function> and friends
      (Michael Paquier, Tom Lane)
     </para>

     <para
>      A nested <type
>JSON</type> object could result in previous fields of the
      parent object not being shown in the output.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix identification of input type category in <function
>to_json()</function>
      and friends (Tom Lane)
     </para>

     <para
>      This is known to have led to inadequate quoting of <type
>money</type>
      fields in the <type
>JSON</type> result, and there may have been wrong
      results for other data types as well.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix failure to detoast fields in composite elements of structured
      types (Tom Lane)
     </para>

     <para
>      This corrects cases where TOAST pointers could be copied into other
      tables without being dereferenced.  If the original data is later
      deleted, it would lead to errors like <quote
>missing chunk number 0
      for toast value ...</quote> when the now-dangling pointer is used.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <quote
>record type has not been registered</quote> failures with
      whole-row references to the output of Append plan nodes (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible crash when invoking a user-defined function while
      rewinding a cursor (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix query-lifespan memory leak while evaluating the arguments for a
      function in <literal
>FROM</literal> (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix session-lifespan memory leaks in regular-expression processing
      (Tom Lane, Arthur O'Dwyer, Greg Stark)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix data encoding error in <filename
>hungarian.stop</filename> (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent foreign tables from being created with OIDS
      when <xref
linkend="guc-default-with-oids"
> is true
      (Etsuro Fujita)
     </xref></para>
    </listitem>


    <listitem
>     <para
>      Fix liveness checks for rows that were inserted in the current
      transaction and then deleted by a now-rolled-back subtransaction
      (Andres Freund)
     </para>

     <para
>      This could cause problems (at least spurious warnings, and at worst an
      infinite loop) if <command
>CREATE INDEX</command> or <command
>CLUSTER</command> were
      done later in the same transaction.
     </para>
    </listitem>


    <listitem
>     <para
>      Clear <structname
>pg_stat_activity</structname>.<structfield
>xact_start</structfield>
      during <command
>PREPARE TRANSACTION</command> (Andres Freund)
     </para>

     <para
>      After the <command
>PREPARE</command>, the originating session is no longer in
      a transaction, so it should not continue to display a transaction
      start time.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <command
>REASSIGN OWNED</command> to not fail for text search objects
      (lvaro Herrera)
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent <structname
>pg_class</structname>.<structfield
>relminmxid</structfield> values from
      going backwards during <command
>VACUUM FULL</command> (lvaro Herrera)
     </para>
    </listitem>


    <listitem
>     <para
>      Reduce indentation in rule/view dumps to improve readability and avoid
      excessive whitespace (Greg Stark, Tom Lane)
     </para>

     <para
>      This change reduces the amount of indentation applied to nested
      constructs, including some cases that the user probably doesn't think
      of as nested, such as UNION lists.  Previously, deeply nested
      constructs were printed with an amount of whitespace growing as
      O(N^2), which created a performance problem and even risk of
      out-of-memory failures.  Now the indentation is reduced modulo 40,
      which is initially odd to look at but seems to preserve readability
      better than simply limiting the indentation would do.
      Redundant parenthesization of UNION lists has been reduced as well.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix dumping of rules/views when subsequent addition of a column has
      resulted in multiple input columns matching a <literal
>USING</literal>
      specification (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Repair view printing for some cases involving functions
      in <literal
>FROM</literal> that return a composite type containing dropped
      columns (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Block signals during postmaster startup (Tom Lane)
     </para>

     <para
>      This ensures that the postmaster will properly clean up after itself
      if, for example, it receives <systemitem
>SIGINT</systemitem> while still
      starting up.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix client host name lookup when processing <filename
>pg_hba.conf</filename>
      entries that specify host names instead of IP addresses (Tom Lane)
     </para>

     <para
>      Ensure that reverse-DNS lookup failures are reported, instead of just
      silently not matching such entries.  Also ensure that we make only
      one reverse-DNS lookup attempt per connection, not one per host name
      entry, which is what previously happened if the lookup attempts failed.
     </para>
    </listitem>


    <listitem
>     <para
>      Allow the root user to use <literal
>postgres -C variable</literal> and
      <literal
>postgres --describe-config</literal> (MauMau)
     </para>

     <para
>      The prohibition on starting the server as root does not need to extend
      to these operations, and relaxing it prevents failure
      of <application
>pg_ctl</application> in some scenarios.
     </para>
    </listitem>


    <listitem
>     <para
>      Secure Unix-domain sockets of temporary postmasters started during
      <literal
>make check</literal> (Noah Misch)
     </para>

     <para
>      Any local user able to access the socket file could connect as the
      server's bootstrap superuser, then proceed to execute arbitrary code as
      the operating-system user running the test, as we previously noted in
      CVE-2014-0067.  This change defends against that risk by placing the
      server's socket in a temporary, mode 0700 subdirectory
      of <filename
>/tmp</filename>.  The hazard remains however on platforms where
      Unix sockets are not supported, notably Windows, because then the
      temporary postmaster must accept local TCP connections.
     </para>

     <para
>      A useful side effect of this change is to simplify
      <literal
>make check</literal> testing in builds that
      override <literal
>DEFAULT_PGSOCKET_DIR</literal>.  Popular non-default values
      like <filename
>/var/run/postgresql</filename> are often not writable by the
      build user, requiring workarounds that will no longer be necessary.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix tablespace creation WAL replay to work on Windows (MauMau)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix detection of socket creation failures on Windows (Bruce Momjian)
     </para>
    </listitem>


    <listitem
>     <para
>      On Windows, allow new sessions to absorb values of PGC_BACKEND
      parameters (such as <xref
linkend="guc-log-connections"
>) from the
      configuration file (Amit Kapila)
     </xref></para>

     <para
>      Previously, if such a parameter were changed in the file post-startup,
      the change would have no effect.
     </para>
    </listitem>


    <listitem
>     <para
>      Properly quote executable path names on Windows (Nikhil Deshpande)
     </para>

     <para
>      This oversight could cause <application
>initdb</application>
      and <application
>pg_upgrade</application> to fail on Windows, if the installation
      path contained both spaces and <literal
>@</literal> signs.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix linking of <application
>libpython</application> on OS X (Tom Lane)
     </para>

     <para
>      The method we previously used can fail with the Python library
      supplied by Xcode 5.0 and later.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid buffer bloat in <application
>libpq</application> when the server
      consistently sends data faster than the client can absorb it
      (Shin-ichi Morita, Tom Lane)
     </para>

     <para
>      <application
>libpq</application> could be coerced into enlarging its input buffer
      until it runs out of memory (which would be reported misleadingly
      as <quote
>lost synchronization with server</quote>).  Under ordinary
      circumstances it's quite far-fetched that data could be continuously
      transmitted more quickly than the <function
>recv()</function> loop can
      absorb it, but this has been observed when the client is artificially
      slowed by scheduler constraints.
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure that LDAP lookup attempts in <application
>libpq</application> time out as
      intended (Laurenz Albe)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>ecpg</application> to do the right thing when an array
      of <type
>char *</type> is the target for a FETCH statement returning more
      than one row, as well as some other array-handling fixes
      (Ashutosh Bapat)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>pg_dump</application> to cope with a materialized view that
      depends on a table's primary key (Tom Lane)
     </para>

     <para
>      This occurs if the view's query relies on functional dependency to
      abbreviate a <literal
>GROUP BY</literal> list.  <application
>pg_dump</application> got
      sufficiently confused that it dumped the materialized view as a
      regular view.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix parsing of <application
>pg_dumpall</application>'s <option
>-i</option> switch
      (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>pg_restore</application>'s processing of old-style large object
      comments (Tom Lane)
     </para>

     <para
>      A direct-to-database restore from an archive file generated by a
      pre-9.0 version of <application
>pg_dump</application> would usually fail if the
      archive contained more than a few comments for large objects.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>pg_upgrade</application> for cases where the new server creates
      a TOAST table but the old version did not (Bruce Momjian)
     </para>

     <para
>      This rare situation would manifest as <quote
>relation OID mismatch</quote>
      errors.
     </para>
    </listitem>


    <listitem
>     <para
>      In <application
>pg_upgrade</application>,
      preserve <structname
>pg_database</structname>.<structfield
>datminmxid</structfield>
      and <structname
>pg_class</structname>.<structfield
>relminmxid</structfield> values from the
      old cluster, or insert reasonable values when upgrading from pre-9.3;
      also defend against unreasonable values in the core server
      (Bruce Momjian, lvaro Herrera, Tom Lane)
     </para>

     <para
>      These changes prevent scenarios in which autovacuum might insist on
      scanning the entire cluster's contents immediately upon starting the
      new cluster, or in which tracking of unfrozen MXID values might be
      disabled completely.
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent <filename
>contrib/auto_explain</filename> from changing the output of
      a user's <command
>EXPLAIN</command> (Tom Lane)
     </para>

     <para
>      If <filename
>auto_explain</filename> is active, it could cause
      an <literal
>EXPLAIN (ANALYZE, TIMING OFF)</literal> command to nonetheless
      print timing information.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix query-lifespan memory leak in <filename
>contrib/dblink</filename>
      (MauMau, Joe Conway)
     </para>
    </listitem>


    <listitem
>     <para
>      In <filename
>contrib/pgcrypto</filename> functions, ensure sensitive
      information is cleared from stack variables before returning
      (Marko Kreen)
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent use of already-freed memory in
      <filename
>contrib/pgstattuple</filename>'s <function
>pgstat_heap()</function>
      (Noah Misch)
     </para>
    </listitem>


    <listitem
>     <para
>      In <filename
>contrib/uuid-ossp</filename>, cache the state of the OSSP UUID
      library across calls (Tom Lane)
     </para>

     <para
>      This improves the efficiency of UUID generation and reduces the amount
      of entropy drawn from <filename
>/dev/urandom</filename>, on platforms that
      have that.
     </para>
    </listitem>


    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2014e
      for DST law changes in Crimea, Egypt, and Morocco.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-4"
>  <title
>Release 9.3.4</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2014-03-20</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.3.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.4</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, the error fixed in the first changelog entry below could have
    resulted in corrupt data on standby servers.  It may be prudent to
    reinitialize standby servers from fresh base backups after installing
    this update.
   </para>

   <para
>    Also, if you are upgrading from a version earlier than 9.3.3,
    see <xref
linkend="release-9-3-3"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>

    <listitem
>     <para
>      Fix WAL replay of locking an already-updated tuple (Andres Freund,
      lvaro Herrera)
     </para>

     <para
>      This error caused updated rows to not be found by index scans, resulting
      in inconsistent query results depending on whether an index scan was
      used.  Subsequent processing could result in constraint violations,
      since the previously updated row would not be found by later index
      searches, thus possibly allowing conflicting rows to be inserted.
      Since this error is in WAL replay, it would only manifest during crash
      recovery or on standby servers.  The improperly-replayed case most
      commonly arises when a table row that is referenced by a foreign-key
      constraint is updated concurrently with creation of a referencing row.
     </para>
    </listitem>


    <listitem
>     <para
>      Restore GIN metapages unconditionally to avoid torn-page risk
      (Heikki Linnakangas)
     </para>

     <para
>      Although this oversight could theoretically result in a corrupted
      index, it is unlikely to have caused any problems in practice, since
      the active part of a GIN metapage is smaller than a standard 512-byte
      disk sector.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid race condition in checking transaction commit status during
      receipt of a <command
>NOTIFY</command> message (Marko Tiikkaja)
     </para>

     <para
>      This prevents a scenario wherein a sufficiently fast client might
      respond to a notification before database updates made by the
      notifier have become visible to the recipient.
     </para>
    </listitem>


    <listitem
>     <para
>      Allow materialized views to be referenced in <command
>UPDATE</command>
      and <command
>DELETE</command> commands (Michael Paquier)
     </para>

     <para
>      Previously such queries failed with a complaint about not being able
      to lock rows in the materialized view.
     </para>
    </listitem>


    <listitem
>     <para
>      Allow regular-expression operators to be terminated early by query
      cancel requests (Tom Lane)
     </para>

     <para
>      This prevents scenarios wherein a pathological regular expression
      could lock up a server process uninterruptably for a long time.
     </para>
    </listitem>


    <listitem
>     <para
>      Remove incorrect code that tried to allow <literal
>OVERLAPS</literal> with
      single-element row arguments (Joshua Yanovski)
     </para>

     <para
>      This code never worked correctly, and since the case is neither
      specified by the SQL standard nor documented, it seemed better to
      remove it than fix it.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid getting more than <literal
>AccessShareLock</literal> when de-parsing a
      rule or view (Dean Rasheed)
     </para>

     <para
>      This oversight resulted in <application
>pg_dump</application> unexpectedly
      acquiring <literal
>RowExclusiveLock</literal> locks on tables mentioned as
      the targets of <literal
>INSERT</literal>/<literal
>UPDATE</literal>/<literal
>DELETE</literal>
      commands in rules.  While usually harmless, that could interfere with
      concurrent transactions that tried to acquire, for example,
      <literal
>ShareLock</literal> on those tables.
     </para>
    </listitem>


    <listitem
>     <para
>      Improve performance of index endpoint probes during planning (Tom Lane)
     </para>

     <para
>      This change fixes a significant performance problem that occurred
      when there were many not-yet-committed rows at the end of the index,
      which is a common situation for indexes on sequentially-assigned
      values such as timestamps or sequence-generated identifiers.
     </para>
    </listitem>


    <listitem
>     <para
>      Use non-default selectivity estimates for
      <literal
><replaceable
>value</replaceable> IN (<replaceable
>list</replaceable>)</literal> and
      <literal
><replaceable
>value</replaceable> <replaceable
>operator</replaceable> ANY
      (<replaceable
>array</replaceable>)</literal>
      expressions when the righthand side is a stable expression (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Remove the correct per-database statistics file during <command
>DROP
      DATABASE</command> (Tomas Vondra)
     </para>

     <para
>      This fix prevents a permanent leak of statistics file space.
      Users who have done many <command
>DROP DATABASE</command> commands since
      upgrading to <productname
>PostgreSQL</productname> 9.3 may wish to check their
      statistics directory and delete statistics files that do not
      correspond to any existing database.  Please note
      that <filename
>db_0.stat</filename> should not be removed.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>walsender</application> ping logic to avoid inappropriate
      disconnects under continuous load (Andres Freund, Heikki Linnakangas)
     </para>

     <para
>      <application
>walsender</application> failed to send ping messages to the client
      if it was constantly busy sending WAL data; but it expected to see
      ping responses despite that, and would therefore disconnect
      once <xref
linkend="guc-wal-sender-timeout"
> elapsed.
     </xref></para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>walsender</application>'s failure to shut down cleanly when client
      is <application
>pg_receivexlog</application> (Fujii Masao)
     </para>
    </listitem>


    <listitem
>     <para
>      Check WAL level and hot standby parameters correctly when doing crash
      recovery that will be followed by archive recovery (Heikki Linnakangas)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix test to see if hot standby connections can be allowed immediately
      after a crash (Heikki Linnakangas)
     </para>
    </listitem>


    <listitem
>     <para
>      Add read-only <xref
linkend="guc-data-checksums"
> parameter to
      display whether page checksums are enabled (Heikki Linnakangas)
     </xref></para>

     <para
>      Without this parameter, determining the state of checksum
      processing was difficult.
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent interrupts while reporting non-<literal
>ERROR</literal> messages
      (Tom Lane)
     </para>

     <para
>      This guards against rare server-process freezeups due to recursive
      entry to <function
>syslog()</function>, and perhaps other related problems.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix memory leak in PL/Perl when returning a composite result, including
      multiple-OUT-parameter cases (Alex Hunsaker)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix tracking of <application
>psql</application> script line numbers
      during <literal
>\copy</literal> from out-of-line data
      (Kumar Rajeev Rastogi, Amit Khandekar)
     </para>

     <para
>      <literal
>\copy ... from</literal> incremented the script file line number
      for each data line, even if the data was not coming from the script
      file.  This mistake resulted in wrong line numbers being reported for
      any errors occurring later in the same script file.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <application
>contrib/postgres_fdw</application> to handle multiple join
      conditions properly (Tom Lane)
     </para>

     <para
>      This oversight could result in sending <literal
>WHERE</literal> clauses to
      the remote server for execution even though the clauses are not known
      to have the same semantics on the remote server (for example, clauses
      that use non-built-in operators).  The query might succeed anyway,
      but it could also fail with errors from the remote server, or worse
      give silently wrong answers.
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent intermittent <quote
>could not reserve shared memory region</quote>
      failures on recent Windows versions (MauMau)
     </para>
    </listitem>


    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2014a
      for DST law changes in Fiji and Turkey, plus historical changes in
      Israel and Ukraine.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-3"
>  <title
>Release 9.3.3</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2014-02-20</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.2.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.3</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, several of the issues corrected in this release could have
    resulted in corruption of foreign-key constraints; that is, there
    might now be referencing rows for which there is no matching row in
    the referenced table.  It may be worthwhile to recheck such
    constraints after installing this update.  The simplest way to do that
    is to drop and recreate each suspect constraint; however, that will
    require taking an exclusive lock on both tables, so it is unlikely to
    be acceptable in production databases.  Alternatively, you can do a
    manual join query between the two tables to look for unmatched rows.
   </para>

   <para
>    Note also the requirement for replication standby servers to be
    upgraded before their master server is upgraded.
   </para>

   <para
>    Also, if you are upgrading from a version earlier than 9.3.2,
    see <xref
linkend="release-9-3-2"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>

    <listitem
>     <para
>      Shore up <literal
>GRANT ... WITH ADMIN OPTION</literal> restrictions
      (Noah Misch)
     </para>

     <para
>      Granting a role without <literal
>ADMIN OPTION</literal> is supposed to
      prevent the grantee from adding or removing members from the granted
      role, but this restriction was easily bypassed by doing <literal
>SET
      ROLE</literal> first.  The security impact is mostly that a role member can
      revoke the access of others, contrary to the wishes of his grantor.
      Unapproved role member additions are a lesser concern, since an
      uncooperative role member could provide most of his rights to others
      anyway by creating views or <literal
>SECURITY DEFINER</literal> functions.
      (CVE-2014-0060)
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent privilege escalation via manual calls to PL validator
      functions (Andres Freund)
     </para>

     <para
>      The primary role of PL validator functions is to be called implicitly
      during <command
>CREATE FUNCTION</command>, but they are also normal SQL
      functions that a user can call explicitly.  Calling a validator on
      a function actually written in some other language was not checked
      for and could be exploited for privilege-escalation purposes.
      The fix involves adding a call to a privilege-checking function in
      each validator function.  Non-core procedural languages will also
      need to make this change to their own validator functions, if any.
      (CVE-2014-0061)
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid multiple name lookups during table and index DDL
      (Robert Haas, Andres Freund)
     </para>

     <para
>      If the name lookups come to different conclusions due to concurrent
      activity, we might perform some parts of the DDL on a different table
      than other parts.  At least in the case of <command
>CREATE INDEX</command>,
      this can be used to cause the permissions checks to be performed
      against a different table than the index creation, allowing for a
      privilege escalation attack.
      (CVE-2014-0062)
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent buffer overrun with long datetime strings (Noah Misch)
     </para>

     <para
>      The <literal
>MAXDATELEN</literal> constant was too small for the longest
      possible value of type <type
>interval</type>, allowing a buffer overrun
      in <function
>interval_out()</function>.  Although the datetime input
      functions were more careful about avoiding buffer overrun, the limit
      was short enough to cause them to reject some valid inputs, such as
      input containing a very long timezone name.  The <application
>ecpg</application>
      library contained these vulnerabilities along with some of its own.
      (CVE-2014-0063)
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent buffer overrun due to integer overflow in size calculations
      (Noah Misch, Heikki Linnakangas)
     </para>

     <para
>      Several functions, mostly type input functions, calculated an
      allocation size without checking for overflow.  If overflow did
      occur, a too-small buffer would be allocated and then written past.
      (CVE-2014-0064)
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent overruns of fixed-size buffers
      (Peter Eisentraut, Jozef Mlich)
     </para>

     <para
>      Use <function
>strlcpy()</function> and related functions to provide a clear
      guarantee that fixed-size buffers are not overrun.  Unlike the
      preceding items, it is unclear whether these cases really represent
      live issues, since in most cases there appear to be previous
      constraints on the size of the input string.  Nonetheless it seems
      prudent to silence all Coverity warnings of this type.
      (CVE-2014-0065)
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid crashing if <function
>crypt()</function> returns NULL (Honza Horak,
      Bruce Momjian)
     </para>

     <para
>      There are relatively few scenarios in which <function
>crypt()</function>
      could return NULL, but <filename
>contrib/chkpass</filename> would crash
      if it did.  One practical case in which this could be an issue is
      if <application
>libc</application> is configured to refuse to execute unapproved
      hashing algorithms (e.g., <quote
>FIPS mode</quote>).
      (CVE-2014-0066)
     </para>
    </listitem>


    <listitem
>     <para
>      Document risks of <literal
>make check</literal> in the regression testing
      instructions (Noah Misch, Tom Lane)
     </para>

     <para
>      Since the temporary server started by <literal
>make check</literal>
      uses <quote
>trust</quote> authentication, another user on the same machine
      could connect to it as database superuser, and then potentially
      exploit the privileges of the operating-system user who started the
      tests.  A future release will probably incorporate changes in the
      testing procedure to prevent this risk, but some public discussion is
      needed first.  So for the moment, just warn people against using
      <literal
>make check</literal> when there are untrusted users on the
      same machine.
      (CVE-2014-0067)
     </para>
    </listitem>


    <listitem
>     <para
>      Rework tuple freezing protocol
      (lvaro Herrera, Andres Freund)
     </para>

     <para
>      The logic for tuple freezing was unable to handle some cases involving
      freezing of
      <link
linkend="vacuum-for-multixact-wraparound"
><firstterm
>multixact</firstterm>
      IDs</link>, with the practical effect that shared row-level locks
      might be forgotten once old enough.
     </para>

     <para
>      Fixing this required changing the WAL record format for tuple
      freezing.  While this is no issue for standalone servers, when using
      replication it means that <emphasis
>standby servers must be upgraded
      to 9.3.3 or later before their masters are</emphasis>.  An older standby will
      be unable to interpret freeze records generated by a newer master, and
      will fail with a PANIC message.  (In such a case, upgrading the
      standby should be sufficient to let it resume execution.)
     </para>
    </listitem>


    <listitem
>     <para
>      Create separate GUC parameters to control multixact freezing
      (lvaro Herrera)
     </para>

     <para
>      9.3 requires multixact tuple labels to be frozen before
      they grow too old, in the same fashion as plain transaction ID labels
      have been frozen for some time.  Previously, the transaction ID
      freezing parameters were used for multixact IDs too; but since
      the consumption rates of transaction IDs and multixact IDs can be
      quite different, this did not work very well.  Introduce new settings
      <xref
linkend="guc-vacuum-multixact-freeze-min-age"
>,
      <xref
linkend="guc-vacuum-multixact-freeze-table-age"
>, and
      <xref
linkend="guc-autovacuum-multixact-freeze-max-age"
>      to control when to freeze multixacts.
     </xref></xref></xref></para>
    </listitem>


    <listitem
>     <para
>      Account for remote row locks propagated by local updates
      (lvaro Herrera)
     </para>

     <para
>      If a row was locked by transaction A, and transaction B updated it,
      the new version of the row created by B would be locked by A, yet
      visible only to B.  If transaction B then again updated the row, A's
      lock wouldn't get checked, thus possibly allowing B to complete when
      it shouldn't.  This case is new in 9.3 since prior versions did not
      have any types of row locking that would permit another transaction
      to update the row at all.
     </para>

     <para
>      This oversight could allow referential integrity checks to give false
      positives (for instance, allow deletes that should have been rejected).
      Applications using the new commands <literal
>SELECT FOR KEY SHARE</literal>
      and <literal
>SELECT FOR NO KEY UPDATE</literal> might also have suffered
      locking failures of this kind.
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent <quote
>forgetting</quote> valid row locks when one of several
      holders of a row lock aborts (lvaro Herrera)
     </para>

     <para
>      This was yet another mechanism by which a shared row lock could be
      lost, thus possibly allowing updates that should have been prevented
      by foreign-key constraints.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix incorrect logic during update chain locking
      (lvaro Herrera)
     </para>

     <para
>      This mistake could result in spurious <quote
>could not serialize access
      due to concurrent update</quote> errors in <literal
>REPEATABLE READ</literal>
      and <literal
>SERIALIZABLE</literal> transaction isolation modes.
     </para>
    </listitem>


    <listitem
>     <para
>      Handle wraparound correctly during extension or truncation
      of <filename
>pg_multixact/members</filename>
      (Andres Freund, lvaro Herrera)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix handling of 5-digit filenames in <filename
>pg_multixact/members</filename>
      (lvaro Herrera)
     </para>

     <para
>      As of 9.3, these names can be more than 4 digits, but the directory
      cleanup code ignored such files.
     </para>
    </listitem>


    <listitem
>     <para
>      Improve performance of multixact cache code
      (lvaro Herrera)
     </para>
    </listitem>


    <listitem
>     <para
>      Optimize updating a row that's already locked by the same transaction
      (Andres Freund, lvaro Herrera)
     </para>

     <para
>      This fixes a performance regression from pre-9.3 versions when doing
      <literal
>SELECT FOR UPDATE</literal> followed by <literal
>UPDATE/DELETE</literal>.
     </para>
    </listitem>


    <listitem
>     <para
>      During archive recovery, prefer highest timeline number when WAL
      segments with the same ID are present in both the archive
      and <filename
>pg_xlog/</filename> (Kyotaro Horiguchi)
     </para>

     <para
>      Previously, not-yet-archived segments could get ignored during
      recovery.  This reverts an undesirable behavioral change in 9.3.0
      back to the way things worked pre-9.3.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible mis-replay of WAL records when some segments of a
      relation aren't full size (Greg Stark, Tom Lane)
     </para>

     <para
>      The WAL update could be applied to the wrong page, potentially many
      pages past where it should have been.  Aside from corrupting data,
      this error has been observed to result in significant <quote
>bloat</quote>
      of standby servers compared to their masters, due to updates being
      applied far beyond where the end-of-file should have been.  This
      failure mode does not appear to be a significant risk during crash
      recovery, only when initially synchronizing a standby created from a
      base backup taken from a quickly-changing master.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix bug in determining when recovery has reached consistency
      (Tomonari Katsumata, Heikki Linnakangas)
     </para>

     <para
>      In some cases WAL replay would mistakenly conclude that the database
      was already consistent at the start of replay, thus possibly allowing
      hot-standby queries before the database was really consistent.  Other
      symptoms such as <quote
>PANIC: WAL contains references to invalid
      pages</quote> were also possible.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix WAL logging of visibility map changes (Heikki Linnakangas)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix improper locking of btree index pages while replaying
      a <literal
>VACUUM</literal> operation in hot-standby mode (Andres Freund,
      Heikki Linnakangas, Tom Lane)
     </para>

     <para
>      This error could result in <quote
>PANIC: WAL contains references to
      invalid pages</quote> failures.
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure that insertions into non-leaf GIN index pages write a full-page
      WAL record when appropriate (Heikki Linnakangas)
     </para>

     <para
>      The previous coding risked index corruption in the event of a
      partial-page write during a system crash.
     </para>
    </listitem>


    <listitem
>     <para
>      When <literal
>pause_at_recovery_target</literal>
      and <literal
>recovery_target_inclusive</literal> are both set, ensure the
      target record is applied before pausing, not after (Heikki
      Linnakangas)
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure walreceiver sends hot-standby feedback messages on time even
      when there is a continuous stream of data (Andres Freund, Amit
      Kapila)
     </para>
    </listitem>


    <listitem
>     <para
>      Prevent timeout interrupts from taking control away from mainline
      code unless <varname
>ImmediateInterruptOK</varname> is set
      (Andres Freund, Tom Lane)
     </para>

     <para
>      This is a serious issue for any application making use of statement
      timeouts, as it could cause all manner of strange failures after a
      timeout occurred.  We have seen reports of <quote
>stuck</quote> spinlocks,
      ERRORs being unexpectedly promoted to PANICs, unkillable backends,
      and other misbehaviors.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix race conditions during server process exit (Robert Haas)
     </para>

     <para
>      Ensure that signal handlers don't attempt to use the
      process's <varname
>MyProc</varname> pointer after it's no longer valid.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix race conditions in walsender shutdown logic and walreceiver
      SIGHUP signal handler (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix unsafe references to <varname
>errno</varname> within error reporting
      logic (Christian Kruse)
     </para>

     <para
>      This would typically lead to odd behaviors such as missing or
      inappropriate <literal
>HINT</literal> fields.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible crashes from using <function
>ereport()</function> too early
      during server startup (Tom Lane)
     </para>

     <para
>      The principal case we've seen in the field is a crash if the server
      is started in a directory it doesn't have permission to read.
     </para>
    </listitem>


    <listitem
>     <para
>      Clear retry flags properly in OpenSSL socket write
      function (Alexander Kukushkin)
     </para>

     <para
>      This omission could result in a server lockup after unexpected loss
      of an SSL-encrypted connection.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix length checking for Unicode identifiers (<literal
>U"..."</literal>
      syntax) containing escapes (Tom Lane)
     </para>

     <para
>      A spurious truncation warning would be printed for such identifiers
      if the escaped form of the identifier was too long, but the
      identifier actually didn't need truncation after de-escaping.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix parsing of Unicode literals and identifiers just before the end
      of a command string or function body (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Allow keywords that are type names to be used in lists of roles
      (Stephen Frost)
     </para>

     <para
>      A previous patch allowed such keywords to be used without quoting
      in places such as role identifiers; but it missed cases where a
      list of role identifiers was permitted, such as <literal
>DROP ROLE</literal>.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix parser crash for <literal
>EXISTS(SELECT * FROM
      zero_column_table)</literal> (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible crash due to invalid plan for nested sub-selects, such
      as <literal
>WHERE (... x IN (SELECT ...) ...) IN (SELECT ...)</literal>
      (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix mishandling of <literal
>WHERE</literal> conditions pulled up from
      a <literal
>LATERAL</literal> subquery (Tom Lane)
     </para>

     <para
>      The typical symptom of this bug was a <quote
>JOIN qualification
      cannot refer to other relations</quote> error, though subtle logic
      errors in created plans seem possible as well.
     </para>
    </listitem>


    <listitem
>     <para
>      Disallow <literal
>LATERAL</literal> references to the target table of
      an <literal
>UPDATE/DELETE</literal> (Tom Lane)
     </para>

     <para
>      While this might be allowed in some future release, it was
      unintentional in 9.3, and didn't work quite right anyway.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <literal
>UPDATE/DELETE</literal> of an inherited target table
      that has <literal
>UNION ALL</literal> subqueries (Tom Lane)
     </para>

     <para
>      Without this fix, <literal
>UNION ALL</literal> subqueries aren't correctly
      inserted into the update plans for inheritance child tables after the
      first one, typically resulting in no update happening for those child
      table(s).
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <command
>ANALYZE</command> to not fail on a column that's a domain over
      a range type (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure that <command
>ANALYZE</command> creates statistics for a table column
      even when all the values in it are <quote
>too wide</quote> (Tom Lane)
     </para>

     <para
>      <command
>ANALYZE</command> intentionally omits very wide values from its
      histogram and most-common-values calculations, but it neglected to do
      something sane in the case that all the sampled entries are too wide.
     </para>
    </listitem>


    <listitem
>     <para
>      In <literal
>ALTER TABLE ... SET TABLESPACE</literal>, allow the database's
      default tablespace to be used without a permissions check
      (Stephen Frost)
     </para>

     <para
>      <literal
>CREATE TABLE</literal> has always allowed such usage,
      but <literal
>ALTER TABLE</literal> didn't get the memo.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix support for extensions containing event triggers (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <quote
>cannot accept a set</quote> error when some arms of
      a <literal
>CASE</literal> return a set and others don't (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix memory leakage in JSON functions (Craig Ringer)
     </para>
    </listitem>


    <listitem
>     <para
>      Properly distinguish numbers from non-numbers when generating JSON
      output (Andrew Dunstan)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix checks for all-zero client addresses in pgstat functions (Kevin
      Grittner)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible misclassification of multibyte characters by the text
      search parser (Tom Lane)
     </para>

     <para
>      Non-ASCII characters could be misclassified when using C locale with
      a multibyte encoding.  On Cygwin, non-C locales could fail as well.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible misbehavior in <function
>plainto_tsquery()</function>
      (Heikki Linnakangas)
     </para>

     <para
>      Use <function
>memmove()</function> not <function
>memcpy()</function> for copying
      overlapping memory regions.  There have been no field reports of
      this actually causing trouble, but it's certainly risky.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix placement of permissions checks in <function
>pg_start_backup()</function>
      and <function
>pg_stop_backup()</function> (Andres Freund, Magnus Hagander)
     </para>

     <para
>      The previous coding might attempt to do catalog access when it
      shouldn't.
     </para>
    </listitem>


    <listitem
>     <para
>      Accept <literal
>SHIFT_JIS</literal> as an encoding name for locale checking
      purposes (Tatsuo Ishii)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <literal
>*</literal>-qualification of named parameters in SQL-language
      functions (Tom Lane)
     </para>

     <para
>      Given a composite-type parameter
      named <literal
>foo</literal>, <literal
>$1.*</literal> worked fine,
      but <literal
>foo.*</literal> not so much.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix misbehavior of <function
>PQhost()</function> on Windows (Fujii Masao)
     </para>

     <para
>      It should return <literal
>localhost</literal> if no host has been specified.
     </para>
    </listitem>


    <listitem
>     <para
>      Improve error handling in <application
>libpq</application> and <application
>psql</application>
      for failures during <literal
>COPY TO STDOUT/FROM STDIN</literal> (Tom Lane)
     </para>

     <para
>      In particular this fixes an infinite loop that could occur in 9.2 and
      up if the server connection was lost during <literal
>COPY FROM
      STDIN</literal>.  Variants of that scenario might be possible in older
      versions, or with other client applications.
     </para>
    </listitem>


    <listitem
>     <para
>      Fix incorrect translation handling in
      some <application
>psql</application> <literal
>\d</literal> commands
      (Peter Eisentraut, Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure <application
>pg_basebackup</application>'s background process is killed
      when exiting its foreground process (Magnus Hagander)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix possible incorrect printing of filenames
      in <application
>pg_basebackup</application>'s verbose mode (Magnus Hagander)
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid including tablespaces inside PGDATA twice in base backups
      (Dimitri Fontaine, Magnus Hagander)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix misaligned descriptors in <application
>ecpg</application> (MauMau)
     </para>
    </listitem>


    <listitem
>     <para
>      In <application
>ecpg</application>, handle lack of a hostname in the connection
      parameters properly (Michael Meskes)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix performance regression in <filename
>contrib/dblink</filename> connection
      startup (Joe Conway)
     </para>

     <para
>      Avoid an unnecessary round trip when client and server encodings match.
     </para>
    </listitem>


    <listitem
>     <para
>      In <filename
>contrib/isn</filename>, fix incorrect calculation of the check
      digit for ISMN values (Fabien Coelho)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <filename
>contrib/pgbench</filename>'s progress logging to avoid overflow
      when the scale factor is large (Tatsuo Ishii)
     </para>
    </listitem>


    <listitem
>     <para
>      Fix <filename
>contrib/pg_stat_statement</filename>'s handling
      of <literal
>CURRENT_DATE</literal> and related constructs (Kyotaro
      Horiguchi)
     </para>
    </listitem>


    <listitem
>     <para
>      Improve lost-connection error handling
      in <filename
>contrib/postgres_fdw</filename> (Tom Lane)
     </para>
    </listitem>


    <listitem
>     <para
>      Ensure client-code-only installation procedure works as documented
      (Peter Eisentraut)
     </para>
    </listitem>


    <listitem
>     <para
>      In Mingw and Cygwin builds, install the <application
>libpq</application> DLL
      in the <filename
>bin</filename> directory (Andrew Dunstan)
     </para>

     <para
>      This duplicates what the MSVC build has long done.  It should fix
      problems with programs like <application
>psql</application> failing to start
      because they can't find the DLL.
     </para>
    </listitem>


    <listitem
>     <para
>      Avoid using the deprecated <literal
>dllwrap</literal> tool in Cygwin builds
      (Marco Atzeri)
     </para>
    </listitem>


    <listitem
>     <para
>      Enable building with Visual Studio 2013 (Brar Piening)
     </para>
    </listitem>


    <listitem
>     <para
>      Don't generate plain-text <filename
>HISTORY</filename>
      and <filename
>src/test/regress/README</filename> files anymore (Tom Lane)
     </para>

     <para
>      These text files duplicated the main HTML and PDF documentation
      formats.  The trouble involved in maintaining them greatly outweighs
      the likely audience for plain-text format.  Distribution tarballs
      will still contain files by these names, but they'll just be stubs
      directing the reader to consult the main documentation.
      The plain-text <filename
>INSTALL</filename> file will still be maintained, as
      there is arguably a use-case for that.
     </para>
    </listitem>


    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2013i
      for DST law changes in Jordan and historical changes in Cuba.
     </para>

     <para
>      In addition, the zones <literal
>Asia/Riyadh87</literal>,
      <literal
>Asia/Riyadh88</literal>, and <literal
>Asia/Riyadh89</literal> have been
      removed, as they are no longer maintained by IANA, and never
      represented actual civil timekeeping practice.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-2"
>  <title
>Release 9.3.2</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2013-12-05</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.1.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.2</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, this release corrects a number of potential data corruption
    issues.  See the first three changelog entries below to find out whether
    your installation has been affected and what steps you can take if so.
   </para>

   <para
>    Also, if you are upgrading from a version earlier than 9.3.1,
    see <xref
linkend="release-9-3-1"
>.
   </xref></para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>
    <listitem
>     <para
>      Fix <command
>VACUUM</command>'s tests to see whether it can
      update <structfield
>relfrozenxid</structfield> (Andres Freund)
     </para>

     <para
>      In some cases <command
>VACUUM</command> (either manual or autovacuum) could
      incorrectly advance a table's <structfield
>relfrozenxid</structfield> value,
      allowing tuples to escape freezing, causing those rows to become
      invisible once 2^31 transactions have elapsed.  The probability of
      data loss is fairly low since multiple incorrect advancements would
      need to happen before actual loss occurs, but it's not zero.  In 9.2.0
      and later, the probability of loss is higher, and it's also possible
      to get <quote
>could not access status of transaction</quote> errors as a
      consequence of this bug.  Users upgrading from releases 9.0.4 or 8.4.8
      or earlier are not affected, but all later versions contain the bug.
     </para>

     <para
>      The issue can be ameliorated by, after upgrading, vacuuming all tables
      in all databases while having <link
linkend="guc-vacuum-freeze-table-age"
><varname
>vacuum_freeze_table_age</varname></link>
      set to zero.  This will fix any latent corruption but will not be able
      to fix all pre-existing data errors.  However, an installation can be
      presumed safe after performing this vacuuming if it has executed fewer
      than 2^31 update transactions in its lifetime (check this with
      <literal
>SELECT txid_current() &lt; 2^31</literal>).
     </para>
    </listitem>

    <listitem
>     <para
>      Fix multiple bugs in MultiXactId freezing (Andres Freund,
      lvaro Herrera)
     </para>

     <para
>      These bugs could lead to <quote
>could not access status of
      transaction</quote> errors, or to duplicate or vanishing rows.
      Users upgrading from releases prior to 9.3.0 are not affected.
     </para>

     <para
>      The issue can be ameliorated by, after upgrading, vacuuming all tables
      in all databases while having <link
linkend="guc-vacuum-freeze-table-age"
><varname
>vacuum_freeze_table_age</varname></link>
      set to zero.  This will fix latent corruption but will not be able to
      fix all pre-existing data errors.
     </para>

     <para
>      As a separate issue, these bugs can also cause standby servers to get
      out of sync with the primary, thus exhibiting data errors that are not
      in the primary.  Therefore, it's recommended that 9.3.0 and 9.3.1
      standby servers be re-cloned from the primary (e.g., with a new base
      backup) after upgrading.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix initialization of <filename
>pg_clog</filename> and <filename
>pg_subtrans</filename>
      during hot standby startup (Andres Freund, Heikki Linnakangas)
     </para>

     <para
>      This bug can cause data loss on standby servers at the moment they
      start to accept hot-standby queries, by marking committed transactions
      as uncommitted. The likelihood of such corruption is small unless, at
      the time of standby startup, the primary server has executed many
      updating transactions since its last checkpoint.  Symptoms include
      missing rows, rows that should have been deleted being still visible,
      and obsolete versions of updated rows being still visible alongside
      their newer versions.
     </para>

     <para
>      This bug was introduced in versions 9.3.0, 9.2.5, 9.1.10, and 9.0.14.
      Standby servers that have only been running earlier releases are not
      at risk.  It's recommended that standby servers that have ever run any
      of the buggy releases be re-cloned from the primary (e.g., with a new
      base backup) after upgrading.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix multiple bugs in update chain traversal (Andres Freund,
      lvaro Herrera)
     </para>

     <para
>      These bugs could result in incorrect behavior, such as locking or even
      updating the wrong row, in the presence of concurrent updates.
      Spurious <quote
>unable to fetch updated version of tuple</quote> errors
      were also possible.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix dangling-pointer problem in fast-path locking (Tom Lane)
     </para>

     <para
>      This could lead to corruption of the lock data structures in shared
      memory, causing <quote
>lock already held</quote> and other odd errors.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix assorted race conditions in timeout management (Tom Lane)
     </para>

     <para
>      These errors could result in a server process becoming unresponsive
      because it had blocked SIGALRM and/or SIGINT.
     </para>
    </listitem>

    <listitem
>     <para
>      Truncate <filename
>pg_multixact</filename> contents during WAL replay
      (Andres Freund)
     </para>

     <para
>      This avoids ever-increasing disk space consumption in standby servers.
     </para>
    </listitem>

    <listitem
>     <para
>      Ensure an anti-wraparound <command
>VACUUM</command> counts a page as scanned
      when it's only verified that no tuples need freezing (Sergey
      Burladyan, Jeff Janes)
     </para>

     <para
>      This bug could result in failing to
      advance <structfield
>relfrozenxid</structfield>, so that the table would still be
      thought to need another anti-wraparound vacuum.  In the worst case the
      database might even shut down to prevent wraparound.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix full-table-vacuum request mechanism for MultiXactIds (Andres Freund)
     </para>

     <para
>      This bug could result in large amounts of useless autovacuum activity.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix race condition in GIN index posting tree page deletion (Heikki
      Linnakangas)
     </para>

     <para
>      This could lead to transient wrong answers or query failures.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <quote
>unexpected spgdoinsert() failure</quote> error during SP-GiST
      index creation (Teodor Sigaev)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix assorted bugs in materialized views (Kevin Grittner, Andres Freund)
     </para>
    </listitem>

    <listitem
>     <para
>      Re-allow duplicate table aliases if they're within aliased JOINs
      (Tom Lane)
     </para>

     <para
>      Historically <productname
>PostgreSQL</productname> has accepted queries like
<programlisting
>SELECT ... FROM tab1 x CROSS JOIN (tab2 x CROSS JOIN tab3 y) z</programlisting>
      although a strict reading of the SQL standard would forbid the
      duplicate usage of table alias <literal
>x</literal>.  A misguided change in
      9.3.0 caused it to reject some such cases that were formerly accepted.
      Restore the previous behavior.
     </para>
    </listitem>

    <listitem
>     <para
>      Avoid flattening a subquery whose <literal
>SELECT</literal> list contains a
      volatile function wrapped inside a sub-<literal
>SELECT</literal> (Tom Lane)
     </para>

     <para
>      This avoids unexpected results due to extra evaluations of the
      volatile function.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix planner's processing of non-simple-variable subquery outputs
      nested within outer joins (Tom Lane)
     </para>

     <para
>      This error could lead to incorrect plans for queries involving
      multiple levels of subqueries within <literal
>JOIN</literal> syntax.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix incorrect planning in cases where the same non-strict expression
      appears in multiple <literal
>WHERE</literal> and outer <literal
>JOIN</literal>
      equality clauses (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix planner crash with whole-row reference to a subquery (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix incorrect generation of optimized MIN()/MAX() plans for
      inheritance trees (Tom Lane)
     </para>

     <para
>      The planner could fail in cases where the MIN()/MAX() argument was an
      expression rather than a simple variable.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix premature deletion of temporary files (Andres Freund)
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent intra-transaction memory leak when printing range values
      (Tom Lane)
     </para>

     <para
>      This fix actually cures transient memory leaks in any datatype output
      function, but range types are the only ones known to have had a
      significant problem.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix memory leaks when reloading configuration files (Heikki
      Linnakangas, Hari Babu)
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent incorrect display of dropped columns in NOT NULL and CHECK
      constraint violation messages (Michael Paquier and Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Allow default arguments and named-argument notation for window
      functions (Tom Lane)
     </para>

     <para
>      Previously, these cases were likely to crash.
     </para>
    </listitem>

    <listitem
>     <para
>      Suppress trailing whitespace on each line when pretty-printing rules
      and views (Tom Lane)
     </para>

     <para
>      9.3.0 generated such whitespace in many more cases than previous
      versions did.  To reduce unexpected behavioral changes, suppress
      unnecessary whitespace in all cases.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix possible read past end of memory in rule printing (Peter Eisentraut)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix array slicing of <type
>int2vector</type> and <type
>oidvector</type> values
      (Tom Lane)
     </para>

     <para
>      Expressions of this kind are now implicitly promoted to
      regular <type
>int2</type> or <type
>oid</type> arrays.
     </para>
    </listitem>

    <listitem
>     <para
>      Return a valid JSON value when converting an empty <type
>hstore</type> value
      to <type
>json</type>
      (Oskari Saarenmaa)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix incorrect behaviors when using a SQL-standard, simple GMT offset
      timezone (Tom Lane)
     </para>

     <para
>      In some cases, the system would use the simple GMT offset value when
      it should have used the regular timezone setting that had prevailed
      before the simple offset was selected.  This change also causes
      the <function
>timeofday</function> function to honor the simple GMT offset
      zone.
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent possible misbehavior when logging translations of Windows
      error codes (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Properly quote generated command lines in <application
>pg_ctl</application>
      (Naoya Anzai and Tom Lane)
     </para>

     <para
>      This fix applies only to Windows.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>pg_dumpall</application> to work when a source database
      sets <link
linkend="guc-default-transaction-read-only"
><varname
>default_transaction_read_only</varname></link>
      via <command
>ALTER DATABASE SET</command> (Kevin Grittner)
     </para>

     <para
>      Previously, the generated script would fail during restore.
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>pg_isready</application> to handle its <option
>-d</option> option
      properly (Fabrzio de Royes Mello and Fujii Masao)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix parsing of WAL file names in <application
>pg_receivexlog</application>
      (Heikki Linnakangas)
     </para>

     <para
>      This error made <application
>pg_receivexlog</application> unable to restart
      streaming after stopping, once at least 4 GB of WAL had been written.
     </para>
    </listitem>

    <listitem
>     <para
>      Report out-of-disk-space failures properly
      in <application
>pg_upgrade</application> (Peter Eisentraut)
     </para>
    </listitem>

    <listitem
>     <para
>      Make <application
>ecpg</application> search for quoted cursor names
      case-sensitively (Zoltn Bszrmnyi)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix <application
>ecpg</application>'s processing of lists of variables
      declared <type
>varchar</type> (Zoltn Bszrmnyi)
     </para>
    </listitem>

    <listitem
>     <para
>      Make <filename
>contrib/lo</filename> defend against incorrect trigger definitions
      (Marc Cousin)
     </para>
    </listitem>

    <listitem
>     <para
>      Update time zone data files to <application
>tzdata</application> release 2013h
      for DST law changes in Argentina, Brazil, Jordan, Libya,
      Liechtenstein, Morocco, and Palestine.  Also, new timezone
      abbreviations WIB, WIT, WITA for Indonesia.
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3-1"
>  <title
>Release 9.3.1</title>

  <note
>  <title
>Release Date</title>
  <simpara
>2013-10-10</simpara>
  </note>

  <para
>   This release contains a variety of fixes from 9.3.0.
   For information about new features in the 9.3 major release, see
   <xref
linkend="release-9-3"
>.
  </xref></para>

  <sect2
>   <title
>Migration to Version 9.3.1</title>

   <para
>    A dump/restore is not required for those running 9.3.X.
   </para>

   <para
>    However, if you use the <literal
>hstore</literal> extension, see the
    first changelog entry.
   </para>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <itemizedlist
>
    <listitem
>     <para
>      Ensure new-in-9.3 JSON functionality is added to the <literal
>hstore</literal>
      extension during an update (Andrew Dunstan)
     </para>

     <para
>      Users who upgraded a pre-9.3 database containing <literal
>hstore</literal>
      should execute
<programlisting
>ALTER EXTENSION hstore UPDATE;</programlisting>
      after installing 9.3.1, to add two new JSON functions and a cast.
      (If <literal
>hstore</literal> is already up to date, this command does
      nothing.)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix memory leak when creating B-tree indexes on range columns
      (Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix memory leak caused by <function
>lo_open()</function> failure
      (Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Serializable snapshot fixes (Kevin Grittner, Heikki Linnakangas)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix deadlock bug in libpq when using SSL (Stephen Frost)
     </para>
    </listitem>

    <listitem
>     <para
>      Fix timeline handling bugs in <application
>pg_receivexlog</application>
      (Heikki Linnakangas, Andrew Gierth)
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent <command
>CREATE FUNCTION</command> from checking <command
>SET</command>
      variables unless function body checking is enabled (Tom Lane)
     </para>
    </listitem>

    <listitem
>     <para
>      Remove rare inaccurate warning during vacuum of index-less tables
      (Heikki Linnakangas)
     </para>
    </listitem>

   </itemizedlist>

  </sect2>
 </sect1><sect1
id="release-9-3"
>  <title
>Release 9.3</title>

  <note
>   <title
>Release Date</title>
   <simpara
>2013-09-09</simpara>
  </note>

  <sect2
>   <title
>Overview</title>

   <para
>    Major enhancements in <productname
>PostgreSQL</productname> 9.3 include:
   </para>

   

   <itemizedlist
>
    <listitem
>     <para
>      Add <link
linkend="SQL-CREATEMATERIALIZEDVIEW"
>materialized
      views</link>
     </para>
    </listitem>

    <listitem
>     <para
>      Make simple views <link
linkend="SQL-CREATEVIEW-updatable-views"
>auto-updatable</link>
     </para>
    </listitem>

    <listitem
>     <para
>      Add many features for the <type
>JSON</type> data type,
      including <link
linkend="functions-json"
>operators and functions</link>
      to extract elements from <type
>JSON</type> values
     </para>
    </listitem>

    <listitem
>     <para
>      Implement <acronym
>SQL</acronym>-standard <link
linkend="queries-lateral"
><literal
>LATERAL</literal></link> option for
      <literal
>FROM</literal>-clause subqueries and function calls
     </para>
    </listitem>

    <listitem
>     <para
>      Allow <link
linkend="SQL-CREATEFOREIGNDATAWRAPPER"
>foreign data
      wrappers</link> to support writes (inserts/updates/deletes) on foreign
      tables
     </para>
    </listitem>

    <listitem
>     <para
>      Add a <link
linkend="postgres-fdw"
><productname
>Postgres</productname> foreign
      data wrapper</link> to allow access to
      other <productname
>Postgres</productname> servers
     </para>
    </listitem>

    <listitem
>     <para
>      Add support for <link
linkend="event-triggers"
>event triggers</link>
     </para>
    </listitem>

    <listitem
>     <para
>      Add optional ability to <link
linkend="app-initdb-data-checksums"
>checksum</link> data pages and
      report corruption
     </para>
    </listitem>

    <listitem
>     <para
>      Prevent non-key-field row updates from blocking foreign key checks
     </para>
    </listitem>

    <listitem
>     <para
>      Greatly reduce System V <link
linkend="sysvipc"
>shared
      memory</link> requirements
     </para>
    </listitem>

   </itemizedlist>

   <para
>    The above items are explained in more detail in the sections below.
   </para>

  </sect2>

  <sect2
>
  <title
>Migration to Version 9.3</title>

   <para
>    A dump/restore using <link
linkend="APP-PG-DUMPALL"
><application
>pg_dumpall</application></link>, or use
    of <link
linkend="pgupgrade"
><application
>pg_upgrade</application></link>, is
    required for those wishing to migrate data from any previous release.
   </para>

   <para
>    Version 9.3 contains a number of changes that may affect compatibility
    with previous releases.  Observe the following incompatibilities:
   </para>

   <sect3
>    <title
>Server Settings</title>

     <itemizedlist
>
      <listitem
>       <para
>        Rename <varname
>replication_timeout</varname> to <link
linkend="guc-wal-sender-timeout"
><varname
>wal_sender_timeout</varname></link>
        (Amit Kapila)
       </para>

       <para
>        This setting controls the <link
linkend="wal"
><acronym
>WAL</acronym></link> sender timeout.
       </para>
      </listitem>

      <listitem
>       <para
>        Require superuser privileges to set <link
linkend="guc-commit-delay"
><varname
>commit_delay</varname></link>
        because it can now potentially delay other sessions (Simon Riggs)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow in-memory sorts to use their full memory allocation (Jeff Janes)
       </para>

       <para
>        Users who have set <link
linkend="guc-work-mem"
><varname
>work_mem</varname></link> based on the
        previous behavior may need to revisit that setting.
       </para>
      </listitem>

     </itemizedlist>

   </sect3>

   <sect3
>    <title
>Other</title>

     <itemizedlist
>
      <listitem
>       <para
>        Throw an error if a tuple to be updated or deleted has already been
        updated or deleted by a <literal
>BEFORE</literal> trigger (Kevin Grittner)
       </para>

       <para
>        Formerly, the originally-intended update was silently skipped,
        resulting in logical inconsistency since the trigger might have
        propagated data to other places based on the intended update.
        Now an error is thrown to prevent the inconsistent results from being
        committed.  If this change affects your application, the best solution
        is usually to move the data-propagation actions to
        an <literal
>AFTER</literal> trigger.
       </para>

       <para
>        This error will also be thrown if a query invokes a volatile function
        that modifies rows that are later modified by the query itself.
        Such cases likewise previously resulted in silently skipping updates.
       </para>
      </listitem>

      <listitem
>       <para
>        Change multicolumn <link
linkend="SQL-CREATETABLE"
><literal
>ON UPDATE
        SET NULL/SET DEFAULT</literal></link> foreign key actions to affect
        all columns of the constraint, not just those changed in the
        <command
>UPDATE</command> (Tom Lane)
       </para>

       <para
>        Previously, we would set only those referencing columns that
        correspond to referenced columns that were changed by
        the <command
>UPDATE</command>.  This was what was required by SQL-92,
        but more recent editions of the SQL standard specify the new behavior.
       </para>
      </listitem>

      <listitem
>       <para
>        Force cached plans to be replanned if the <link
linkend="guc-search-path"
><varname
>search_path</varname></link> changes
        (Tom Lane)
       </para>

       <para
>        Previously, cached plans already generated in the current session were
        not redone if the query was re-executed with a
        new <varname
>search_path</varname> setting, resulting in surprising behavior.
       </para>
      </listitem>

      <listitem
>       <para
>        Fix <link
linkend="functions-formatting-table"
><function
>to_number()</function></link>
        to properly handle a period used as a thousands separator (Tom Lane)
       </para>

       <para
>        Previously, a period was considered to be a decimal point even when
        the locale says it isn't and the <literal
>D</literal> format code is used to
        specify use of the locale-specific decimal point.  This resulted in
        wrong answers if <literal
>FM</literal> format was also used.
       </para>
      </listitem>

      <listitem
>       <para
>        Fix <literal
>STRICT</literal> non-set-returning functions that have
        set-returning functions in their arguments to properly return null
        rows (Tom Lane)
       </para>

       <para
>        A null value passed to the strict function should result in a null
        output, but instead, that output row was suppressed entirely.
       </para>
      </listitem>

      <listitem
>       <para
>        Store <link
linkend="wal"
><acronym
>WAL</acronym></link> in a continuous
        stream, rather than skipping the last 16MB segment every 4GB
        (Heikki Linnakangas)
       </para>

       <para
>        Previously, <acronym
>WAL</acronym> files with names ending in <literal
>FF</literal>
        were not used because of this skipping.  If you have <acronym
>WAL</acronym>
        backup or restore scripts that took this behavior into account, they
        will need to be adjusted.
       </para>
      </listitem>

      <listitem
>       <para
>        In <link
linkend="catalog-pg-constraint"
><structname
>pg_constraint.confmatchtype</structname></link>,
        store the default foreign key match type (non-<literal
>FULL</literal>,
        non-<literal
>PARTIAL</literal>) as <literal
>s</literal> for <quote
>simple</quote>
        (Tom Lane)
       </para>

       <para
>        Previously this case was represented by <literal
>u</literal>
        for <quote
>unspecified</quote>.
       </para>
      </listitem>

     </itemizedlist>

   </sect3>

  </sect2>

  <sect2
>   <title
>Changes</title>

   <para
>    Below you will find a detailed account of the changes between
    <productname
>PostgreSQL</productname> 9.3 and the previous major
    release.
   </para>

   <sect3
>    <title
>Server</title>

    <sect4
>     <title
>Locking</title>

     <itemizedlist
>
      <listitem
>       <para
>        Prevent non-key-field row updates from blocking foreign key checks
        (lvaro Herrera, Noah Misch, Andres Freund, Alexander
        Shulgin, Marti Raudsepp, Alexander Shulgin)
       </para>

       <para
>        This change improves concurrency and reduces the probability of
        deadlocks when updating tables involved in a foreign-key constraint.
        <command
>UPDATE</command>s that do not change any columns referenced in a
        foreign key now take the new <literal
>NO KEY UPDATE</literal> lock mode on
        the row, while foreign key checks use the new <literal
>KEY SHARE</literal>
        lock mode, which does not conflict with <literal
>NO KEY UPDATE</literal>.
        So there is no blocking unless a foreign-key column is changed.
       </para>
      </listitem>

      <listitem
>       <para
>        Add configuration variable <link
linkend="guc-lock-timeout"
><varname
>lock_timeout</varname></link> to
        allow limiting how long a session will wait to acquire any one lock
        (Zoltn Bszrmnyi)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
>Indexes</title>

     <itemizedlist
>
      <listitem
>       <para
>        Add <link
linkend="rangetypes-indexing"
><acronym
>SP-GiST</acronym></link>
        support for range data types (Alexander Korotkov)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <link
linkend="GiST"
><acronym
>GiST</acronym></link> indexes to be
        unlogged (Jeevan Chalke)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve performance of <acronym
>GiST</acronym> index insertion by randomizing
        the choice of which page to descend to when there are multiple equally
        good alternatives (Heikki Linnakangas)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve concurrency of hash index operations (Robert Haas)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
>Optimizer</title>

     <itemizedlist
>
      <listitem
>       <para
>        Collect and use histograms of upper and lower bounds, as well as range
        lengths, for <link
linkend="rangetypes"
>range types</link>
        (Alexander Korotkov)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve optimizer's cost estimation for index access (Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve optimizer's hash table size estimate for
        doing <literal
>DISTINCT</literal> via hash aggregation (Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Suppress no-op Result and Limit plan nodes
        (Kyotaro Horiguchi, Amit Kapila, Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Reduce optimizer overhead by not keeping plans on the basis of cheap
        startup cost when the optimizer only cares about total cost overall
        (Tom Lane)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
>General Performance</title>

     <itemizedlist
>
      <listitem
>       <para
>        Add <link
linkend="SQL-COPY"
><command
>COPY FREEZE</command></link>
        option to avoid the overhead of marking tuples as frozen later
        (Simon Riggs, Jeff Davis)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve performance of <link
linkend="datatype-numeric"
><type
>NUMERIC</type></link> calculations
        (Kyotaro Horiguchi)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve synchronization of sessions waiting for <link
linkend="guc-commit-delay"
><varname
>commit_delay</varname></link>
        (Peter Geoghegan)
       </para>

       <para
>        This greatly improves the usefulness of <varname
>commit_delay</varname>.
       </para>
      </listitem>

      <listitem
>       <para
>        Improve performance of the <link
linkend="SQL-CREATETABLE"
><command
>CREATE TEMPORARY TABLE ... ON
        COMMIT DELETE ROWS</command></link> option by not truncating such temporary
        tables in transactions that haven't touched any temporary tables
        (Heikki Linnakangas)
       </para>
      </listitem>

      <listitem
>       <para
>        Make vacuum recheck visibility after it has removed expired tuples
        (Pavan Deolasee)
       </para>

       <para
>        This increases the chance of a page being marked as all-visible.
       </para>
      </listitem>

      <listitem
>       <para
>        Add per-resource-owner lock caches (Jeff Janes)
       </para>

       <para
>        This speeds up lock bookkeeping at statement completion in
        multi-statement transactions that hold many locks; it is particularly
        useful for <application
>pg_dump</application>.
       </para>
      </listitem>

      <listitem
>       <para
>        Avoid scanning the entire relation cache at commit of a transaction
        that creates a new relation (Jeff Janes)
       </para>

       <para
>        This speeds up sessions that create many tables in successive
        small transactions, such as a <application
>pg_restore</application> run.
       </para>
      </listitem>

      <listitem
>       <para
>        Improve performance of transactions that drop many relations
        (Tomas Vondra)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
>Monitoring</title>

     <itemizedlist
>
      <listitem
>       <para
>        Add optional ability to <link
linkend="app-initdb-data-checksums"
>checksum</link> data pages and
        report corruption (Simon Riggs, Jeff Davis, Greg Smith, Ants Aasma)
       </para>

       <para
>        The checksum option can be set during <link
linkend="APP-INITDB"
>initdb</link>.
       </para>
      </listitem>

      <listitem
>       <para
>        Split the <link
linkend="monitoring-stats"
>statistics collector's</link>
        data file into separate global and per-database files (Tomas Vondra)
       </para>

       <para
>        This reduces the I/O required for statistics tracking.
       </para>
      </listitem>

      <listitem
>       <para
>        Fix the statistics collector to operate properly in cases where the
        system clock goes backwards (Tom Lane)
       </para>

       <para
>        Previously, statistics collection would stop until the time again
        reached the latest time previously recorded.
       </para>
      </listitem>

      <listitem
>       <para
>        Emit an informative message to postmaster standard error when we
        are about to stop logging there
        (Tom Lane)
       </para>

       <para
>        This should help reduce user confusion about where to look for log
        output in common configurations that log to standard error only during
        postmaster startup.
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
>Authentication</title>

     <itemizedlist
>
      <listitem
>       <para
>        When an authentication failure occurs, log the relevant
        <link
linkend="auth-pg-hba-conf"
><filename
>pg_hba.conf</filename></link>
        line, to ease debugging of unintended failures
        (Magnus Hagander)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve <link
linkend="auth-ldap"
><acronym
>LDAP</acronym></link> error
        reporting and documentation (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Add support for specifying <acronym
>LDAP</acronym> authentication parameters
        in <acronym
>URL</acronym> format, per RFC 4516 (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Change the <link
linkend="guc-ssl-ciphers"
><varname
>ssl_ciphers</varname></link> parameter
        to start with <literal
>DEFAULT</literal>, rather than <literal
>ALL</literal>,
        then remove insecure ciphers (Magnus Hagander)
       </para>

       <para
>        This should yield a more appropriate SSL cipher set.
       </para>
      </listitem>

      <listitem
>       <para
>        Parse and load <link
linkend="auth-username-maps"
><filename
>pg_ident.conf</filename></link>
        once, not during each connection (Amit Kapila)
       </para>

       <para
>        This is similar to how <filename
>pg_hba.conf</filename> is processed.
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
>Server Settings</title>

     <itemizedlist
>
      <listitem
>       <para
>        Greatly reduce System V <link
linkend="sysvipc"
>shared
        memory</link> requirements (Robert Haas)
       </para>

       <para
>        On Unix-like systems, <function
>mmap()</function> is now used for most
        of <productname
>PostgreSQL</productname>'s shared memory.  For most users, this
        will eliminate any need to adjust kernel parameters for shared memory.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow the postmaster to listen on multiple Unix-domain sockets
        (Honza Hork)
       </para>

       <para
>        The configuration parameter
        <varname
>unix_socket_directory</varname> is replaced by <link
linkend="guc-unix-socket-directories"
><varname
>unix_socket_directories</varname></link>,
        which accepts a list of directories.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow a directory of configuration files to be processed (Magnus
        Hagander, Greg Smith, Selena Deckelmann)
       </para>

       <para
>        Such a directory is specified with <link
linkend="config-includes"
><varname
>include_dir</varname></link> in the server
        configuration file.
       </para>
      </listitem>

      <listitem
>       <para
>        Increase the maximum <link
linkend="APP-INITDB"
>initdb</link>-configured value for <link
linkend="guc-shared-buffers"
><varname
>shared_buffers</varname></link>
        to 128MB (Robert Haas)
       </para>

       <para
>        This is the maximum value that initdb will attempt to set in <link
linkend="config-setting-configuration-file"
><filename
>postgresql.conf</filename></link>;
        the previous maximum was 32MB.
       </para>
      </listitem>

      <listitem
>       <para
>        Remove the <link
linkend="guc-external-pid-file"
>external
        <acronym
>PID</acronym> file</link>, if any, on postmaster exit
        (Peter Eisentraut)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

   </sect3>

   <sect3
>    <title
>Replication and Recovery</title>

     <itemizedlist
>
      <listitem
>       <para
>        Allow a streaming replication standby to <link
linkend="protocol-replication"
>follow a timeline switch</link>
        (Heikki Linnakangas)
       </para>

       <para
>        This allows streaming standby servers to receive WAL data from a slave
        newly promoted to master status.  Previously, other standbys would
        require a resync to begin following the new master.
       </para>
      </listitem>

      <listitem
>       <para
>        Add <acronym
>SQL</acronym> functions <link
linkend="functions-admin-backup"
><function
>pg_is_in_backup()</function></link>
        and <link
linkend="functions-admin-backup"
><function
>pg_backup_start_time()</function></link>
        (Gilles Darold)
       </para>

       <para
>        These functions report the status of base backups.
       </para>
      </listitem>

      <listitem
>       <para
>        Improve performance of streaming log shipping with <link
linkend="guc-synchronous-commit"
><varname
>synchronous_commit</varname></link>
        disabled (Andres Freund)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow much faster promotion of a streaming standby to primary (Simon
        Riggs, Kyotaro Horiguchi)
       </para>
      </listitem>

      <listitem
>       <para
>        Add the last checkpoint's redo location to <link
linkend="APP-PGCONTROLDATA"
><application
>pg_controldata</application></link>'s
        output (Fujii Masao)
       </para>

       <para
>        This information is useful for determining which <acronym
>WAL</acronym>
        files are needed for restore.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow tools like <link
linkend="app-pgreceivexlog"
><application
>pg_receivexlog</application></link>
        to run on computers with different architectures (Heikki
        Linnakangas)
       </para>

       <para
>        WAL files can still only be replayed on servers with the same
        architecture as the primary; but they can now be transmitted to and
        stored on machines of any architecture, since the
        streaming replication protocol is now machine-independent.
       </para>
      </listitem>

      <listitem
>       <para
>        Make <link
linkend="app-pgbasebackup"
><application
>pg_basebackup</application></link>
        <option
>--write-recovery-conf</option> output a
        minimal <filename
>recovery.conf</filename> file (Zoltn
        Bszrmnyi, Magnus Hagander)
       </para>

       <para
>        This simplifies setting up a standby server.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <link
linkend="app-pgreceivexlog"
><application
>pg_receivexlog</application></link>
        and <link
linkend="app-pgbasebackup"
><application
>pg_basebackup</application></link>
        <option
>--xlog-method</option> to handle streaming timeline switches
        (Heikki Linnakangas)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <link
linkend="guc-wal-receiver-timeout"
><varname
>wal_receiver_timeout</varname></link>
        parameter to control the <acronym
>WAL</acronym> receiver's timeout
        (Amit Kapila)
       </para>

       <para
>        This allows more rapid detection of connection failure.
       </para>
      </listitem>

      <listitem
>       <para
>        Change the <link
linkend="wal"
><acronym
>WAL</acronym></link> record format to
        allow splitting the record header across pages (Heikki Linnakangas)
       </para>

       <para
>        The new format is slightly more compact, and is more efficient to
        write.
       </para>
      </listitem>

     </itemizedlist>

   </sect3>

   <sect3
>    <title
>Queries</title>

     <itemizedlist
>
      <listitem
>       <para
>        Implement <acronym
>SQL</acronym>-standard <link
linkend="queries-lateral"
><literal
>LATERAL</literal></link> option for
        <literal
>FROM</literal>-clause subqueries and function calls (Tom Lane)
       </para>

       <para
>        This feature allows subqueries and functions in <literal
>FROM</literal> to
        reference columns from other tables in the <literal
>FROM</literal>
        clause. The <literal
>LATERAL</literal> keyword is optional for functions.
       </para>
      </listitem>

      <listitem
>       <para
>        Add support for piping <link
linkend="SQL-COPY"
><command
>COPY</command></link> and <link
linkend="APP-PSQL"
><application
>psql</application></link> <command
>\copy</command>
        data to/from an external program (Etsuro Fujita)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow a multirow <link
linkend="SQL-VALUES"
><literal
>VALUES</literal></link> clause in a rule
        to reference <literal
>OLD</literal>/<literal
>NEW</literal> (Tom Lane)
       </para>
      </listitem>

     </itemizedlist>

   </sect3>

   <sect3
>    <title
>Object Manipulation</title>

     <itemizedlist
>
      <listitem
>       <para
>        Add support for <link
linkend="event-triggers"
>event triggers</link>
        (Dimitri Fontaine, Robert Haas, lvaro Herrera)
       </para>

       <para
>        This allows server-side functions written in event-enabled
        languages to be called when DDL commands are run.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <link
linkend="SQL-CREATEFOREIGNDATAWRAPPER"
>foreign data
        wrappers</link> to support writes (inserts/updates/deletes) on foreign
        tables (KaiGai Kohei)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <link
linkend="SQL-CREATESCHEMA"
><command
>CREATE SCHEMA ... IF
        NOT EXISTS</command></link> clause (Fabrzio de Royes Mello)
       </para>
      </listitem>

      <listitem
>       <para
>        Make <link
linkend="SQL-REASSIGN-OWNED"
><command
>REASSIGN
        OWNED</command></link> also change ownership of shared objects
        (lvaro Herrera)
       </para>
      </listitem>

      <listitem
>       <para
>        Make <link
linkend="sql-createaggregate"
><command
>CREATE
        AGGREGATE</command></link> complain if the given initial value string is not
        valid input for the transition datatype (Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Suppress <link
linkend="SQL-CREATETABLE"
><command
>CREATE
        TABLE</command></link>'s messages about implicit index and sequence creation
        (Robert Haas)
       </para>

       <para
>        These messages now appear at <literal
>DEBUG1</literal> verbosity, so that
        they will not be shown by default.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <link
linkend="SQL-DROPTABLE"
><command
>DROP TABLE IF
        EXISTS</command></link> to succeed when a non-existent schema is specified
        in the table name (Bruce Momjian)
       </para>

       <para
>         Previously, it threw an error if the schema did not exist.
       </para>
      </listitem>

      <listitem
>       <para
>        Provide clients with <link
linkend="libpq-pqresulterrorfield"
>constraint violation details</link>
        as separate fields (Pavel Stehule)
       </para>

       <para
>        This allows clients to retrieve table, column, data type, or
        constraint name error details.  Previously such information had to be
        extracted from error strings.  Client library support is required to
        access these fields.
       </para>
      </listitem>

     </itemizedlist>

    <sect4
>     <title
><command
>ALTER</command></title>

     <itemizedlist
>
      <listitem
>       <para
>        Support <literal
>IF NOT EXISTS</literal> option in <link
linkend="SQL-ALTERTYPE"
><command
>ALTER TYPE ... ADD VALUE</command></link>
        (Andrew Dunstan)
       </para>

       <para
>        This is useful for conditionally adding values to enumerated types.
       </para>
      </listitem>

      <listitem
>       <para
>        Add <link
linkend="SQL-ALTERROLE"
><command
>ALTER ROLE ALL
        SET</command></link> to establish settings for all users (Peter Eisentraut)
       </para>

       <para
>        This allows settings to apply to all users in all databases. <link
linkend="SQL-ALTERDATABASE"
><command
>ALTER DATABASE SET</command></link>
        already allowed addition of settings for all users in a single
        database.  <filename
>postgresql.conf</filename> has a similar effect.
       </para>
      </listitem>

      <listitem
>       <para
>        Add support for <link
linkend="SQL-ALTERRULE"
><command
>ALTER RULE
        ... RENAME</command></link> (Ali Dar)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
><link
linkend="rules-views"
><command
>VIEWs</command></link></title>

     <itemizedlist
>
      <listitem
>       <para
>        Add <link
linkend="SQL-CREATEMATERIALIZEDVIEW"
>materialized
        views</link> (Kevin Grittner)
       </para>

       <para
>        Unlike ordinary views, where the base tables are read on every access,
        materialized views create physical tables at creation or refresh time.
        Access to the materialized view then reads from its physical
        table. There is not yet any facility for incrementally refreshing
        materialized views or auto-accessing them via base table access.
       </para>
      </listitem>

      <listitem
>       <para
>        Make simple views <link
linkend="SQL-CREATEVIEW-updatable-views"
>auto-updatable</link>
        (Dean Rasheed)
       </para>

       <para
>        Simple views that reference some or all columns from a
        single base table are now updatable by default. More
        complex views can be made updatable using <link
linkend="SQL-CREATETRIGGER"
><literal
>INSTEAD OF</literal></link> triggers
        or <link
linkend="SQL-CREATERULE"
><literal
>INSTEAD</literal></link> rules.
       </para>
      </listitem>

      <listitem
>       <para
>        Add <link
linkend="SQL-CREATEVIEW"
><command
>CREATE RECURSIVE
        VIEW</command></link> syntax (Peter Eisentraut)
       </para>

       <para
>        Internally this is translated into <command
>CREATE VIEW ... WITH
        RECURSIVE ...</command>.
       </para>
      </listitem>

      <listitem
>       <para
>        Improve view/rule printing code to handle cases where referenced
        tables are renamed, or columns are renamed, added, or dropped
        (Tom Lane)
       </para>

       <para
>        Table and column renamings can produce cases where, if we merely
        substitute the new name into the original text of a rule or view, the
        result is ambiguous.  This change fixes the rule-dumping code to insert
        manufactured table and column aliases when needed to preserve the
        original semantics.
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

   </sect3>

   <sect3
>    <title
>Data Types</title>

    <itemizedlist
>
      <listitem
>       <para
>        Increase the maximum size of <link
linkend="largeObjects"
>large
        objects</link> from 2GB to 4TB (Nozomi Anzai, Yugo Nagata)
       </para>

       <para
>        This change includes adding 64-bit-capable large object access
        functions, both in the server and in libpq.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow text <link
linkend="datatype-timezones"
>timezone
        designations</link>, e.g. <quote
>America/Chicago</quote>, in the
        <quote
>T</quote> field of <acronym
>ISO</acronym>-format <type
>timestamptz</type>
        input (Bruce Momjian)
       </para>
      </listitem>

    </itemizedlist>

   <sect4
>    <title
><link
linkend="datatype-json"
><type
>JSON</type></link></title>

    <itemizedlist
>
      <listitem
>       <para
>        Add <link
linkend="functions-json"
>operators and functions</link>
        to extract elements from <type
>JSON</type> values (Andrew Dunstan)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <type
>JSON</type> values to be <link
linkend="functions-json"
>converted into records</link>
        (Andrew Dunstan)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <link
linkend="functions-json"
>functions</link> to convert
        scalars, records, and <type
>hstore</type> values to <type
>JSON</type> (Andrew
        Dunstan)
       </para>
      </listitem>

    </itemizedlist>

   </sect4>

   </sect3>


   <sect3
>    <title
>Functions</title>

     <itemizedlist
>
      <listitem
>       <para
>        Add <link
linkend="array-functions-table"
><function
>array_remove()</function></link>
        and <link
linkend="array-functions-table"
><function
>array_replace()</function></link>
        functions (Marco Nenciarini, Gabriele Bartolini)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <link
linkend="functions-string-other"
><function
>concat()</function></link>
        and <link
linkend="functions-string-format"
><function
>format()</function></link>
        to properly expand <literal
>VARIADIC</literal>-labeled arguments
        (Pavel Stehule)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve <link
linkend="functions-string-format"
><function
>format()</function></link>
        to provide field width and left/right alignment options (Pavel Stehule)
       </para>
      </listitem>

      <listitem
>       <para
>        Make <link
linkend="functions-formatting-table"
><function
>to_char()</function></link>,
        <link
linkend="functions-formatting-table"
><function
>to_date()</function></link>,
        and <link
linkend="functions-formatting-table"
><function
>to_timestamp()</function></link>
        handle negative (BC) century values properly
        (Bruce Momjian)
       </para>

       <para
>        Previously the behavior was either wrong or inconsistent
        with positive/<acronym
>AD</acronym> handling, e.g. with the format mask
        <quote
>IYYY-IW-DY</quote>.
       </para>
      </listitem>

      <listitem
>       <para
>        Make <link
linkend="functions-formatting-table"
><function
>to_date()</function></link>
        and <link
linkend="functions-formatting-table"
><function
>to_timestamp()</function></link>
        return proper results when mixing <acronym
>ISO</acronym> and Gregorian
        week/day designations (Bruce Momjian)
       </para>
      </listitem>

      <listitem
>       <para
>        Cause <link
linkend="functions-info-catalog-table"
><function
>pg_get_viewdef()</function></link>
        to start a new line by default after each <literal
>SELECT</literal> target
        list entry and <literal
>FROM</literal> entry (Marko Tiikkaja)
       </para>

       <para
>        This reduces line length in view printing, for instance in <link
linkend="APP-PGDUMP"
><application
>pg_dump</application></link> output.
       </para>
      </listitem>

      <listitem
>       <para
>        Fix <function
>map_sql_value_to_xml_value()</function> to print values of
        domain types the same way their base type would be printed
        (Pavel Stehule)
       </para>

       <para
>        There are special formatting rules for certain built-in types such as
        <type
>boolean</type>; these rules now also apply to domains over these
        types.
       </para>
      </listitem>

     </itemizedlist>

   </sect3>

   <sect3
>    <title
>Server-Side Languages</title>

    <sect4
>     <title
><link
linkend="plpgsql"
>PL/pgSQL</link> Server-Side Language</title>

     <itemizedlist
>
      <listitem
>       <para
>        Allow PL/pgSQL to use <literal
>RETURN</literal> with a composite-type
        expression (Asif Rehman)
       </para>

       <para
>        Previously, in a function returning a composite type,
        <literal
>RETURN</literal> could only reference a variable of that type.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow PL/pgSQL to access <link
linkend="plpgsql-exception-diagnostics"
>constraint violation
        details</link> as separate fields (Pavel Stehule)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow PL/pgSQL to access the number of rows processed by
        <link
linkend="SQL-COPY"
><command
>COPY</command></link> (Pavel Stehule)
       </para>

       <para
>        A <command
>COPY</command> executed in a PL/pgSQL function now updates the
        value retrieved by <link
linkend="plpgsql-statements-diagnostics"
><command
>GET DIAGNOSTICS
        x = ROW_COUNT</command></link>.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow unreserved keywords to be used as identifiers everywhere in
        PL/pgSQL (Tom Lane)
       </para>

       <para
>        In certain places in the PL/pgSQL grammar, keywords had to be quoted
        to be used as identifiers, even if they were nominally unreserved.
       </para>
      </listitem>

    </itemizedlist>

    </sect4>

    <sect4
>     <title
><link
linkend="plpython"
>PL/Python</link> Server-Side Language</title>

     <itemizedlist
>
      <listitem
>       <para
>        Add PL/Python result object string handler (Peter Eisentraut)
       </para>

       <para
>        This allows <literal
>plpy.debug(rv)</literal> to output something reasonable.
       </para>
      </listitem>

      <listitem
>       <para
>        Make PL/Python convert OID values to a proper Python numeric type
        (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Handle <link
linkend="spi"
><acronym
>SPI</acronym></link> errors raised
        explicitly (with PL/Python's <literal
>RAISE</literal>) the same as
        internal <acronym
>SPI</acronym> errors (Oskari Saarenmaa and Jan Urbanski)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

   </sect3>

   <sect3
>    <title
>Server Programming Interface (<link
linkend="spi"
>SPI</link>)</title>

     <itemizedlist
>
      <listitem
>       <para
>        Prevent leakage of <acronym
>SPI</acronym> tuple tables during subtransaction
        abort (Tom Lane)
       </para>

       <para
>        At the end of any failed subtransaction, the core SPI code now
        releases any SPI tuple tables that were created during that
        subtransaction.  This avoids the need for SPI-using code to keep track
        of such tuple tables and release them manually in error-recovery code.
        Failure to do so caused a number of transaction-lifespan memory leakage
        issues in PL/pgSQL and perhaps other SPI clients.  <link
linkend="spi-spi-freetupletable"
><function
>SPI_freetuptable()</function></link>
        now protects itself against multiple freeing requests, so any existing
        code that did take care to clean up shouldn't be broken by this change.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <acronym
>SPI</acronym> functions to access the number of rows processed
        by <link
linkend="SQL-COPY"
><command
>COPY</command></link> (Pavel Stehule)
       </para>
      </listitem>

     </itemizedlist>

   </sect3>

   <sect3
>    <title
>Client Applications</title>

    <itemizedlist
>
      <listitem
>       <para
>        Add command-line utility <link
linkend="app-pg-isready"
><application
>pg_isready</application></link> to
        check if the server is ready to accept connections (Phil Sorber)
       </para>
      </listitem>

      <listitem
>       <para
>        Support multiple <option
>--table</option> arguments for <link
linkend="APP-PGRESTORE"
><application
>pg_restore</application></link>,
        <link
linkend="APP-CLUSTERDB"
><application
>clusterdb</application></link>,
        <link
linkend="APP-REINDEXDB"
><application
>reindexdb</application></link>,
        and <link
linkend="APP-VACUUMDB"
><application
>vacuumdb</application></link>
        (Josh Kupershmidt)
       </para>

       <para
>        This is similar to the way <link
linkend="APP-PGDUMP"
><application
>pg_dump</application></link>'s
        <option
>--table</option> option works.
       </para>
      </listitem>

      <listitem
>       <para
>        Add <option
>--dbname</option> option to <link
linkend="APP-PG-DUMPALL"
><application
>pg_dumpall</application></link>, <link
linkend="app-pgbasebackup"
><application
>pg_basebackup</application></link>, and
        <link
linkend="app-pgreceivexlog"
><application
>pg_receivexlog</application></link>
        to allow specifying a connection string (Amit Kapila)
       </para>
      </listitem>

      <listitem
>       <para
>        Add libpq function <link
linkend="libpq-pqconninfo"
><function
>PQconninfo()</function></link>
        to return connection information (Zoltn
        Bszrmnyi, Magnus Hagander)
       </para>
      </listitem>

    </itemizedlist>

    <sect4
>     <title
><link
linkend="APP-PSQL"
><application
>psql</application></link></title>

     <itemizedlist
>
      <listitem
>       <para
>        Adjust function cost settings so <application
>psql</application> tab
        completion and pattern searching are more efficient (Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve <application
>psql</application>'s tab completion coverage (Jeff Janes,
        Dean Rasheed, Peter Eisentraut, Magnus Hagander)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow the <application
>psql</application> <option
>--single-transaction</option>
        mode to work when reading from standard input (Fabien Coelho,
        Robert Haas)
       </para>

       <para
>        Previously this option only worked when reading from a file.
       </para>
      </listitem>

      <listitem
>       <para
>        Remove <application
>psql</application> warning when connecting to an older
        server (Peter Eisentraut)
       </para>

       <para
>        A warning is still issued when connecting to a server of a newer major
        version than <application
>psql</application>'s.
       </para>
      </listitem>

     </itemizedlist>

    <sect5
>     <title
><link
linkend="APP-PSQL-meta-commands"
>Backslash Commands</link></title>

     <itemizedlist
>
      <listitem
>       <para
>        Add <application
>psql</application> command <command
>\watch</command> to repeatedly
        execute a SQL command (Will Leinweber)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <application
>psql</application> command <command
>\gset</command> to store query
        results in <application
>psql</application> variables (Pavel Stehule)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <acronym
>SSL</acronym> information to <application
>psql</application>'s
        <command
>\conninfo</command> command (Alastair Turner)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <quote
>Security</quote> column to <application
>psql</application>'s
        <command
>\df+</command> output (Jon Erdman)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <application
>psql</application> command <command
>\l</command> to accept a database
        name pattern (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        In <application
>psql</application>, do not allow <command
>\connect</command> to
        use defaults if there is no active connection (Bruce Momjian)
       </para>

       <para
>        This might be the case if the server had crashed.
       </para>
      </listitem>

      <listitem
>       <para
>        Properly reset state after failure of a SQL command executed with
        <application
>psql</application>'s <literal
>\g</literal> <replaceable
>file</replaceable>
        (Tom Lane)
       </para>

       <para
>        Previously, the output from subsequent SQL commands would unexpectedly
        continue to go to the same file.
       </para>
      </listitem>

     </itemizedlist>

    </sect5>

    <sect5
>     <title
>Output</title>

     <itemizedlist
>
      <listitem
>       <para
>        Add a <literal
>latex-longtable</literal> output format to
        <application
>psql</application> (Bruce Momjian)
       </para>

       <para
>        This format allows tables to span multiple pages.
       </para>
      </listitem>

      <listitem
>       <para
>        Add a <literal
>border=3</literal> output mode to the <application
>psql</application>
        <literal
>latex</literal> format (Bruce Momjian)
       </para>
      </listitem>

      <listitem
>       <para
>        In <application
>psql</application>'s tuples-only and expanded output modes, no
        longer emit <quote
>(No rows)</quote> for zero rows (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        In <application
>psql</application>'s unaligned, expanded output mode, no longer
        print an empty line for zero rows (Peter Eisentraut)
       </para>
      </listitem>

     </itemizedlist>

    </sect5>

    </sect4>

    <sect4
>     <title
><link
linkend="APP-PGDUMP"
><application
>pg_dump</application></link></title>

     <itemizedlist
>
      <listitem
>       <para
>        Add <application
>pg_dump</application> <option
>--jobs</option> option to dump tables in
        parallel (Joachim Wieland)
       </para>
      </listitem>

      <listitem
>       <para
>        Make <application
>pg_dump</application> output functions in a more predictable
        order (Joel Jacobson)
       </para>
      </listitem>

      <listitem
>       <para
>        Fix tar files emitted by <application
>pg_dump</application>
        to be <acronym
>POSIX</acronym> conformant (Brian Weaver, Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <option
>--dbname</option> option to <application
>pg_dump</application>, for
        consistency with other client commands (Heikki Linnakangas)
       </para>

       <para
>        The database name could already be supplied last without a flag.
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
><link
linkend="APP-INITDB"
><application
>initdb</application></link></title>

     <itemizedlist
>
      <listitem
>       <para
>        Make initdb fsync the newly created data directory (Jeff Davis)
       </para>

       <para
>        This insures data integrity in event of a system crash shortly after
        initdb.  This can be disabled by using <option
>--nosync</option>.
       </para>
      </listitem>

      <listitem
>       <para
>        Add initdb <option
>--sync-only</option> option to sync the data directory to durable
        storage (Bruce Momjian)
       </para>

       <para
>        This is used by <link
linkend="pgupgrade"
><application
>pg_upgrade</application></link>.
       </para>
      </listitem>

      <listitem
>       <para
>        Make initdb issue a warning about placing the data directory at the
        top of a file system mount point (Bruce Momjian)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

   </sect3>

   <sect3
>    <title
>Source Code</title>

     <itemizedlist
>
      <listitem
>       <para
>        Add infrastructure to allow plug-in <link
linkend="bgworker"
>background worker processes</link>
        (lvaro Herrera)
       </para>
      </listitem>

      <listitem
>       <para
>        Create a centralized timeout <acronym
>API</acronym> (Zoltn
        Bszrmnyi)
       </para>
      </listitem>

      <listitem
>       <para
>        Create libpgcommon and move <function
>pg_malloc()</function> and other
        functions there (lvaro Herrera, Andres Freund)
       </para>

       <para
>        This allows libpgport to be used solely for portability-related code.
       </para>
      </listitem>

      <listitem
>       <para
>        Add support for list links embedded in larger structs (Andres Freund)
       </para>
      </listitem>

      <listitem
>       <para
>        Use <literal
>SA_RESTART</literal> for all signals,
        including <literal
>SIGALRM</literal> (Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Ensure that the correct text domain is used when
        translating <function
>errcontext()</function> messages
        (Heikki Linnakangas)
       </para>
      </listitem>

      <listitem
>       <para
>        Standardize naming of client-side memory allocation functions (Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Provide support for <quote
>static assertions</quote> that will fail at
        compile time if some compile-time-constant condition is not met
        (Andres Freund, Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Support <function
>Assert()</function> in client-side code (Andrew Dunstan)
       </para>
      </listitem>

      <listitem
>       <para
>        Add decoration to inform the C compiler that some <function
>ereport()</function>
        and <function
>elog()</function> calls do not return (Peter Eisentraut,
        Andres Freund, Tom Lane, Heikki Linnakangas)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow options to be passed to the regression
        test output comparison utility via <link
linkend="regress-evaluation"
><envar
>PG_REGRESS_DIFF_OPTS</envar></link>
        (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Add isolation tests for <link
linkend="SQL-CREATEINDEX"
><command
>CREATE INDEX
        CONCURRENTLY</command></link> (Abhijit Menon-Sen)
       </para>
      </listitem>

      <listitem
>       <para
>        Remove typedefs for <type
>int2</type>/<type
>int4</type> as they are better
        represented as <type
>int16</type>/<type
>int32</type> (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Fix <link
linkend="install"
>install-strip</link> on Mac <productname
>OS
        X</productname> (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Remove <link
linkend="configure"
>configure</link> flag
        <option
>--disable-shared</option>, as it is no longer supported
        (Bruce Momjian)
       </para>
      </listitem>

      <listitem
>       <para
>        Rewrite pgindent in <application
>Perl</application> (Andrew Dunstan)
       </para>
      </listitem>

      <listitem
>       <para
>        Provide Emacs macro to set Perl formatting to
        match <productname
>PostgreSQL</productname>'s perltidy settings (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Run tool to check the keyword list whenever the backend grammar is
        changed (Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Change the way <literal
>UESCAPE</literal> is lexed, to significantly reduce
        the size of the lexer tables (Heikki Linnakangas)
       </para>
      </listitem>

      <listitem
>       <para
>        Centralize <application
>flex</application> and <application
>bison</application>
        <application
>make</application> rules (Peter Eisentraut)
       </para>

       <para
>        This is useful for <application
>pgxs</application> authors.
       </para>
      </listitem>

      <listitem
>       <para
>        Change many internal backend functions to return object <type
>OID</type>s
        rather than void (Dimitri Fontaine)
       </para>

       <para
>        This is useful for event triggers.
       </para>
      </listitem>

      <listitem
>       <para
>        Invent pre-commit/pre-prepare/pre-subcommit events for transaction
        callbacks (Tom Lane)
       </para>

       <para
>        Loadable modules that use transaction callbacks might need modification
        to handle these new event types.
       </para>
      </listitem>

      <listitem
>       <para
>        Add function <link
linkend="functions-info-catalog-table"
><function
>pg_identify_object()</function></link>
        to produce a machine-readable description of a database object
        (lvaro Herrera)
       </para>
      </listitem>

      <listitem
>       <para
>        Add post-<command
>ALTER</command>-object server hooks (KaiGai Kohei)
       </para>
      </listitem>

      <listitem
>       <para
>        Implement a generic binary heap and use it for Merge-Append
        operations (Abhijit Menon-Sen)
       </para>
      </listitem>

      <listitem
>       <para
>        Provide a tool to help detect timezone abbreviation changes when
        updating the <filename
>src/timezone/data</filename> files
        (Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <application
>pkg-config</application> support for <application
>libpq</application>
        and <application
>ecpg</application> libraries (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Remove <filename
>src/tools/backend</filename>, now that the content is on
        the <productname
>PostgreSQL</productname> wiki (Bruce Momjian)
       </para>
      </listitem>

      <listitem
>       <para
>        Split out <link
linkend="wal"
><acronym
>WAL</acronym></link> reading as
        an independent facility (Heikki Linnakangas, Andres Freund)
       </para>
      </listitem>

      <listitem
>       <para
>        Use a 64-bit integer to represent <link
linkend="wal"
><acronym
>WAL</acronym></link> positions
        (<structname
>XLogRecPtr</structname>) instead of two 32-bit integers
        (Heikki Linnakangas)
       </para>

       <para
>        Generally, tools that need to read the <acronym
>WAL</acronym> format
        will need to be adjusted.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <link
linkend="plpython"
>PL/Python</link> to support
        platform-specific include directories (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <link
linkend="plpython"
>PL/Python</link> on <productname
>OS
        X</productname> to build against custom versions of <application
>Python</application>
        (Peter Eisentraut)
       </para>
      </listitem>

     </itemizedlist>

   </sect3>

   <sect3
>    <title
>Additional Modules</title>

    <itemizedlist
>
      <listitem
>       <para
>        Add a <link
linkend="postgres-fdw"
><productname
>Postgres</productname> foreign
        data wrapper</link> contrib module to allow access to
        other <productname
>Postgres</productname> servers (Shigeru Hanada)
       </para>

       <para
>        This foreign data wrapper supports writes.
       </para>
      </listitem>

      <listitem
>       <para
>        Add <link
linkend="pgxlogdump"
><application
>pg_xlogdump</application></link>
        contrib program (Andres Freund)
       </para>
      </listitem>

      <listitem
>       <para
>        Add support for indexing of regular-expression searches in
        <link
linkend="pgtrgm"
><productname
>pg_trgm</productname></link>
        (Alexander Korotkov)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve <link
linkend="pgtrgm"
><productname
>pg_trgm</productname></link>'s
        handling of multibyte characters (Tom Lane)
       </para>

       <para
>        On a platform that does not have the wcstombs() or towlower() library
        functions, this could result in an incompatible change in the contents
        of <productname
>pg_trgm</productname> indexes for non-ASCII data.  In such cases,
        <command
>REINDEX</command> those indexes to ensure correct search results.
       </para>
      </listitem>

      <listitem
>       <para
>        Add a <link
linkend="pgstattuple"
>pgstattuple</link> function to report
        the size of the pending-insertions list of a <acronym
>GIN</acronym> index
        (Fujii Masao)
       </para>
      </listitem>

      <listitem
>       <para
>        Make <link
linkend="oid2name"
><application
>oid2name</application></link>,
        <link
linkend="pgbench"
><application
>pgbench</application></link>, and
        <link
linkend="vacuumlo"
><application
>vacuumlo</application></link> set
        <varname
>fallback_application_name</varname> (Amit Kapila)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve output of <link
linkend="pgtesttiming"
><application
>pg_test_timing</application></link>
        (Bruce Momjian)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve output of <link
linkend="pgtestfsync"
><application
>pg_test_fsync</application></link>
        (Peter Geoghegan)
       </para>
      </listitem>

      <listitem
>       <para
>        Create a dedicated foreign data wrapper, with its own option validator
        function, for <link
linkend="dblink"
>dblink</link> (Shigeru Hanada)
       </para>

       <para
>        When using this FDW to define the target of a <application
>dblink</application>
        connection, instead of using a hard-wired list of connection options,
        the underlying <application
>libpq</application> library is consulted to see what
        connection options it supports.
       </para>
      </listitem>

    </itemizedlist>

    <sect4
>     <title
><link
linkend="pgupgrade"
><application
>pg_upgrade</application></link></title>

     <itemizedlist
>
      <listitem
>       <para
>        Allow <application
>pg_upgrade</application> to do dumps and restores in
        parallel (Bruce Momjian, Andrew Dunstan)
       </para>

       <para
>        This allows parallel schema dump/restore of databases, as well as
        parallel copy/link of data files per tablespace.  Use the
        <option
>--jobs</option> option to specify the level of parallelism.
       </para>
      </listitem>

      <listitem
>       <para
>        Make <application
>pg_upgrade</application> create Unix-domain sockets in
        the current directory (Bruce Momjian, Tom Lane)
       </para>

       <para
>        This reduces the possibility that someone will accidentally connect
        during the upgrade.
       </para>
      </listitem>

      <listitem
>       <para
>        Make <application
>pg_upgrade</application> <option
>--check</option> mode properly
        detect the location of non-default socket directories (Bruce
        Momjian, Tom Lane)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve performance of <application
>pg_upgrade</application> for databases
        with many tables (Bruce Momjian)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve <application
>pg_upgrade</application>'s logs by showing
        executed commands (lvaro Herrera)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve <application
>pg_upgrade</application>'s status display during
        copy/link (Bruce Momjian)
       </para>
      </listitem>

     </itemizedlist>

    </sect4>

    <sect4
>     <title
><link
linkend="pgbench"
><application
>pgbench</application></link></title>

     <itemizedlist
>
      <listitem
>       <para
>        Add <option
>--foreign-keys</option> option to <application
>pgbench</application>
        (Jeff Janes)
       </para>

       <para
>        This adds foreign key constraints to the standard tables created by
        <application
>pgbench</application>, for use in foreign key performance testing.
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <application
>pgbench</application> to aggregate performance statistics
        and produce output every <option
>--aggregate-interval</option>
        seconds (Tomas Vondra)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <application
>pgbench</application> <option
>--sampling-rate</option> option
        to control the percentage of transactions logged (Tomas Vondra)
       </para>
      </listitem>

      <listitem
>       <para
>        Reduce and improve the status message output of
        <application
>pgbench</application>'s initialization mode (Robert Haas,
        Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <application
>pgbench</application> <option
>-q</option> mode to print one output
        line every five seconds (Tomas Vondra)
       </para>
      </listitem>

      <listitem
>       <para
>        Output <application
>pgbench</application> elapsed and estimated remaining
        time during initialization (Tomas Vondra)
       </para>
      </listitem>

      <listitem
>       <para
>        Allow <application
>pgbench</application> to use much larger scale factors,
        by changing relevant columns from <type
>integer</type> to <type
>bigint</type>
        when the requested scale factor exceeds 20000
        (Greg Smith)
       </para>
      </listitem>

    </itemizedlist>

    </sect4>

   </sect3>

   <sect3
>    <title
>Documentation</title>

    <itemizedlist
>
      <listitem
>       <para
>        Allow <productname
>EPUB</productname>-format documentation to be created
        (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Update <productname
>FreeBSD</productname> kernel configuration documentation
        (Brad Davis)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve <link
linkend="tutorial-window"
><literal
>WINDOW</literal>
        function</link> documentation (Bruce Momjian, Florian Pflug)
       </para>
      </listitem>

      <listitem
>       <para
>        Add <link
linkend="docguide-toolsets"
>instructions</link> for setting
        up the documentation tool chain on Mac <productname
>OS X</productname>
        (Peter Eisentraut)
       </para>
      </listitem>

      <listitem
>       <para
>        Improve <link
linkend="guc-commit-delay"
><varname
>commit_delay</varname></link>
        documentation (Peter Geoghegan)
       </para>
      </listitem>

    </itemizedlist>

   </sect3>

  </sect2>
 </sect1>
