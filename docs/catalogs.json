{
 "catalogs-overview": {
  "doc": "  <h2>Overview</h2>\n\n  <para>   <xref linkend=\"catalog-table\"> lists the system catalogs.\n   More detailed documentation of each catalog follows below.\n   </xref>\n  </para>\n\n  <para>   Most system catalogs are copied from the template database during\n   database creation and are thereafter database-specific. A few\n   catalogs are physically shared across all databases in a cluster;\n   these are noted in the descriptions of the individual catalogs.\n  </para>\n\n  <table id=\"catalog-table\">   <h2>System Catalogs</h2>\n\n   <tgroup cols=\"2\">    <thead>     <row>      <entry>Catalog Name</entry>\n      <entry>Purpose</entry>\n     </row>\n    </thead>\n\n    <tbody>     <row>      <entry><link linkend=\"catalog-pg-aggregate\"><structname>pg_aggregate</structname></link></entry>\n      <entry>aggregate functions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-am\"><structname>pg_am</structname></link></entry>\n      <entry>index access methods</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-amop\"><structname>pg_amop</structname></link></entry>\n      <entry>access method operators</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-amproc\"><structname>pg_amproc</structname></link></entry>\n      <entry>access method support procedures</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-attrdef\"><structname>pg_attrdef</structname></link></entry>\n      <entry>column default values</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-attribute\"><structname>pg_attribute</structname></link></entry>\n      <entry>table columns (<quote>attributes</quote>)</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link></entry>\n      <entry>authorization identifiers (roles)</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-auth-members\"><structname>pg_auth_members</structname></link></entry>\n      <entry>authorization identifier membership relationships</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-cast\"><structname>pg_cast</structname></link></entry>\n      <entry>casts (data type conversions)</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link></entry>\n      <entry>tables, indexes, sequences, views (<quote>relations</quote>)</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-collation\"><structname>pg_collation</structname></link></entry>\n      <entry>collations (locale information)</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-constraint\"><structname>pg_constraint</structname></link></entry>\n      <entry>check constraints, unique constraints, primary key constraints, foreign key constraints</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-conversion\"><structname>pg_conversion</structname></link></entry>\n      <entry>encoding conversion information</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-database\"><structname>pg_database</structname></link></entry>\n      <entry>databases within this database cluster</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-db-role-setting\"><structname>pg_db_role_setting</structname></link></entry>\n      <entry>per-role and per-database settings</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-default-acl\"><structname>pg_default_acl</structname></link></entry>\n      <entry>default privileges for object types</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-depend\"><structname>pg_depend</structname></link></entry>\n      <entry>dependencies between database objects</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-description\"><structname>pg_description</structname></link></entry>\n      <entry>descriptions or comments on database objects</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-enum\"><structname>pg_enum</structname></link></entry>\n      <entry>enum label and value definitions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-event-trigger\"><structname>pg_event_trigger</structname></link></entry>\n      <entry>event triggers</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-extension\"><structname>pg_extension</structname></link></entry>\n      <entry>installed extensions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-foreign-data-wrapper\"><structname>pg_foreign_data_wrapper</structname></link></entry>\n      <entry>foreign-data wrapper definitions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-foreign-server\"><structname>pg_foreign_server</structname></link></entry>\n      <entry>foreign server definitions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-foreign-table\"><structname>pg_foreign_table</structname></link></entry>\n      <entry>additional foreign table information</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-index\"><structname>pg_index</structname></link></entry>\n      <entry>additional index information</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-inherits\"><structname>pg_inherits</structname></link></entry>\n      <entry>table inheritance hierarchy</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-init-privs\"><structname>pg_init_privs</structname></link></entry>\n      <entry>object initial privileges</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-language\"><structname>pg_language</structname></link></entry>\n      <entry>languages for writing functions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-largeobject\"><structname>pg_largeobject</structname></link></entry>\n      <entry>data pages for large objects</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-largeobject-metadata\"><structname>pg_largeobject_metadata</structname></link></entry>\n      <entry>metadata for large objects</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link></entry>\n      <entry>schemas</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-opclass\"><structname>pg_opclass</structname></link></entry>\n      <entry>access method operator classes</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link></entry>\n      <entry>operators</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-opfamily\"><structname>pg_opfamily</structname></link></entry>\n      <entry>access method operator families</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-pltemplate\"><structname>pg_pltemplate</structname></link></entry>\n      <entry>template data for procedural languages</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-policy\"><structname>pg_policy</structname></link></entry>\n      <entry>row-security policies</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link></entry>\n      <entry>functions and procedures</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-range\"><structname>pg_range</structname></link></entry>\n      <entry>information about range types</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-rewrite\"><structname>pg_rewrite</structname></link></entry>\n      <entry>query rewrite rules</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-replication-origin\"><structname>pg_replication_origin</structname></link></entry>\n      <entry>registered replication origins</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-replication-origin-status\"><structname>pg_replication_origin_status</structname></link></entry>\n      <entry>information about replication origins, including replication progress</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-replication-slots\"><structname>pg_replication_slots</structname></link></entry>\n      <entry>replication slot information</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-seclabel\"><structname>pg_seclabel</structname></link></entry>\n      <entry>security labels on database objects</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-shdepend\"><structname>pg_shdepend</structname></link></entry>\n      <entry>dependencies on shared objects</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-shdescription\"><structname>pg_shdescription</structname></link></entry>\n      <entry>comments on shared objects</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-shseclabel\"><structname>pg_shseclabel</structname></link></entry>\n      <entry>security labels on shared database objects</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-statistic\"><structname>pg_statistic</structname></link></entry>\n      <entry>planner statistics</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-tablespace\"><structname>pg_tablespace</structname></link></entry>\n      <entry>tablespaces within this database cluster</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-transform\"><structname>pg_transform</structname></link></entry>\n      <entry>transforms (data type to procedural language conversions)</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-trigger\"><structname>pg_trigger</structname></link></entry>\n      <entry>triggers</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-ts-config\"><structname>pg_ts_config</structname></link></entry>\n      <entry>text search configurations</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-ts-config-map\"><structname>pg_ts_config_map</structname></link></entry>\n      <entry>text search configurations' token mappings</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-ts-dict\"><structname>pg_ts_dict</structname></link></entry>\n      <entry>text search dictionaries</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-ts-parser\"><structname>pg_ts_parser</structname></link></entry>\n      <entry>text search parsers</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-ts-template\"><structname>pg_ts_template</structname></link></entry>\n      <entry>text search templates</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link></entry>\n      <entry>data types</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"catalog-pg-user-mapping\"><structname>pg_user_mapping</structname></link></entry>\n      <entry>mappings of users to foreign servers</entry>\n     </row>\n    </tbody>\n   </tgroup>\n  </table>\n ",
  "columns": {}
 },
 "catalog-pg-aggregate": {
  "doc": "  <h2><structname>pg_aggregate</structname></h2>\n\n  <indexterm zone=\"catalog-pg-aggregate\">   <primary>pg_aggregate</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_aggregate</structname> stores information about\n   aggregate functions.  An aggregate function is a function that\n   operates on a set of values (typically one column from each row\n   that matches a query condition) and returns a single value computed\n   from all these values.  Typical aggregate functions are\n   <function>sum</function>, <function>count</function>, and\n   <function>max</function>.  Each entry in\n   <structname>pg_aggregate</structname> is an extension of an entry\n   in <structname>pg_proc</structname>.  The <structname>pg_proc</structname>\n   entry carries the aggregate's name, input and output data types, and\n   other information that is similar to ordinary functions.\n  </para>\n\n  \n\n  <para>   New aggregate functions are registered with the <xref linkend=\"sql-createaggregate\">   command.  See <xref linkend=\"xaggr\"> for more information about\n   writing aggregate functions and the meaning of the transition\n   functions, etc.\n  </xref></xref></para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "aggfnoid": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "<structname>pg_proc</structname> OID of the aggregate function"
   },
   "aggkind": {
    "type": "char",
    "ref": "",
    "details": "Aggregate kind:\n       <literal>n</literal> for <quote>normal</quote> aggregates,\n       <literal>o</literal> for <quote>ordered-set</quote> aggregates, or\n       <literal>h</literal> for <quote>hypothetical-set</quote> aggregates\n      "
   },
   "aggnumdirectargs": {
    "type": "int2",
    "ref": "",
    "details": "Number of direct (non-aggregated) arguments of an ordered-set or\n       hypothetical-set aggregate, counting a variadic array as one argument.\n       If equal to <structfield>pronargs</structfield>, the aggregate must be variadic\n       and the variadic array describes the aggregated arguments as well as\n       the final direct arguments.\n       Always zero for normal aggregates."
   },
   "aggtransfn": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Transition function"
   },
   "aggfinalfn": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Final function (zero if none)"
   },
   "aggcombinefn": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Combine function (zero if none)"
   },
   "aggserialfn": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Serialization function (zero if none)"
   },
   "aggdeserialfn": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Deserialization function (zero if none)"
   },
   "aggmtransfn": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Forward transition function for moving-aggregate mode (zero if none)"
   },
   "aggminvtransfn": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Inverse transition function for moving-aggregate mode (zero if none)"
   },
   "aggmfinalfn": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Final function for moving-aggregate mode (zero if none)"
   },
   "aggfinalextra": {
    "type": "bool",
    "ref": "",
    "details": "True to pass extra dummy arguments to <structfield>aggfinalfn</structfield>"
   },
   "aggmfinalextra": {
    "type": "bool",
    "ref": "",
    "details": "True to pass extra dummy arguments to <structfield>aggmfinalfn</structfield>"
   },
   "aggsortop": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "Associated sort operator (zero if none)"
   },
   "aggtranstype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Data type of the aggregate function's internal transition (state) data"
   },
   "aggserialtype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Return data type of the aggregate function's serialization function (zero if none)"
   },
   "aggtransspace": {
    "type": "int4",
    "ref": "",
    "details": "Approximate average size (in bytes) of the transition state\n       data, or zero to use a default estimate"
   },
   "aggmtranstype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Data type of the aggregate function's internal transition (state)\n       data for moving-aggregate mode (zero if none)"
   },
   "aggmtransspace": {
    "type": "int4",
    "ref": "",
    "details": "Approximate average size (in bytes) of the transition state data\n       for moving-aggregate mode, or zero to use a default estimate"
   },
   "agginitval": {
    "type": "text",
    "ref": "",
    "details": "       The initial value of the transition state.  This is a text\n       field containing the initial value in its external string\n       representation.  If this field is null, the transition state\n       value starts out null.\n      "
   },
   "aggminitval": {
    "type": "text",
    "ref": "",
    "details": "       The initial value of the transition state for moving-aggregate mode.\n       This is a text field containing the initial value in its external\n       string representation.  If this field is null, the transition state\n       value starts out null.\n      "
   }
  }
 },
 "catalog-pg-am": {
  "doc": "  <h2><structname>pg_am</structname></h2>\n\n  <indexterm zone=\"catalog-pg-am\">   <primary>pg_am</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_am</structname> stores information about index\n   access methods.  There is one row for each index access method supported by\n   the system.  The requirements for index access methods are discussed in\n   detail in <xref linkend=\"indexam\">.\n  </xref></para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "amname": {
    "type": "name",
    "ref": "",
    "details": "Name of the access method"
   },
   "amhandler": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       OID of a handler function that is responsible for supplying information\n       about the access method\n      "
   }
  }
 },
 "catalog-pg-amop": {
  "doc": "  <h2><structname>pg_amop</structname></h2>\n\n  <indexterm zone=\"catalog-pg-amop\">   <primary>pg_amop</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_amop</structname> stores information about\n   operators associated with access method operator families.  There is one\n   row for each operator that is a member of an operator family.  A family\n   member can be either a <firstterm>search</firstterm> operator or an\n   <firstterm>ordering</firstterm> operator.  An operator\n   can appear in more than one family, but cannot appear in more than one\n   search position nor more than one ordering position within a family.\n   (It is allowed, though unlikely, for an operator to be used for both\n   search and ordering purposes.)\n  </para>\n\n  \n\n  <para>   A <quote>search</quote> operator entry indicates that an index of this operator\n   family can be searched to find all rows satisfying\n   <literal>WHERE</literal>\n   <replaceable>indexed_column</replaceable>\n   <replaceable>operator</replaceable>\n   <replaceable>constant</replaceable>.\n   Obviously, such an operator must return <type>boolean</type>, and its left-hand input\n   type must match the index's column data type.\n  </para>\n\n  <para>   An <quote>ordering</quote> operator entry indicates that an index of this\n   operator family can be scanned to return rows in the order represented by\n   <literal>ORDER BY</literal>\n   <replaceable>indexed_column</replaceable>\n   <replaceable>operator</replaceable>\n   <replaceable>constant</replaceable>.\n   Such an operator could return any sortable data type, though again\n   its left-hand input type must match the index's column data type.\n   The exact semantics of the <literal>ORDER BY</literal> are specified by the\n   <structfield>amopsortfamily</structfield> column, which must reference\n   a B-tree operator family for the operator's result type.\n  </para>\n\n  <note>   <para>    At present, it's assumed that the sort order for an ordering operator\n    is the default for the referenced operator family, i.e., <literal>ASC NULLS\n    LAST</literal>.  This might someday be relaxed by adding additional columns\n    to specify sort options explicitly.\n   </para>\n  </note>\n\n  <para>   An entry's <structfield>amopmethod</structfield> must match the\n   <structname>opfmethod</structname> of its containing operator family (including\n   <structfield>amopmethod</structfield> here is an intentional denormalization of the\n   catalog structure for performance reasons).  Also,\n   <structfield>amoplefttype</structfield> and <structfield>amoprighttype</structfield> must match\n   the <structfield>oprleft</structfield> and <structfield>oprright</structfield> fields of the\n   referenced <structname>pg_operator</structname> entry.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "amopfamily": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-opfamily\"><structname>pg_opfamily</structname></link>.oid</literal>",
    "details": "The operator family this entry is for"
   },
   "amoplefttype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Left-hand input data type of operator"
   },
   "amoprighttype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Right-hand input data type of operator"
   },
   "amopstrategy": {
    "type": "int2",
    "ref": "",
    "details": "Operator strategy number"
   },
   "amoppurpose": {
    "type": "char",
    "ref": "",
    "details": "Operator purpose, either <literal>s</literal> for search or\n       <literal>o</literal> for ordering"
   },
   "amopopr": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "OID of the operator"
   },
   "amopmethod": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-am\"><structname>pg_am</structname></link>.oid</literal>",
    "details": "Index access method operator family is for"
   },
   "amopsortfamily": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-opfamily\"><structname>pg_opfamily</structname></link>.oid</literal>",
    "details": "The B-tree operator family this entry sorts according to, if an\n       ordering operator; zero if a search operator"
   }
  }
 },
 "catalog-pg-amproc": {
  "doc": "  <h2><structname>pg_amproc</structname></h2>\n\n  <indexterm zone=\"catalog-pg-amproc\">   <primary>pg_amproc</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_amproc</structname> stores information about\n   support procedures associated with access method operator families.  There\n   is one row for each support procedure belonging to an operator family.\n  </para>\n\n  \n\n  <para>   The usual interpretation of the\n   <structfield>amproclefttype</structfield> and <structfield>amprocrighttype</structfield> fields\n   is that they identify the left and right input types of the operator(s)\n   that a particular support procedure supports.  For some access methods\n   these match the input data type(s) of the support procedure itself, for\n   others not.  There is a notion of <quote>default</quote> support procedures for\n   an index, which are those with <structfield>amproclefttype</structfield> and\n   <structfield>amprocrighttype</structfield> both equal to the index operator class's\n   <structfield>opcintype</structfield>.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "amprocfamily": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-opfamily\"><structname>pg_opfamily</structname></link>.oid</literal>",
    "details": "The operator family this entry is for"
   },
   "amproclefttype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Left-hand input data type of associated operator"
   },
   "amprocrighttype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Right-hand input data type of associated operator"
   },
   "amprocnum": {
    "type": "int2",
    "ref": "",
    "details": "Support procedure number"
   },
   "amproc": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the procedure"
   }
  }
 },
 "catalog-pg-attrdef": {
  "doc": "  <h2><structname>pg_attrdef</structname></h2>\n\n  <indexterm zone=\"catalog-pg-attrdef\">   <primary>pg_attrdef</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_attrdef</structname> stores column default values.  The main information\n   about columns is stored in <structname>pg_attribute</structname>\n   (see below).  Only columns that explicitly specify a default value\n   (when the table is created or the column is added) will have an\n   entry here.\n  </para>\n\n  \n\n   <para>    The <structfield>adsrc</structfield> field is historical, and is best\n    not used, because it does not track outside changes that might affect\n    the representation of the default value.  Reverse-compiling the\n    <structfield>adbin</structfield> field (with <function>pg_get_expr</function> for\n    example) is a better way to display the default value.\n   </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "adrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The table this column belongs to"
   },
   "adnum": {
    "type": "int2",
    "ref": "<literal><link linkend=\"catalog-pg-attribute\"><structname>pg_attribute</structname></link>.attnum</literal>",
    "details": "The number of the column"
   },
   "adbin": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "The internal representation of the column default value"
   },
   "adsrc": {
    "type": "text",
    "ref": "",
    "details": "A human-readable representation of the default value"
   }
  }
 },
 "catalog-pg-attribute": {
  "doc": "  <h2><structname>pg_attribute</structname></h2>\n\n  <indexterm zone=\"catalog-pg-attribute\">   <primary>pg_attribute</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_attribute</structname> stores information about\n   table columns.  There will be exactly one\n   <structname>pg_attribute</structname> row for every column in every\n   table in the database.  (There will also be attribute entries for\n   indexes, and indeed all objects that have <structname>pg_class</structname>\n   entries.)\n  </para>\n\n  <para>   The term attribute is equivalent to column and is used for\n   historical reasons.\n  </para>\n\n  \n\n  <para>   In a dropped column's <structname>pg_attribute</structname> entry,\n   <structfield>atttypid</structfield> is reset to zero, but\n   <structfield>attlen</structfield> and the other fields copied from\n   <structname>pg_type</structname> are still valid.  This arrangement is needed\n   to cope with the situation where the dropped column's data type was\n   later dropped, and so there is no <structname>pg_type</structname> row anymore.\n   <structfield>attlen</structfield> and the other fields can be used\n   to interpret the contents of a row of the table.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "attrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The table this column belongs to"
   },
   "attname": {
    "type": "name",
    "ref": "",
    "details": "The column name"
   },
   "atttypid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "The data type of this column"
   },
   "attstattarget": {
    "type": "int4",
    "ref": "",
    "details": "       <structfield>attstattarget</structfield> controls the level of detail\n       of statistics accumulated for this column by\n       <xref linkend=\"sql-analyze\">.\n       A zero value indicates that no statistics should be collected.\n       A negative value says to use the system default statistics target.\n       The exact meaning of positive values is data type-dependent.\n       For scalar data types, <structfield>attstattarget</structfield>\n       is both the target number of <quote>most common values</quote>\n       to collect, and the target number of histogram bins to create.\n      </xref>"
   },
   "attlen": {
    "type": "int2",
    "ref": "",
    "details": "       A copy of <literal>pg_type.typlen</literal> of this column's\n       type\n      "
   },
   "attnum": {
    "type": "int2",
    "ref": "",
    "details": "       The number of the column.  Ordinary columns are numbered from 1\n       up.  System columns, such as <structfield>oid</structfield>,\n       have (arbitrary) negative numbers.\n      "
   },
   "attndims": {
    "type": "int4",
    "ref": "",
    "details": "       Number of dimensions, if the column is an array type; otherwise 0.\n       (Presently, the number of dimensions of an array is not enforced,\n       so any nonzero value effectively means <quote>it's an array</quote>.)\n      "
   },
   "attcacheoff": {
    "type": "int4",
    "ref": "",
    "details": "       Always -1 in storage, but when loaded into a row descriptor\n       in memory this might be updated to cache the offset of the attribute\n       within the row\n      "
   },
   "atttypmod": {
    "type": "int4",
    "ref": "",
    "details": "       <structfield>atttypmod</structfield> records type-specific data\n       supplied at table creation time (for example, the maximum\n       length of a <type>varchar</type> column).  It is passed to\n       type-specific input functions and length coercion functions.\n       The value will generally be -1 for types that do not need <structfield>atttypmod</structfield>.\n      "
   },
   "attbyval": {
    "type": "bool",
    "ref": "",
    "details": "       A copy of <literal>pg_type.typbyval</literal> of this column's type\n      "
   },
   "attstorage": {
    "type": "char",
    "ref": "",
    "details": "       Normally a copy of <literal>pg_type.typstorage</literal> of this\n       column's type.  For TOAST-able data types, this can be altered\n       after column creation to control storage policy.\n      "
   },
   "attalign": {
    "type": "char",
    "ref": "",
    "details": "       A copy of <literal>pg_type.typalign</literal> of this column's type\n      "
   },
   "attnotnull": {
    "type": "bool",
    "ref": "",
    "details": "       This represents a not-null constraint.\n      "
   },
   "atthasdef": {
    "type": "bool",
    "ref": "",
    "details": "       This column has a default value, in which case there will be a\n       corresponding entry in the <structname>pg_attrdef</structname>\n       catalog that actually defines the value.\n      "
   },
   "attisdropped": {
    "type": "bool",
    "ref": "",
    "details": "       This column has been dropped and is no longer valid.  A dropped\n       column is still physically present in the table, but is\n       ignored by the parser and so cannot be accessed via SQL.\n      "
   },
   "attislocal": {
    "type": "bool",
    "ref": "",
    "details": "       This column is defined locally in the relation.  Note that a column can\n       be locally defined and inherited simultaneously.\n      "
   },
   "attinhcount": {
    "type": "int4",
    "ref": "",
    "details": "       The number of direct ancestors this column has.  A column with a\n       nonzero number of ancestors cannot be dropped nor renamed.\n      "
   },
   "attcollation": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-collation\"><structname>pg_collation</structname></link>.oid</literal>",
    "details": "       The defined collation of the column, or zero if the column is\n       not of a collatable data type.\n      "
   },
   "attacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Column-level access privileges, if any have been granted specifically\n       on this column\n      "
   },
   "attoptions": {
    "type": "text[]",
    "ref": "",
    "details": "       Attribute-level options, as <quote>keyword=value</quote> strings\n      "
   },
   "attfdwoptions": {
    "type": "text[]",
    "ref": "",
    "details": "       Attribute-level foreign data wrapper options, as <quote>keyword=value</quote> strings\n      "
   }
  }
 },
 "catalog-pg-authid": {
  "doc": "  <h2><structname>pg_authid</structname></h2>\n\n  <indexterm zone=\"catalog-pg-authid\">   <primary>pg_authid</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_authid</structname> contains information about\n   database authorization identifiers (roles).  A role subsumes the concepts\n   of <quote>users</quote> and <quote>groups</quote>.  A user is essentially just a\n   role with the <structfield>rolcanlogin</structfield> flag set.  Any role (with or\n   without <structfield>rolcanlogin</structfield>) can have other roles as members; see\n   <link linkend=\"catalog-pg-auth-members\"><structname>pg_auth_members</structname></link>.\n  </para>\n\n  <para>   Since this catalog contains passwords, it must not be publicly readable.\n   <link linkend=\"view-pg-roles\"><structname>pg_roles</structname></link>\n   is a publicly readable view on\n   <structname>pg_authid</structname> that blanks out the password field.\n  </para>\n\n  <para>   <xref linkend=\"user-manag\"> contains detailed information about user and\n   privilege management.\n  </xref></para>\n\n  <para>   Because user identities are cluster-wide,\n   <structname>pg_authid</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_authid</structname> per cluster, not\n   one per database.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "oid": {
    "type": "oid",
    "ref": "Row identifier (hidden attribute; must be explicitly selected)",
    "details": null
   },
   "rolname": {
    "type": "name",
    "ref": "Role name",
    "details": null
   },
   "rolsuper": {
    "type": "bool",
    "ref": "Role has superuser privileges",
    "details": null
   },
   "rolinherit": {
    "type": "bool",
    "ref": "Role automatically inherits privileges of roles it is a\n       member of",
    "details": null
   },
   "rolcreaterole": {
    "type": "bool",
    "ref": "Role can create more roles",
    "details": null
   },
   "rolcreatedb": {
    "type": "bool",
    "ref": "Role can create databases",
    "details": null
   },
   "rolcanlogin": {
    "type": "bool",
    "ref": "       Role can log in. That is, this role can be given as the initial\n       session authorization identifier\n      ",
    "details": null
   },
   "rolreplication": {
    "type": "bool",
    "ref": "       Role is a replication role. That is, this role can initiate streaming\n       replication (see <xref linkend=\"streaming-replication\">) and set/unset\n       the system backup mode using <function>pg_start_backup</function> and\n       <function>pg_stop_backup</function>\n      </xref>",
    "details": null
   },
   "rolbypassrls": {
    "type": "bool",
    "ref": "       Role bypasses every row level security policy, see\n       <xref linkend=\"ddl-rowsecurity\"> for more information.\n      </xref>",
    "details": null
   },
   "rolconnlimit": {
    "type": "int4",
    "ref": "       For roles that can log in, this sets maximum number of concurrent\n       connections this role can make.  -1 means no limit.\n      ",
    "details": null
   },
   "rolpassword": {
    "type": "text",
    "ref": "       Password (possibly encrypted); null if none.  If the password\n       is encrypted, this column will begin with the string <literal>md5</literal>\n       followed by a 32-character hexadecimal MD5 hash.  The MD5 hash\n       will be of the user's password concatenated to their user name.\n       For example, if user <literal>joe</literal> has password <literal>xyzzy</literal>,\n       <productname>PostgreSQL</productname> will store the md5 hash of\n       <literal>xyzzyjoe</literal>.  A password that does not follow that\n       format is assumed to be unencrypted.\n      ",
    "details": null
   },
   "rolvaliduntil": {
    "type": "timestamptz",
    "ref": "Password expiry time (only used for password authentication);\n       null if no expiration",
    "details": null
   }
  }
 },
 "catalog-pg-auth-members": {
  "doc": "  <h2><structname>pg_auth_members</structname></h2>\n\n  <indexterm zone=\"catalog-pg-auth-members\">   <primary>pg_auth_members</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_auth_members</structname> shows the membership\n   relations between roles.  Any non-circular set of relationships is allowed.\n  </para>\n\n  <para>   Because user identities are cluster-wide,\n   <structname>pg_auth_members</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_auth_members</structname> per cluster, not\n   one per database.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "roleid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "ID of a role that has a member"
   },
   "member": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "ID of a role that is a member of <structfield>roleid</structfield>"
   },
   "grantor": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "ID of the role that granted this membership"
   },
   "admin_option": {
    "type": "bool",
    "ref": "",
    "details": "True if <structfield>member</structfield> can grant membership in\n       <structfield>roleid</structfield> to others"
   }
  }
 },
 "catalog-pg-cast": {
  "doc": "  <h2><structname>pg_cast</structname></h2>\n\n  <indexterm zone=\"catalog-pg-cast\">   <primary>pg_cast</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_cast</structname> stores data type conversion\n   paths, both built-in and user-defined.\n  </para>\n\n  <para>   It should be noted that <structname>pg_cast</structname> does not represent\n   every type conversion that the system knows how to perform; only those that\n   cannot be deduced from some generic rule.  For example, casting between a\n   domain and its base type is not explicitly represented in\n   <structname>pg_cast</structname>.  Another important exception is that\n   <quote>automatic I/O conversion casts</quote>, those performed using a data\n   type's own I/O functions to convert to or from <type>text</type> or other\n   string types, are not explicitly represented in\n   <structname>pg_cast</structname>.\n  </para>\n\n  \n\n  <para>   The cast functions listed in <structname>pg_cast</structname> must\n   always take the cast source type as their first argument type, and\n   return the cast destination type as their result type.  A cast\n   function can have up to three arguments.  The second argument,\n   if present, must be type <type>integer</type>; it receives the type\n   modifier associated with the destination type, or -1\n   if there is none.  The third argument,\n   if present, must be type <type>boolean</type>; it receives <literal>true</literal>\n   if the cast is an explicit cast, <literal>false</literal> otherwise.\n  </para>\n\n  <para>   It is legitimate to create a <structname>pg_cast</structname> entry\n   in which the source and target types are the same, if the associated\n   function takes more than one argument.  Such entries represent\n   <quote>length coercion functions</quote> that coerce values of the type\n   to be legal for a particular type modifier value.\n  </para>\n\n  <para>   When a <structname>pg_cast</structname> entry has different source and\n   target types and a function that takes more than one argument, it\n   represents converting from one type to another and applying a length\n   coercion in a single step.  When no such entry is available, coercion\n   to a type that uses a type modifier involves two steps, one to\n   convert between data types and a second to apply the modifier.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "castsource": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "OID of the source data type"
   },
   "casttarget": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "OID of the target data type"
   },
   "castfunc": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       The OID of the function to use to perform this cast.  Zero is\n       stored if the cast method doesn't require a function.\n      "
   },
   "castcontext": {
    "type": "char",
    "ref": "",
    "details": "       Indicates what contexts the cast can be invoked in.\n       <literal>e</literal> means only as an explicit cast (using\n       <literal>CAST</literal> or <literal>::</literal> syntax).\n       <literal>a</literal> means implicitly in assignment\n       to a target column, as well as explicitly.\n       <literal>i</literal> means implicitly in expressions, as well as the\n       other cases.\n      "
   },
   "castmethod": {
    "type": "char",
    "ref": "",
    "details": "       Indicates how the cast is performed.\n       <literal>f</literal> means that the function specified in the <structfield>castfunc</structfield> field is used.\n       <literal>i</literal> means that the input/output functions are used.\n       <literal>b</literal> means that the types are binary-coercible, thus no conversion is required.\n      "
   }
  }
 },
 "catalog-pg-class": {
  "doc": "  <h2><structname>pg_class</structname></h2>\n\n  <indexterm zone=\"catalog-pg-class\">   <primary>pg_class</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_class</structname> catalogs tables and most\n   everything else that has columns or is otherwise similar to a\n   table.  This includes indexes (but see also\n   <structname>pg_index</structname>), sequences, views, materialized\n   views, composite types, and TOAST tables; see <structfield>relkind</structfield>.\n   Below, when we mean all of these\n   kinds of objects we speak of <quote>relations</quote>.  Not all\n   columns are meaningful for all relation types.\n  </para>\n\n  \n\n  <para>   Several of the Boolean flags in <structname>pg_class</structname> are maintained\n   lazily: they are guaranteed to be true if that's the correct state, but\n   may not be reset to false immediately when the condition is no longer\n   true.  For example, <structfield>relhasindex</structfield> is set by\n   <command>CREATE INDEX</command>, but it is never cleared by\n   <command>DROP INDEX</command>.  Instead, <command>VACUUM</command> clears\n   <structfield>relhasindex</structfield> if it finds the table has no indexes.  This\n   arrangement avoids race conditions and improves concurrency.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "relname": {
    "type": "name",
    "ref": "",
    "details": "Name of the table, index, view, etc."
   },
   "relnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this relation\n      "
   },
   "reltype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "       The OID of the data type that corresponds to this table's row type,\n       if any (zero for indexes, which have no <structname>pg_type</structname> entry)\n      "
   },
   "reloftype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "       For typed tables, the OID of the underlying composite type,\n       zero for all other relations\n      "
   },
   "relowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the relation"
   },
   "relam": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-am\"><structname>pg_am</structname></link>.oid</literal>",
    "details": "If this is an index, the access method used (B-tree, hash, etc.)"
   },
   "relfilenode": {
    "type": "oid",
    "ref": "",
    "details": "Name of the on-disk file of this relation; zero means this\n       is a <quote>mapped</quote> relation whose disk file name is determined\n       by low-level state"
   },
   "reltablespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-tablespace\"><structname>pg_tablespace</structname></link>.oid</literal>",
    "details": "       The tablespace in which this relation is stored.  If zero,\n       the database's default tablespace is implied.  (Not meaningful\n       if the relation has no on-disk file.)\n      "
   },
   "relpages": {
    "type": "int4",
    "ref": "",
    "details": "       Size of the on-disk representation of this table in pages (of size\n       <symbol>BLCKSZ</symbol>).  This is only an estimate used by the\n       planner.  It is updated by <command>VACUUM</command>,\n       <command>ANALYZE</command>, and a few DDL commands such as\n       <command>CREATE INDEX</command>.\n      "
   },
   "reltuples": {
    "type": "float4",
    "ref": "",
    "details": "       Number of rows in the table.  This is only an estimate used by the\n       planner.  It is updated by <command>VACUUM</command>,\n       <command>ANALYZE</command>, and a few DDL commands such as\n       <command>CREATE INDEX</command>.\n      "
   },
   "relallvisible": {
    "type": "int4",
    "ref": "",
    "details": "       Number of pages that are marked all-visible in the table's\n       visibility map.  This is only an estimate used by the\n       planner.  It is updated by <command>VACUUM</command>,\n       <command>ANALYZE</command>, and a few DDL commands such as\n       <command>CREATE INDEX</command>.\n      "
   },
   "reltoastrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "       OID of the TOAST table associated with this table, 0 if none.  The\n       TOAST table stores large attributes <quote>out of line</quote> in a\n       secondary table.\n      "
   },
   "relhasindex": {
    "type": "bool",
    "ref": "",
    "details": "       True if this is a table and it has (or recently had) any indexes\n      "
   },
   "relisshared": {
    "type": "bool",
    "ref": "",
    "details": "       True if this table is shared across all databases in the cluster.  Only\n       certain system catalogs (such as <structname>pg_database</structname>)\n       are shared.\n      "
   },
   "relpersistence": {
    "type": "char",
    "ref": "",
    "details": "       <literal>p</literal> = permanent table, <literal>u</literal> = unlogged table,\n       <literal>t</literal> = temporary table\n      "
   },
   "relkind": {
    "type": "char",
    "ref": "",
    "details": "       <literal>r</literal> = ordinary table, <literal>i</literal> = index,\n       <literal>S</literal> = sequence, <literal>v</literal> = view,\n       <literal>m</literal> = materialized view,\n       <literal>c</literal> = composite type, <literal>t</literal> = TOAST table,\n       <literal>f</literal> = foreign table\n      "
   },
   "relnatts": {
    "type": "int2",
    "ref": "",
    "details": "       Number of user columns in the relation (system columns not\n       counted).  There must be this many corresponding entries in\n       <structname>pg_attribute</structname>.  See also\n       <literal>pg_attribute.attnum</literal>.\n      "
   },
   "relchecks": {
    "type": "int2",
    "ref": "",
    "details": "       Number of <literal>CHECK</literal> constraints on the table; see\n       <link linkend=\"catalog-pg-constraint\"><structname>pg_constraint</structname></link> catalog\n      "
   },
   "relhasoids": {
    "type": "bool",
    "ref": "",
    "details": "       True if we generate an OID for each row of the relation\n      "
   },
   "relhaspkey": {
    "type": "bool",
    "ref": "",
    "details": "       True if the table has (or once had) a primary key\n      "
   },
   "relhasrules": {
    "type": "bool",
    "ref": "",
    "details": "       True if table has (or once had) rules; see\n       <link linkend=\"catalog-pg-rewrite\"><structname>pg_rewrite</structname></link> catalog\n      "
   },
   "relhastriggers": {
    "type": "bool",
    "ref": "",
    "details": "       True if table has (or once had) triggers; see\n       <link linkend=\"catalog-pg-trigger\"><structname>pg_trigger</structname></link> catalog\n      "
   },
   "relhassubclass": {
    "type": "bool",
    "ref": "",
    "details": "True if table has (or once had) any inheritance children"
   },
   "relrowsecurity": {
    "type": "bool",
    "ref": "",
    "details": "       True if table has row level security enabled; see\n       <link linkend=\"catalog-pg-policy\"><structname>pg_policy</structname></link> catalog\n      "
   },
   "relforcerowsecurity": {
    "type": "bool",
    "ref": "",
    "details": "       True if row level security (when enabled) will also apply to table owner; see\n       <link linkend=\"catalog-pg-policy\"><structname>pg_policy</structname></link> catalog\n      "
   },
   "relispopulated": {
    "type": "bool",
    "ref": "",
    "details": "True if relation is populated (this is true for all\n       relations other than some materialized views)"
   },
   "relreplident": {
    "type": "char",
    "ref": "",
    "details": "       Columns used to form <quote>replica identity</quote> for rows:\n       <literal>d</literal> = default (primary key, if any),\n       <literal>n</literal> = nothing,\n       <literal>f</literal> = all columns\n       <literal>i</literal> = index with <structfield>indisreplident</structfield> set, or default\n      "
   },
   "relfrozenxid": {
    "type": "xid",
    "ref": "",
    "details": "       All transaction IDs before this one have been replaced with a permanent\n       (<quote>frozen</quote>) transaction ID in this table.  This is used to track\n       whether the table needs to be vacuumed in order to prevent transaction\n       ID wraparound or to allow <literal>pg_clog</literal> to be shrunk.  Zero\n       (<symbol>InvalidTransactionId</symbol>) if the relation is not a table.\n      "
   },
   "relminmxid": {
    "type": "xid",
    "ref": "",
    "details": "       All multixact IDs before this one have been replaced by a\n       transaction ID in this table.  This is used to track\n       whether the table needs to be vacuumed in order to prevent multixact ID\n       wraparound or to allow <literal>pg_multixact</literal> to be shrunk.  Zero\n       (<symbol>InvalidMultiXactId</symbol>) if the relation is not a table.\n      "
   },
   "relacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   },
   "reloptions": {
    "type": "text[]",
    "ref": "",
    "details": "       Access-method-specific options, as <quote>keyword=value</quote> strings\n      "
   }
  }
 },
 "catalog-pg-collation": {
  "doc": "  <h2><structname>pg_collation</structname></h2>\n\n  <indexterm zone=\"catalog-pg-collation\">   <primary>pg_collation</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_collation</structname> describes the\n   available collations, which are essentially mappings from an SQL\n   name to operating system locale categories.\n   See <xref linkend=\"collation\"> for more information.\n  </xref></para>\n\n  \n\n  <para>   Note that the unique key on this catalog is (<structfield>collname</structfield>,\n   <structfield>collencoding</structfield>, <structfield>collnamespace</structfield>) not just\n   (<structfield>collname</structfield>, <structfield>collnamespace</structfield>).\n   <productname>PostgreSQL</productname> generally ignores all\n   collations that do not have <structfield>collencoding</structfield> equal to\n   either the current database's encoding or -1, and creation of new entries\n   with the same name as an entry with <structfield>collencoding</structfield> = -1\n   is forbidden.  Therefore it is sufficient to use a qualified SQL name\n   (<replaceable>schema</replaceable>.<replaceable>name</replaceable>) to identify a collation,\n   even though this is not unique according to the catalog definition.\n   The reason for defining the catalog this way is that\n   <application>initdb</application> fills it in at cluster initialization time with\n   entries for all locales available on the system, so it must be able to\n   hold entries for all encodings that might ever be used in the cluster.\n  </para>\n\n  <para>   In the <literal>template0</literal> database, it could be useful to create\n   collations whose encoding does not match the database encoding,\n   since they could match the encodings of databases later cloned from\n   <literal>template0</literal>.  This would currently have to be done manually.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "collname": {
    "type": "name",
    "ref": "",
    "details": "Collation name (unique per namespace and encoding)"
   },
   "collnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this collation\n      "
   },
   "collowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the collation"
   },
   "collencoding": {
    "type": "int4",
    "ref": "",
    "details": "Encoding in which the collation is applicable, or -1 if it\n       works for any encoding"
   },
   "collcollate": {
    "type": "name",
    "ref": "",
    "details": "<symbol>LC_COLLATE</symbol> for this collation object"
   },
   "collctype": {
    "type": "name",
    "ref": "",
    "details": "<symbol>LC_CTYPE</symbol> for this collation object"
   }
  }
 },
 "catalog-pg-constraint": {
  "doc": "  <h2><structname>pg_constraint</structname></h2>\n\n  <indexterm zone=\"catalog-pg-constraint\">   <primary>pg_constraint</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_constraint</structname> stores check, primary\n   key, unique, foreign key, and exclusion constraints on tables.\n   (Column constraints are not treated specially.  Every column constraint is\n   equivalent to some table constraint.)\n   Not-null constraints are represented in the <structname>pg_attribute</structname>\n   catalog, not here.\n  </para>\n\n  <para>   User-defined constraint triggers (created with <command>CREATE CONSTRAINT\n   TRIGGER</command>) also give rise to an entry in this table.\n  </para>\n\n  <para>   Check constraints on domains are stored here, too.\n  </para>\n\n  \n\n  <para>   In the case of an exclusion constraint, <structfield>conkey</structfield>\n   is only useful for constraint elements that are simple column references.\n   For other cases, a zero appears in <structfield>conkey</structfield>\n   and the associated index must be consulted to discover the expression\n   that is constrained.  (<structfield>conkey</structfield> thus has the\n   same contents as <structname>pg_index</structname>.<structfield>indkey</structfield> for the\n   index.)\n  </para>\n\n  <note>   <para>    <structfield>consrc</structfield> is not updated when referenced objects\n    change; for example, it won't track renaming of columns.  Rather than\n    relying on this field, it's best to use <function>pg_get_constraintdef()</function>\n    to extract the definition of a check constraint.\n   </para>\n  </note>\n\n  <note>   <para>    <literal>pg_class.relchecks</literal> needs to agree with the\n    number of check-constraint entries found in this table for each\n    relation.\n   </para>\n  </note>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "conname": {
    "type": "name",
    "ref": "",
    "details": "Constraint name (not necessarily unique!)"
   },
   "connamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this constraint\n      "
   },
   "contype": {
    "type": "char",
    "ref": "",
    "details": "        <literal>c</literal> = check constraint,\n        <literal>f</literal> = foreign key constraint,\n        <literal>p</literal> = primary key constraint,\n        <literal>u</literal> = unique constraint,\n        <literal>t</literal> = constraint trigger,\n        <literal>x</literal> = exclusion constraint\n      "
   },
   "condeferrable": {
    "type": "bool",
    "ref": "",
    "details": "Is the constraint deferrable?"
   },
   "condeferred": {
    "type": "bool",
    "ref": "",
    "details": "Is the constraint deferred by default?"
   },
   "convalidated": {
    "type": "bool",
    "ref": "",
    "details": "Has the constraint been validated?\n       Currently, can only be false for foreign keys and CHECK constraints"
   },
   "conrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The table this constraint is on; 0 if not a table constraint"
   },
   "contypid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "The domain this constraint is on; 0 if not a domain constraint"
   },
   "conindid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The index supporting this constraint, if it's a unique, primary\n       key, foreign key, or exclusion constraint; else 0"
   },
   "confrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "If a foreign key, the referenced table; else 0"
   },
   "confupdtype": {
    "type": "char",
    "ref": "",
    "details": "Foreign key update action code:\n            <literal>a</literal> = no action,\n            <literal>r</literal> = restrict,\n            <literal>c</literal> = cascade,\n            <literal>n</literal> = set null,\n            <literal>d</literal> = set default\n          "
   },
   "confdeltype": {
    "type": "char",
    "ref": "",
    "details": "Foreign key deletion action code:\n            <literal>a</literal> = no action,\n            <literal>r</literal> = restrict,\n            <literal>c</literal> = cascade,\n            <literal>n</literal> = set null,\n            <literal>d</literal> = set default\n          "
   },
   "confmatchtype": {
    "type": "char",
    "ref": "",
    "details": "Foreign key match type:\n            <literal>f</literal> = full,\n            <literal>p</literal> = partial,\n            <literal>s</literal> = simple\n          "
   },
   "conislocal": {
    "type": "bool",
    "ref": "",
    "details": "       This constraint is defined locally for the relation.  Note that a\n       constraint can be locally defined and inherited simultaneously.\n      "
   },
   "coninhcount": {
    "type": "int4",
    "ref": "",
    "details": "       The number of direct inheritance ancestors this constraint has.\n       A constraint with\n       a nonzero number of ancestors cannot be dropped nor renamed.\n      "
   },
   "connoinherit": {
    "type": "bool",
    "ref": "",
    "details": "       This constraint is defined locally for the relation.  It is a\n       non-inheritable constraint.\n      "
   },
   "conkey": {
    "type": "int2[]",
    "ref": "<literal><link linkend=\"catalog-pg-attribute\"><structname>pg_attribute</structname></link>.attnum</literal>",
    "details": "If a table constraint (including foreign keys, but not constraint\n       triggers), list of the constrained columns"
   },
   "confkey": {
    "type": "int2[]",
    "ref": "<literal><link linkend=\"catalog-pg-attribute\"><structname>pg_attribute</structname></link>.attnum</literal>",
    "details": "If a foreign key, list of the referenced columns"
   },
   "conpfeqop": {
    "type": "oid[]",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "If a foreign key, list of the equality operators for PK = FK comparisons"
   },
   "conppeqop": {
    "type": "oid[]",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "If a foreign key, list of the equality operators for PK = PK comparisons"
   },
   "conffeqop": {
    "type": "oid[]",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "If a foreign key, list of the equality operators for FK = FK comparisons"
   },
   "conexclop": {
    "type": "oid[]",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "If an exclusion constraint, list of the per-column exclusion operators"
   },
   "conbin": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "If a check constraint, an internal representation of the expression"
   },
   "consrc": {
    "type": "text",
    "ref": "",
    "details": "If a check constraint, a human-readable representation of the expression"
   }
  }
 },
 "catalog-pg-conversion": {
  "doc": "  <h2><structname>pg_conversion</structname></h2>\n\n  <indexterm zone=\"catalog-pg-conversion\">   <primary>pg_conversion</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_conversion</structname> describes\n   encoding conversion procedures.  See <xref linkend=\"sql-createconversion\">   for more information.\n  </xref></para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "conname": {
    "type": "name",
    "ref": "",
    "details": "Conversion name (unique within a namespace)"
   },
   "connamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this conversion\n      "
   },
   "conowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the conversion"
   },
   "conforencoding": {
    "type": "int4",
    "ref": "",
    "details": "Source encoding ID"
   },
   "contoencoding": {
    "type": "int4",
    "ref": "",
    "details": "Destination encoding ID"
   },
   "conproc": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Conversion procedure"
   },
   "condefault": {
    "type": "bool",
    "ref": "",
    "details": "True if this is the default conversion"
   }
  }
 },
 "catalog-pg-database": {
  "doc": "  <h2><structname>pg_database</structname></h2>\n\n  <indexterm zone=\"catalog-pg-database\">   <primary>pg_database</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_database</structname> stores information about\n   the available databases.  Databases are created with the <xref linkend=\"sql-createdatabase\"> command.\n   Consult <xref linkend=\"managing-databases\"> for details about the meaning\n   of some of the parameters.\n  </xref></xref></para>\n\n  <para>   Unlike most system catalogs, <structname>pg_database</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_database</structname> per cluster, not\n   one per database.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "datname": {
    "type": "name",
    "ref": "",
    "details": "Database name"
   },
   "datdba": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the database, usually the user who created it"
   },
   "encoding": {
    "type": "int4",
    "ref": "",
    "details": "Character encoding for this database\n          (<function>pg_encoding_to_char()</function> can translate\n           this number to the encoding name)"
   },
   "datcollate": {
    "type": "name",
    "ref": "",
    "details": "LC_COLLATE for this database"
   },
   "datctype": {
    "type": "name",
    "ref": "",
    "details": "LC_CTYPE for this database"
   },
   "datistemplate": {
    "type": "bool",
    "ref": "",
    "details": "       If true, then this database can be cloned by\n       any user with <literal>CREATEDB</literal> privileges;\n       if false, then only superusers or the owner of\n       the database can clone it.\n      "
   },
   "datallowconn": {
    "type": "bool",
    "ref": "",
    "details": "       If false then no one can connect to this database.  This is\n       used to protect the <literal>template0</literal> database from being altered.\n      "
   },
   "datconnlimit": {
    "type": "int4",
    "ref": "",
    "details": "       Sets maximum number of concurrent connections that can be made\n       to this database.  -1 means no limit.\n      "
   },
   "datlastsysoid": {
    "type": "oid",
    "ref": "",
    "details": "       Last system OID in the database; useful\n       particularly to <application>pg_dump</application>\n      "
   },
   "datfrozenxid": {
    "type": "xid",
    "ref": "",
    "details": "       All transaction IDs before this one have been replaced with a permanent\n       (<quote>frozen</quote>) transaction ID in this database.  This is used to\n       track whether the database needs to be vacuumed in order to prevent\n       transaction ID wraparound or to allow <literal>pg_clog</literal> to be shrunk.\n       It is the minimum of the per-table\n       <structname>pg_class</structname>.<structfield>relfrozenxid</structfield> values.\n      "
   },
   "datminmxid": {
    "type": "xid",
    "ref": "",
    "details": "       All multixact IDs before this one have been replaced with a\n       transaction ID in this database.  This is used to\n       track whether the database needs to be vacuumed in order to prevent\n       multixact ID wraparound or to allow <literal>pg_multixact</literal> to be shrunk.\n       It is the minimum of the per-table\n       <structname>pg_class</structname>.<structfield>relminmxid</structfield> values.\n      "
   },
   "dattablespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-tablespace\"><structname>pg_tablespace</structname></link>.oid</literal>",
    "details": "       The default tablespace for the database.\n       Within this database, all tables for which\n       <structname>pg_class</structname>.<structfield>reltablespace</structfield> is zero\n       will be stored in this tablespace; in particular, all the non-shared\n       system catalogs will be there.\n      "
   },
   "datacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   }
  }
 },
 "catalog-pg-db-role-setting": {
  "doc": "  <h2><structname>pg_db_role_setting</structname></h2>\n\n  <indexterm zone=\"catalog-pg-db-role-setting\">   <primary>pg_db_role_setting</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_db_role_setting</structname> records the default\n   values that have been set for run-time configuration variables,\n   for each role and database combination.\n  </para>\n\n  <para>   Unlike most system catalogs, <structname>pg_db_role_setting</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_db_role_setting</structname> per cluster, not\n   one per database.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "setdatabase": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-database\"><structname>pg_database</structname></link>.oid</literal>",
    "details": "The OID of the database the setting is applicable to, or zero if not database-specific"
   },
   "setrole": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "The OID of the role the setting is applicable to, or zero if not role-specific"
   },
   "setconfig": {
    "type": "text[]",
    "ref": "",
    "details": "Defaults for run-time configuration variables"
   }
  }
 },
 "catalog-pg-default-acl": {
  "doc": "  <h2><structname>pg_default_acl</structname></h2>\n\n  <indexterm zone=\"catalog-pg-default-acl\">   <primary>pg_default_acl</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_default_acl</structname> stores initial\n   privileges to be assigned to newly created objects.\n  </para>\n\n  \n\n  <para>   A <structname>pg_default_acl</structname> entry shows the initial privileges to\n   be assigned to an object belonging to the indicated user.  There are\n   currently two types of entry: <quote>global</quote> entries with\n   <structfield>defaclnamespace</structfield> = 0, and <quote>per-schema</quote> entries\n   that reference a particular schema.  If a global entry is present then\n   it <emphasis>overrides</emphasis> the normal hard-wired default privileges\n   for the object type.  A per-schema entry, if present, represents privileges\n   to be <emphasis>added to</emphasis> the global or hard-wired default privileges.\n  </para>\n\n  <para>   Note that when an ACL entry in another catalog is null, it is taken\n   to represent the hard-wired default privileges for its object,\n   <emphasis>not</emphasis> whatever might be in <structname>pg_default_acl</structname>\n   at the moment.  <structname>pg_default_acl</structname> is only consulted during\n   object creation.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "defaclrole": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "The OID of the role associated with this entry"
   },
   "defaclnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "The OID of the namespace associated with this entry,\n       or 0 if none"
   },
   "defaclobjtype": {
    "type": "char",
    "ref": "",
    "details": "       Type of object this entry is for:\n       <literal>r</literal> = relation (table, view),\n       <literal>S</literal> = sequence,\n       <literal>f</literal> = function,\n       <literal>T</literal> = type\n      "
   },
   "defaclacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges that this type of object should have on creation\n      "
   }
  }
 },
 "catalog-pg-depend": {
  "doc": "  <h2><structname>pg_depend</structname></h2>\n\n  <indexterm zone=\"catalog-pg-depend\">   <primary>pg_depend</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_depend</structname> records the dependency\n   relationships between database objects.  This information allows\n   <command>DROP</command> commands to find which other objects must be dropped\n   by <command>DROP CASCADE</command> or prevent dropping in the <command>DROP\n   RESTRICT</command> case.\n  </para>\n\n  <para>   See also <link linkend=\"catalog-pg-shdepend\"><structname>pg_shdepend</structname></link>,\n   which performs a similar function for dependencies involving objects\n   that are shared across a database cluster.\n  </para>\n\n  \n\n  <para>   In all cases, a <structname>pg_depend</structname> entry indicates that the\n   referenced object cannot be dropped without also dropping the dependent\n   object.  However, there are several subflavors identified by\n   <structfield>deptype</structfield>:\n\n   <variablelist>    <varlistentry>     <term><symbol>DEPENDENCY_NORMAL</symbol> (<literal>n</literal>)</term>\n     <listitem>      <para>       A normal relationship between separately-created objects.  The\n       dependent object can be dropped without affecting the\n       referenced object.  The referenced object can only be dropped\n       by specifying <literal>CASCADE</literal>, in which case the dependent\n       object is dropped, too.  Example: a table column has a normal\n       dependency on its data type.\n      </para>\n     </listitem>\n    </varlistentry>\n\n    <varlistentry>     <term><symbol>DEPENDENCY_AUTO</symbol> (<literal>a</literal>)</term>\n     <listitem>      <para>       The dependent object can be dropped separately from the\n       referenced object, and should be automatically dropped\n       (regardless of <literal>RESTRICT</literal> or <literal>CASCADE</literal>\n       mode) if the referenced object is dropped.  Example: a named\n       constraint on a table is made autodependent on the table, so\n       that it will go away if the table is dropped.\n      </para>\n     </listitem>\n    </varlistentry>\n\n    <varlistentry>     <term><symbol>DEPENDENCY_INTERNAL</symbol> (<literal>i</literal>)</term>\n     <listitem>      <para>       The dependent object was created as part of creation of the\n       referenced object, and is really just a part of its internal\n       implementation.  A <command>DROP</command> of the dependent object\n       will be disallowed outright (we'll tell the user to issue a\n       <command>DROP</command> against the referenced object, instead).  A\n       <command>DROP</command> of the referenced object will be propagated\n       through to drop the dependent object whether\n       <command>CASCADE</command> is specified or not.  Example: a trigger\n       that's created to enforce a foreign-key constraint is made\n       internally dependent on the constraint's\n       <structname>pg_constraint</structname> entry.\n      </para>\n     </listitem>\n    </varlistentry>\n\n    <varlistentry>     <term><symbol>DEPENDENCY_EXTENSION</symbol> (<literal>e</literal>)</term>\n     <listitem>      <para>       The dependent object is a member of the <firstterm>extension</firstterm> that is\n       the referenced object (see\n       <link linkend=\"catalog-pg-extension\"><structname>pg_extension</structname></link>).\n       The dependent object can be dropped only via\n       <command>DROP EXTENSION</command> on the referenced object.  Functionally\n       this dependency type acts the same as an internal dependency, but\n       it's kept separate for clarity and to simplify <application>pg_dump</application>.\n      </para>\n     </listitem>\n    </varlistentry>\n\n    <varlistentry>     <term><symbol>DEPENDENCY_AUTO_EXTENSION</symbol> (<literal>x</literal>)</term>\n     <listitem>      <para>       The dependent object is not a member of the extension that is the\n       referenced object (and so should not be ignored by pg_dump), but\n       cannot function without it and should be dropped when the\n       extension itself is. The dependent object may be dropped on its\n       own as well.\n      </para>\n     </listitem>\n    </varlistentry>\n\n    <varlistentry>     <term><symbol>DEPENDENCY_PIN</symbol> (<literal>p</literal>)</term>\n     <listitem>      <para>       There is no dependent object; this type of entry is a signal\n       that the system itself depends on the referenced object, and so\n       that object must never be deleted.  Entries of this type are\n       created only by <command>initdb</command>.  The columns for the\n       dependent object contain zeroes.\n      </para>\n     </listitem>\n    </varlistentry>\n   </variablelist>\n\n   Other dependency flavors might be needed in future.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "classid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog the dependent object is in"
   },
   "objid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the specific dependent object"
   },
   "objsubid": {
    "type": "int4",
    "ref": "",
    "details": "       For a table column, this is the column number (the\n       <structfield>objid</structfield> and <structfield>classid</structfield> refer to the\n       table itself).  For all other object types, this column is\n       zero.\n      "
   },
   "refclassid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog the referenced object is in"
   },
   "refobjid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the specific referenced object"
   },
   "refobjsubid": {
    "type": "int4",
    "ref": "",
    "details": "       For a table column, this is the column number (the\n       <structfield>refobjid</structfield> and <structfield>refclassid</structfield> refer\n       to the table itself).  For all other object types, this column\n       is zero.\n      "
   },
   "deptype": {
    "type": "char",
    "ref": "",
    "details": "       A code defining the specific semantics of this dependency relationship; see text\n      "
   }
  }
 },
 "catalog-pg-description": {
  "doc": "  <h2><structname>pg_description</structname></h2>\n\n  <indexterm zone=\"catalog-pg-description\">   <primary>pg_description</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_description</structname> stores optional descriptions\n   (comments) for each database object.  Descriptions can be manipulated\n   with the <xref linkend=\"sql-comment\"> command and viewed with\n   <application>psql</application>'s <literal>\\d</literal> commands.\n   Descriptions of many built-in system objects are provided in the initial\n   contents of <structname>pg_description</structname>.\n  </xref></para>\n\n  <para>   See also <link linkend=\"catalog-pg-shdescription\"><structname>pg_shdescription</structname></link>,\n   which performs a similar function for descriptions involving objects that\n   are shared across a database cluster.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "objoid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the object this description pertains to"
   },
   "classoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog this object appears in"
   },
   "objsubid": {
    "type": "int4",
    "ref": "",
    "details": "       For a comment on a table column, this is the column number (the\n       <structfield>objoid</structfield> and <structfield>classoid</structfield> refer to\n       the table itself).  For all other object types, this column is\n       zero.\n      "
   },
   "description": {
    "type": "text",
    "ref": "",
    "details": "Arbitrary text that serves as the description of this object"
   }
  }
 },
 "catalog-pg-enum": {
  "doc": "  <h2><structname>pg_enum</structname></h2>\n\n  <indexterm zone=\"catalog-pg-enum\">   <primary>pg_enum</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_enum</structname> catalog contains entries\n   showing the values and labels for each enum type. The\n   internal representation of a given enum value is actually the OID\n   of its associated row in <structname>pg_enum</structname>.\n  </para>\n\n  \n\n  <para>   The OIDs for <structname>pg_enum</structname> rows follow a special\n   rule: even-numbered OIDs are guaranteed to be ordered in the same way\n   as the sort ordering of their enum type.  That is, if two even OIDs\n   belong to the same enum type, the smaller OID must have the smaller\n   <structfield>enumsortorder</structfield> value.  Odd-numbered OID values\n   need bear no relationship to the sort order.  This rule allows the\n   enum comparison routines to avoid catalog lookups in many common cases.\n   The routines that create and alter enum types attempt to assign even\n   OIDs to enum values whenever possible.\n  </para>\n\n  <para>   When an enum type is created, its members are assigned sort-order\n   positions 1..<replaceable>n</replaceable>.  But members added later might be given\n   negative or fractional values of <structfield>enumsortorder</structfield>.\n   The only requirement on these values is that they be correctly\n   ordered and unique within each enum type.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "enumtypid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "The OID of the <structname>pg_type</structname> entry owning this enum value"
   },
   "enumsortorder": {
    "type": "float4",
    "ref": "",
    "details": "The sort position of this enum value within its enum type"
   },
   "enumlabel": {
    "type": "name",
    "ref": "",
    "details": "The textual label for this enum value"
   }
  }
 },
 "catalog-pg-event-trigger": {
  "doc": "  <h2><structname>pg_event_trigger</structname></h2>\n\n  <indexterm zone=\"catalog-pg-event-trigger\">   <primary>pg_event_trigger</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_event_trigger</structname> stores event triggers.\n   See <xref linkend=\"event-triggers\"> for more information.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "evtname": {
    "type": "name",
    "ref": "",
    "details": "Trigger name (must be unique)"
   },
   "evtevent": {
    "type": "name",
    "ref": "",
    "details": "Identifies the event for which this trigger fires"
   },
   "evtowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the event trigger"
   },
   "evtfoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "The function to be called"
   },
   "evtenabled": {
    "type": "char",
    "ref": "",
    "details": "       Controls in which <xref linkend=\"guc-session-replication-role\"> modes\n       the event trigger fires.\n       <literal>O</literal> = trigger fires in <quote>origin</quote> and <quote>local</quote> modes,\n       <literal>D</literal> = trigger is disabled,\n       <literal>R</literal> = trigger fires in <quote>replica</quote> mode,\n       <literal>A</literal> = trigger fires always.\n      </xref>"
   },
   "evttags": {
    "type": "text[]",
    "ref": "",
    "details": "        Command tags for which this trigger will fire.  If NULL, the firing\n        of this trigger is not restricted on the basis of the command tag.\n      "
   }
  }
 },
 "catalog-pg-extension": {
  "doc": "  <h2><structname>pg_extension</structname></h2>\n\n  <indexterm zone=\"catalog-pg-extension\">   <primary>pg_extension</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_extension</structname> stores information\n   about the installed extensions.  See <xref linkend=\"extend-extensions\">   for details about extensions.\n  </xref></para>\n\n  \n\n  <para>   Note that unlike most catalogs with a <quote>namespace</quote> column,\n   <structfield>extnamespace</structfield> is not meant to imply\n   that the extension belongs to that schema.  Extension names are never\n   schema-qualified.  Rather, <structfield>extnamespace</structfield>\n   indicates the schema that contains most or all of the extension's\n   objects.  If <structfield>extrelocatable</structfield> is true, then\n   this schema must in fact contain all schema-qualifiable objects\n   belonging to the extension.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "extname": {
    "type": "name",
    "ref": "",
    "details": "Name of the extension"
   },
   "extowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the extension"
   },
   "extnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "Schema containing the extension's exported objects"
   },
   "extrelocatable": {
    "type": "bool",
    "ref": "",
    "details": "True if extension can be relocated to another schema"
   },
   "extversion": {
    "type": "text",
    "ref": "",
    "details": "Version name for the extension"
   },
   "extconfig": {
    "type": "oid[]",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "Array of <type>regclass</type> OIDs for the extension's configuration\n       table(s), or <literal>NULL</literal> if none"
   },
   "extcondition": {
    "type": "text[]",
    "ref": "",
    "details": "Array of <literal>WHERE</literal>-clause filter conditions for the\n       extension's configuration table(s), or <literal>NULL</literal> if none"
   }
  }
 },
 "catalog-pg-foreign-data-wrapper": {
  "doc": "  <h2><structname>pg_foreign_data_wrapper</structname></h2>\n\n  <indexterm zone=\"catalog-pg-foreign-data-wrapper\">   <primary>pg_foreign_data_wrapper</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_foreign_data_wrapper</structname> stores\n   foreign-data wrapper definitions.  A foreign-data wrapper is the\n   mechanism by which external data, residing on foreign servers, is\n   accessed.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "fdwname": {
    "type": "name",
    "ref": "",
    "details": "Name of the foreign-data wrapper"
   },
   "fdwowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the foreign-data wrapper"
   },
   "fdwhandler": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       References a handler function that is responsible for\n       supplying execution routines for the foreign-data wrapper.\n       Zero if no handler is provided\n      "
   },
   "fdwvalidator": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       References a validator function that is responsible for\n       checking the validity of the options given to the\n       foreign-data wrapper, as well as options for foreign servers and user\n       mappings using the foreign-data wrapper.  Zero if no validator\n       is provided\n      "
   },
   "fdwacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   },
   "fdwoptions": {
    "type": "text[]",
    "ref": "",
    "details": "       Foreign-data wrapper specific options, as <quote>keyword=value</quote> strings\n      "
   }
  }
 },
 "catalog-pg-foreign-server": {
  "doc": "  <h2><structname>pg_foreign_server</structname></h2>\n\n  <indexterm zone=\"catalog-pg-foreign-server\">   <primary>pg_foreign_server</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_foreign_server</structname> stores\n   foreign server definitions.  A foreign server describes a source\n   of external data, such as a remote server.  Foreign\n   servers are accessed via foreign-data wrappers.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "srvname": {
    "type": "name",
    "ref": "",
    "details": "Name of the foreign server"
   },
   "srvowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the foreign server"
   },
   "srvfdw": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-foreign-data-wrapper\"><structname>pg_foreign_data_wrapper</structname></link>.oid</literal>",
    "details": "OID of the foreign-data wrapper of this foreign server"
   },
   "srvtype": {
    "type": "text",
    "ref": "",
    "details": "Type of the server (optional)"
   },
   "srvversion": {
    "type": "text",
    "ref": "",
    "details": "Version of the server (optional)"
   },
   "srvacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   },
   "srvoptions": {
    "type": "text[]",
    "ref": "",
    "details": "       Foreign server specific options, as <quote>keyword=value</quote> strings\n      "
   }
  }
 },
 "catalog-pg-foreign-table": {
  "doc": "  <h2><structname>pg_foreign_table</structname></h2>\n\n  <indexterm zone=\"catalog-pg-foreign-table\">   <primary>pg_foreign_table</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_foreign_table</structname> contains\n   auxiliary information about foreign tables.  A foreign table is\n   primarily represented by a <structname>pg_class</structname> entry,\n   just like a regular table.  Its <structname>pg_foreign_table</structname>\n   entry contains the information that is pertinent only to foreign tables\n   and not any other kind of relation.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "ftrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "OID of the <structname>pg_class</structname> entry for this foreign table"
   },
   "ftserver": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-foreign-server\"><structname>pg_foreign_server</structname></link>.oid</literal>",
    "details": "OID of the foreign server for this foreign table"
   },
   "ftoptions": {
    "type": "text[]",
    "ref": "",
    "details": "       Foreign table options, as <quote>keyword=value</quote> strings\n      "
   }
  }
 },
 "catalog-pg-index": {
  "doc": "  <h2><structname>pg_index</structname></h2>\n\n  <indexterm zone=\"catalog-pg-index\">   <primary>pg_index</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_index</structname> contains part of the information\n   about indexes.  The rest is mostly in\n   <structname>pg_class</structname>.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "indexrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the <structname>pg_class</structname> entry for this index"
   },
   "indrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the <structname>pg_class</structname> entry for the table this index is for"
   },
   "indnatts": {
    "type": "int2",
    "ref": "",
    "details": "The number of columns in the index (duplicates\n      <literal>pg_class.relnatts</literal>)"
   },
   "indisunique": {
    "type": "bool",
    "ref": "",
    "details": "If true, this is a unique index"
   },
   "indisprimary": {
    "type": "bool",
    "ref": "",
    "details": "If true, this index represents the primary key of the table\n      (<structfield>indisunique</structfield> should always be true when this is true)"
   },
   "indisexclusion": {
    "type": "bool",
    "ref": "",
    "details": "If true, this index supports an exclusion constraint"
   },
   "indimmediate": {
    "type": "bool",
    "ref": "",
    "details": "If true, the uniqueness check is enforced immediately on\n       insertion\n       (irrelevant if <structfield>indisunique</structfield> is not true)"
   },
   "indisclustered": {
    "type": "bool",
    "ref": "",
    "details": "If true, the table was last clustered on this index"
   },
   "indisvalid": {
    "type": "bool",
    "ref": "",
    "details": "       If true, the index is currently valid for queries.  False means the\n       index is possibly incomplete: it must still be modified by\n       <command>INSERT</command>/<command>UPDATE</command> operations, but it cannot safely\n       be used for queries. If it is unique, the uniqueness property is not\n       guaranteed true either.\n      "
   },
   "indcheckxmin": {
    "type": "bool",
    "ref": "",
    "details": "       If true, queries must not use the index until the <structfield>xmin</structfield>\n       of this <structname>pg_index</structname> row is below their <symbol>TransactionXmin</symbol>\n       event horizon, because the table may contain broken HOT chains with\n       incompatible rows that they can see\n      "
   },
   "indisready": {
    "type": "bool",
    "ref": "",
    "details": "       If true, the index is currently ready for inserts.  False means the\n       index must be ignored by <command>INSERT</command>/<command>UPDATE</command>\n       operations.\n      "
   },
   "indislive": {
    "type": "bool",
    "ref": "",
    "details": "       If false, the index is in process of being dropped, and should be\n       ignored for all purposes (including HOT-safety decisions)\n      "
   },
   "indisreplident": {
    "type": "bool",
    "ref": "",
    "details": "       If true this index has been chosen as <quote>replica identity</quote>\n       using <command>ALTER TABLE ... REPLICA IDENTITY USING INDEX\n       ...</command>\n      "
   },
   "indkey": {
    "type": "int2vector",
    "ref": "<literal><link linkend=\"catalog-pg-attribute\"><structname>pg_attribute</structname></link>.attnum</literal>",
    "details": "       This is an array of <structfield>indnatts</structfield> values that\n       indicate which table columns this index indexes.  For example a value\n       of <literal>1 3</literal> would mean that the first and the third table\n       columns make up the index key.  A zero in this array indicates that the\n       corresponding index attribute is an expression over the table columns,\n       rather than a simple column reference.\n      "
   },
   "indcollation": {
    "type": "oidvector",
    "ref": "<literal><link linkend=\"catalog-pg-collation\"><structname>pg_collation</structname></link>.oid</literal>",
    "details": "       For each column in the index key, this contains the OID of the\n       collation to use for the index.\n      "
   },
   "indclass": {
    "type": "oidvector",
    "ref": "<literal><link linkend=\"catalog-pg-opclass\"><structname>pg_opclass</structname></link>.oid</literal>",
    "details": "       For each column in the index key, this contains the OID of\n       the operator class to use.  See\n       <link linkend=\"catalog-pg-opclass\"><structname>pg_opclass</structname></link> for details.\n      "
   },
   "indoption": {
    "type": "int2vector",
    "ref": "",
    "details": "       This is an array of <structfield>indnatts</structfield> values that\n       store per-column flag bits.  The meaning of the bits is defined by\n       the index's access method.\n      "
   },
   "indexprs": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "       Expression trees (in <function>nodeToString()</function>\n       representation) for index attributes that are not simple column\n       references.  This is a list with one element for each zero\n       entry in <structfield>indkey</structfield>.  Null if all index attributes\n       are simple references.\n      "
   },
   "indpred": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "       Expression tree (in <function>nodeToString()</function>\n       representation) for partial index predicate.  Null if not a\n       partial index.\n      "
   }
  }
 },
 "catalog-pg-inherits": {
  "doc": "  <h2><structname>pg_inherits</structname></h2>\n\n  <indexterm zone=\"catalog-pg-inherits\">   <primary>pg_inherits</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_inherits</structname> records information about\n   table inheritance hierarchies.  There is one entry for each direct\n   child table in the database.  (Indirect inheritance can be determined\n   by following chains of entries.)\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "inhrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "       The OID of the child table\n      "
   },
   "inhparent": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "       The OID of the parent table\n      "
   },
   "inhseqno": {
    "type": "int4",
    "ref": "",
    "details": "       If there is more than one direct parent for a child table (multiple\n       inheritance), this number tells the order in which the\n       inherited columns are to be arranged.  The count starts at 1.\n      "
   }
  }
 },
 "catalog-pg-init-privs": {
  "doc": "  <h2><structname>pg_init_privs</structname></h2>\n\n  <indexterm zone=\"catalog-pg-init-privs\">   <primary>pg_init_privs</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_init_privs</structname> records information about\n   the initial privileges of objects in the system.  There is one entry\n   for each object in the database which has a non-default (non-NULL)\n   initial set of privileges.\n  </para>\n\n  <para>   Objects can have initial privileges either by having those privileges set\n   when the system is initialized (by <application>initdb</application>) or when the\n   object is created during a <command>CREATE EXTENSION</command> and the\n   extension script sets initial privileges using the <command>GRANT</command>\n   system.  Note that the system will automatically handle recording of the\n   privileges during the extension script and that extension authors need\n   only use the <command>GRANT</command> and <command>REVOKE</command>\n   statements in their script to have the privileges recorded.  The\n   <literal>privtype</literal> column indicates if the initial privilege was\n   set by <application>initdb</application> or during a\n   <command>CREATE EXTENSION</command> command.\n  </para>\n\n  <para>   Objects which have initial privileges set by <application>initdb</application> will\n   have entries where <literal>privtype</literal> is\n   <literal>'i'</literal>, while objects which have initial privileges set\n   by <command>CREATE EXTENSION</command> will have entries where\n   <literal>privtype</literal> is <literal>'e'</literal>.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "objoid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the specific object"
   },
   "classoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog the object is in"
   },
   "objsubid": {
    "type": "int4",
    "ref": "",
    "details": "       For a table column, this is the column number (the\n       <structfield>objoid</structfield> and <structfield>classoid</structfield> refer to the\n       table itself).  For all other object types, this column is\n       zero.\n      "
   },
   "privtype": {
    "type": "char",
    "ref": "",
    "details": "       A code defining the type of initial privilege of this object; see text\n      "
   },
   "initprivs": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       The initial access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   }
  }
 },
 "catalog-pg-language": {
  "doc": "  <h2><structname>pg_language</structname></h2>\n\n  <indexterm zone=\"catalog-pg-language\">   <primary>pg_language</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_language</structname> registers\n   languages in which you can write functions or stored procedures.\n   See <xref linkend=\"sql-createlanguage\">   and <xref linkend=\"xplang\"> for more information about language handlers.\n  </xref></xref></para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "lanname": {
    "type": "name",
    "ref": "",
    "details": "Name of the language"
   },
   "lanowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the language"
   },
   "lanispl": {
    "type": "bool",
    "ref": "",
    "details": "       This is false for internal languages (such as\n       <acronym>SQL</acronym>) and true for user-defined languages.\n       Currently, <application>pg_dump</application> still uses this\n       to determine which languages need to be dumped, but this might be\n       replaced by a different mechanism in the future.\n      "
   },
   "lanpltrusted": {
    "type": "bool",
    "ref": "",
    "details": "       True if this is a trusted language, which means that it is believed\n       not to grant access to anything outside the normal SQL execution\n       environment.  Only superusers can create functions in untrusted\n       languages.\n      "
   },
   "lanplcallfoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       For noninternal languages this references the language\n       handler, which is a special function that is responsible for\n       executing all functions that are written in the particular\n       language\n      "
   },
   "laninline": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       This references a function that is responsible for executing\n       <quote>inline</quote> anonymous code blocks\n       (<xref linkend=\"sql-do\"> blocks).\n       Zero if inline blocks are not supported.\n      </xref>"
   },
   "lanvalidator": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       This references a language validator function that is responsible\n       for checking the syntax and validity of new functions when they\n       are created.  Zero if no validator is provided.\n      "
   },
   "lanacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   }
  }
 },
 "catalog-pg-largeobject": {
  "doc": "  <h2><structname>pg_largeobject</structname></h2>\n\n  <indexterm zone=\"catalog-pg-largeobject\">   <primary>pg_largeobject</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_largeobject</structname> holds the data making up\n   <quote>large objects</quote>.  A large object is identified by an OID\n   assigned when it is created.  Each large object is broken into\n   segments or <quote>pages</quote> small enough to be conveniently stored as rows\n   in <structname>pg_largeobject</structname>.\n   The amount of data per page is defined to be <symbol>LOBLKSIZE</symbol> (which is currently\n   <literal>BLCKSZ/4</literal>, or typically 2 kB).\n  </para>\n\n  <para>   Prior to <productname>PostgreSQL</productname> 9.0, there was no permission structure\n   associated with large objects.  As a result,\n   <structname>pg_largeobject</structname> was publicly readable and could be\n   used to obtain the OIDs (and contents) of all large objects in the system.\n   This is no longer the case; use\n   <link linkend=\"catalog-pg-largeobject-metadata\"><structname>pg_largeobject_metadata</structname></link>\n   to obtain a list of large object OIDs.\n  </para>\n\n  \n\n  <para>   Each row of <structname>pg_largeobject</structname> holds data\n   for one page of a large object, beginning at\n   byte offset (<literal>pageno * LOBLKSIZE</literal>) within the object.  The implementation\n   allows sparse storage: pages might be missing, and might be shorter than\n   <literal>LOBLKSIZE</literal> bytes even if they are not the last page of the object.\n   Missing regions within a large object read as zeroes.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "loid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-largeobject-metadata\"><structname>pg_largeobject_metadata</structname></link>.oid</literal>",
    "details": "Identifier of the large object that includes this page"
   },
   "pageno": {
    "type": "int4",
    "ref": "",
    "details": "Page number of this page within its large object\n      (counting from zero)"
   },
   "data": {
    "type": "bytea",
    "ref": "",
    "details": "       Actual data stored in the large object.\n       This will never be more than <symbol>LOBLKSIZE</symbol> bytes and might be less.\n      "
   }
  }
 },
 "catalog-pg-largeobject-metadata": {
  "doc": "  <h2><structname>pg_largeobject_metadata</structname></h2>\n\n  <indexterm zone=\"catalog-pg-largeobject-metadata\">   <primary>pg_largeobject_metadata</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_largeobject_metadata</structname>\n   holds metadata associated with large objects.  The actual large object\n   data is stored in\n   <link linkend=\"catalog-pg-largeobject\"><structname>pg_largeobject</structname></link>.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "lomowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the large object"
   },
   "lomacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   }
  }
 },
 "catalog-pg-namespace": {
  "doc": "  <h2><structname>pg_namespace</structname></h2>\n\n  <indexterm zone=\"catalog-pg-namespace\">   <primary>pg_namespace</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_namespace</structname> stores namespaces.\n   A namespace is the structure underlying SQL schemas: each namespace\n   can have a separate collection of relations, types, etc. without name\n   conflicts.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "nspname": {
    "type": "name",
    "ref": "",
    "details": "Name of the namespace"
   },
   "nspowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the namespace"
   },
   "nspacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   }
  }
 },
 "catalog-pg-opclass": {
  "doc": "  <h2><structname>pg_opclass</structname></h2>\n\n  <indexterm zone=\"catalog-pg-opclass\">   <primary>pg_opclass</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_opclass</structname> defines\n   index access method operator classes.  Each operator class defines\n   semantics for index columns of a particular data type and a particular\n   index access method.  An operator class essentially specifies that a\n   particular operator family is applicable to a particular indexable column\n   data type.  The set of operators from the family that are actually usable\n   with the indexed column are whichever ones accept the column's data type\n   as their left-hand input.\n  </para>\n\n  <para>   Operator classes are described at length in <xref linkend=\"xindex\">.\n  </xref></para>\n\n  \n\n  <para>   An operator class's <structfield>opcmethod</structfield> must match the\n   <structname>opfmethod</structname> of its containing operator family.\n   Also, there must be no more than one <structname>pg_opclass</structname>\n   row having <structname>opcdefault</structname> true for any given combination of\n   <structname>opcmethod</structname> and <structname>opcintype</structname>.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "opcmethod": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-am\"><structname>pg_am</structname></link>.oid</literal>",
    "details": "Index access method operator class is for"
   },
   "opcname": {
    "type": "name",
    "ref": "",
    "details": "Name of this operator class"
   },
   "opcnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "Namespace of this operator class"
   },
   "opcowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the operator class"
   },
   "opcfamily": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-opfamily\"><structname>pg_opfamily</structname></link>.oid</literal>",
    "details": "Operator family containing the operator class"
   },
   "opcintype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Data type that the operator class indexes"
   },
   "opcdefault": {
    "type": "bool",
    "ref": "",
    "details": "True if this operator class is the default for <structfield>opcintype</structfield>"
   },
   "opckeytype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Type of data stored in index, or zero if same as <structfield>opcintype</structfield>"
   }
  }
 },
 "catalog-pg-operator": {
  "doc": "  <h2><structname>pg_operator</structname></h2>\n\n  <indexterm zone=\"catalog-pg-operator\">   <primary>pg_operator</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_operator</structname> stores information about operators.\n   See <xref linkend=\"sql-createoperator\">   and <xref linkend=\"xoper\"> for more information.\n  </xref></xref></para>\n\n  \n\n  <para>   Unused column contain zeroes. For example, <structfield>oprleft</structfield>\n   is zero for a prefix operator.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "oprname": {
    "type": "name",
    "ref": "",
    "details": "Name of the operator"
   },
   "oprnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this operator\n      "
   },
   "oprowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the operator"
   },
   "oprkind": {
    "type": "char",
    "ref": "",
    "details": "       <literal>b</literal> = infix (<quote>both</quote>), <literal>l</literal> = prefix\n       (<quote>left</quote>), <literal>r</literal> = postfix (<quote>right</quote>)\n      "
   },
   "oprcanmerge": {
    "type": "bool",
    "ref": "",
    "details": "This operator supports merge joins"
   },
   "oprcanhash": {
    "type": "bool",
    "ref": "",
    "details": "This operator supports hash joins"
   },
   "oprleft": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Type of the left operand"
   },
   "oprright": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Type of the right operand"
   },
   "oprresult": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Type of the result"
   },
   "oprcom": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "Commutator of this operator, if any"
   },
   "oprnegate": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "Negator of this operator, if any"
   },
   "oprcode": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Function that implements this operator"
   },
   "oprrest": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Restriction selectivity estimation function for this operator"
   },
   "oprjoin": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Join selectivity estimation function for this operator"
   }
  }
 },
 "catalog-pg-opfamily": {
  "doc": "  <h2><structname>pg_opfamily</structname></h2>\n\n  <indexterm zone=\"catalog-pg-opfamily\">   <primary>pg_opfamily</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_opfamily</structname> defines operator families.\n   Each operator family is a collection of operators and associated\n   support routines that implement the semantics specified for a particular\n   index access method.  Furthermore, the operators in a family are all\n   <quote>compatible</quote>, in a way that is specified by the access method.\n   The operator family concept allows cross-data-type operators to be used\n   with indexes and to be reasoned about using knowledge of access method\n   semantics.\n  </para>\n\n  <para>   Operator families are described at length in <xref linkend=\"xindex\">.\n  </xref></para>\n\n  \n\n  <para>   The majority of the information defining an operator family is not in its\n   <structname>pg_opfamily</structname> row, but in the associated rows in\n   <link linkend=\"catalog-pg-amop\"><structname>pg_amop</structname></link>,\n   <link linkend=\"catalog-pg-amproc\"><structname>pg_amproc</structname></link>,\n   and\n   <link linkend=\"catalog-pg-opclass\"><structname>pg_opclass</structname></link>.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "opfmethod": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-am\"><structname>pg_am</structname></link>.oid</literal>",
    "details": "Index access method operator family is for"
   },
   "opfname": {
    "type": "name",
    "ref": "",
    "details": "Name of this operator family"
   },
   "opfnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "Namespace of this operator family"
   },
   "opfowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the operator family"
   }
  }
 },
 "catalog-pg-pltemplate": {
  "doc": "  <h2><structname>pg_pltemplate</structname></h2>\n\n  <indexterm zone=\"catalog-pg-pltemplate\">   <primary>pg_pltemplate</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_pltemplate</structname> stores\n   <quote>template</quote> information for procedural languages.\n   A template for a language allows the language to be created in a\n   particular database by a simple <command>CREATE LANGUAGE</command> command,\n   with no need to specify implementation details.\n  </para>\n\n  <para>   Unlike most system catalogs, <structname>pg_pltemplate</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_pltemplate</structname> per cluster, not\n   one per database.  This allows the information to be accessible in\n   each database as it is needed.\n  </para>\n\n  \n\n  <para>   There are not currently any commands that manipulate procedural language\n   templates; to change the built-in information, a superuser must modify\n   the table using ordinary <command>INSERT</command>, <command>DELETE</command>,\n   or <command>UPDATE</command> commands.\n  </para>\n\n  <note>   <para>    It is likely that <structname>pg_pltemplate</structname> will be removed in some\n    future release of <productname>PostgreSQL</productname>, in favor of\n    keeping this knowledge about procedural languages in their respective\n    extension installation scripts.\n   </para>\n  </note>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "tmplname": {
    "type": "name",
    "ref": "Name of the language this template is for",
    "details": null
   },
   "tmpltrusted": {
    "type": "boolean",
    "ref": "True if language is considered trusted",
    "details": null
   },
   "tmpldbacreate": {
    "type": "boolean",
    "ref": "True if language may be created by a database owner",
    "details": null
   },
   "tmplhandler": {
    "type": "text",
    "ref": "Name of call handler function",
    "details": null
   },
   "tmplinline": {
    "type": "text",
    "ref": "Name of anonymous-block handler function, or null if none",
    "details": null
   },
   "tmplvalidator": {
    "type": "text",
    "ref": "Name of validator function, or null if none",
    "details": null
   },
   "tmpllibrary": {
    "type": "text",
    "ref": "Path of shared library that implements language",
    "details": null
   },
   "tmplacl": {
    "type": "aclitem[]",
    "ref": "Access privileges for template (not actually used)",
    "details": null
   }
  }
 },
 "catalog-pg-policy": {
  "doc": "  <h2><structname>pg_policy</structname></h2>\n\n  <indexterm zone=\"catalog-pg-policy\">   <primary>pg_policy</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_policy</structname> stores row level\n   security policies for tables.  A policy includes the kind of\n   command that it applies to (possibly all commands), the roles that it\n   applies to, the expression to be added as a security-barrier\n   qualification to queries that include the table, and the expression\n   to be added as a <literal>WITH CHECK</literal> option for queries that attempt to\n   add new records to the table.\n  </para>\n\n  \n\n  <note>   <para>    Policies stored in <structname>pg_policy</structname> are applied only when\n    <structname>pg_class</structname>.<structfield>relrowsecurity</structfield> is set for\n    their table.\n   </para>\n  </note>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "polname": {
    "type": "name",
    "ref": "",
    "details": "The name of the policy"
   },
   "polrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The table to which the policy applies"
   },
   "polcmd": {
    "type": "char",
    "ref": "",
    "details": "The command type to which the policy is applied:\n       <literal>r</literal> for <command>SELECT</command>,\n       <literal>a</literal> for <command>INSERT</command>,\n       <literal>w</literal> for <command>UPDATE</command>,\n       <literal>d</literal> for <command>DELETE</command>,\n       or <literal>*</literal> for all"
   },
   "polroles": {
    "type": "oid[]",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "The roles to which the policy is applied"
   },
   "polqual": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "The expression tree to be added to the security barrier qualifications for queries that use the table"
   },
   "polwithcheck": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "The expression tree to be added to the WITH CHECK qualifications for queries that attempt to add rows to the table"
   }
  }
 },
 "catalog-pg-proc": {
  "doc": "  <h2><structname>pg_proc</structname></h2>\n\n  <indexterm zone=\"catalog-pg-proc\">   <primary>pg_proc</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_proc</structname> stores information about functions (or procedures).\n   See <xref linkend=\"sql-createfunction\">   and <xref linkend=\"xfunc\"> for more information.\n  </xref></xref></para>\n\n  <para>   The table contains data for aggregate functions as well as plain functions.\n   If <structfield>proisagg</structfield> is true, there should be a matching\n   row in <structfield>pg_aggregate</structfield>.\n  </para>\n\n  \n\n  <para>   For compiled functions, both built-in and dynamically loaded,\n   <structfield>prosrc</structfield> contains the function's C-language\n   name (link symbol).  For all other currently-known language types,\n   <structfield>prosrc</structfield> contains the function's source\n   text.  <structfield>probin</structfield> is unused except for\n   dynamically-loaded C functions, for which it gives the name of the\n   shared library file containing the function.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "proname": {
    "type": "name",
    "ref": "",
    "details": "Name of the function"
   },
   "pronamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this function\n      "
   },
   "proowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the function"
   },
   "prolang": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-language\"><structname>pg_language</structname></link>.oid</literal>",
    "details": "Implementation language or call interface of this function"
   },
   "procost": {
    "type": "float4",
    "ref": "",
    "details": "Estimated execution cost (in units of\n       <xref linkend=\"guc-cpu-operator-cost\">); if <structfield>proretset</structfield>,\n       this is cost per row returned</xref>"
   },
   "prorows": {
    "type": "float4",
    "ref": "",
    "details": "Estimated number of result rows (zero if not <structfield>proretset</structfield>)"
   },
   "provariadic": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Data type of the variadic array parameter's elements,\n       or zero if the function does not have a variadic parameter"
   },
   "protransform": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Calls to this function can be simplified by this other function\n       (see <xref linkend=\"xfunc-transform-functions\">)</xref>"
   },
   "proisagg": {
    "type": "bool",
    "ref": "",
    "details": "Function is an aggregate function"
   },
   "proiswindow": {
    "type": "bool",
    "ref": "",
    "details": "Function is a window function"
   },
   "prosecdef": {
    "type": "bool",
    "ref": "",
    "details": "Function is a security definer (i.e., a <quote>setuid</quote>\n      function)"
   },
   "proleakproof": {
    "type": "bool",
    "ref": "",
    "details": "       The function has no side effects.  No information about the\n       arguments is conveyed except via the return value.  Any function\n       that might throw an error depending on the values of its arguments\n       is not leak-proof.\n      "
   },
   "proisstrict": {
    "type": "bool",
    "ref": "",
    "details": "       Function returns null if any call argument is null.  In that\n       case the function won't actually be called at all.  Functions\n       that are not <quote>strict</quote> must be prepared to handle\n       null inputs.\n      "
   },
   "proretset": {
    "type": "bool",
    "ref": "",
    "details": "Function returns a set (i.e., multiple values of the specified\n      data type)"
   },
   "provolatile": {
    "type": "char",
    "ref": "",
    "details": "       <structfield>provolatile</structfield> tells whether the function's\n       result depends only on its input arguments, or is affected by outside\n       factors.\n       It is <literal>i</literal> for <quote>immutable</quote> functions,\n       which always deliver the same result for the same inputs.\n       It is <literal>s</literal> for <quote>stable</quote> functions,\n       whose results (for fixed inputs) do not change within a scan.\n       It is <literal>v</literal> for <quote>volatile</quote> functions,\n       whose results might change at any time.  (Use <literal>v</literal> also\n       for functions with side-effects, so that calls to them cannot get\n       optimized away.)\n      "
   },
   "proparallel": {
    "type": "char",
    "ref": "",
    "details": "       <structfield>proparallel</structfield> tells whether the function\n       can be safely run in parallel mode.\n       It is <literal>s</literal> for functions which are safe to run in\n       parallel mode without restriction.\n       It is <literal>r</literal> for functions which can be run in parallel\n       mode, but their execution is restricted to the parallel group leader;\n       parallel worker processes cannot invoke these functions.\n       It is <literal>u</literal> for functions which are unsafe in parallel\n       mode; the presence of such a function forces a serial execution plan.\n      "
   },
   "pronargs": {
    "type": "int2",
    "ref": "",
    "details": "Number of input arguments"
   },
   "pronargdefaults": {
    "type": "int2",
    "ref": "",
    "details": "Number of arguments that have defaults"
   },
   "prorettype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "Data type of the return value"
   },
   "proargtypes": {
    "type": "oidvector",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "       An array with the data types of the function arguments.  This includes\n       only input arguments (including <literal>INOUT</literal> and\n       <literal>VARIADIC</literal> arguments), and thus represents\n       the call signature of the function.\n      "
   },
   "proallargtypes": {
    "type": "oid[]",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "       An array with the data types of the function arguments.  This includes\n       all arguments (including <literal>OUT</literal> and\n       <literal>INOUT</literal> arguments); however, if all the\n       arguments are <literal>IN</literal> arguments, this field will be null.\n       Note that subscripting is 1-based, whereas for historical reasons\n       <structfield>proargtypes</structfield> is subscripted from 0.\n      "
   },
   "proargmodes": {
    "type": "char[]",
    "ref": "",
    "details": "        An array with the modes of the function arguments, encoded as\n        <literal>i</literal> for <literal>IN</literal> arguments,\n        <literal>o</literal> for <literal>OUT</literal> arguments,\n        <literal>b</literal> for <literal>INOUT</literal> arguments,\n        <literal>v</literal> for <literal>VARIADIC</literal> arguments,\n        <literal>t</literal> for <literal>TABLE</literal> arguments.\n        If all the arguments are <literal>IN</literal> arguments,\n        this field will be null.\n        Note that subscripts correspond to positions of\n        <structfield>proallargtypes</structfield> not <structfield>proargtypes</structfield>.\n      "
   },
   "proargnames": {
    "type": "text[]",
    "ref": "",
    "details": "        An array with the names of the function arguments.\n        Arguments without a name are set to empty strings in the array.\n        If none of the arguments have a name, this field will be null.\n        Note that subscripts correspond to positions of\n        <structfield>proallargtypes</structfield> not <structfield>proargtypes</structfield>.\n      "
   },
   "proargdefaults": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "       Expression trees (in <function>nodeToString()</function> representation)\n       for default values.  This is a list with\n       <structfield>pronargdefaults</structfield> elements, corresponding to the last\n       <replaceable>N</replaceable> <emphasis>input</emphasis> arguments (i.e., the last\n       <replaceable>N</replaceable> <structfield>proargtypes</structfield> positions).\n       If none of the arguments have defaults, this field will be null.\n      "
   },
   "protrftypes": {
    "type": "oid[]",
    "ref": "",
    "details": "       Data type OIDs for which to apply transforms.\n      "
   },
   "prosrc": {
    "type": "text",
    "ref": "",
    "details": "       This tells the function handler how to invoke the function.  It\n       might be the actual source code of the function for interpreted\n       languages, a link symbol, a file name, or just about anything\n       else, depending on the implementation language/call convention.\n      "
   },
   "probin": {
    "type": "text",
    "ref": "",
    "details": "       Additional information about how to invoke the function.\n       Again, the interpretation is language-specific.\n      "
   },
   "proconfig": {
    "type": "text[]",
    "ref": "",
    "details": "Function's local settings for run-time configuration variables"
   },
   "proacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   }
  }
 },
 "catalog-pg-range": {
  "doc": "  <h2><structname>pg_range</structname></h2>\n\n  <indexterm zone=\"catalog-pg-range\">   <primary>pg_range</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_range</structname> stores information about\n   range types.  This is in addition to the types' entries in\n   <link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.\n  </para>\n\n  \n\n  <para>   <structfield>rngsubopc</structfield> (plus <structfield>rngcollation</structfield>, if the\n   element type is collatable) determines the sort ordering used by the range\n   type.  <structfield>rngcanonical</structfield> is used when the element type is\n   discrete.  <structfield>rngsubdiff</structfield> is optional but should be supplied to\n   improve performance of GiST indexes on the range type.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "rngtypid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "OID of the range type"
   },
   "rngsubtype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "OID of the element type (subtype) of this range type"
   },
   "rngcollation": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-collation\"><structname>pg_collation</structname></link>.oid</literal>",
    "details": "OID of the collation used for range comparisons, or 0 if none"
   },
   "rngsubopc": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-opclass\"><structname>pg_opclass</structname></link>.oid</literal>",
    "details": "OID of the subtype's operator class used for range comparisons"
   },
   "rngcanonical": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the function to convert a range value into canonical form,\n      or 0 if none"
   },
   "rngsubdiff": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the function to return the difference between two element\n      values as <type>double precision</type>, or 0 if none"
   }
  }
 },
 "catalog-pg-rewrite": {
  "doc": "  <h2><structname>pg_rewrite</structname></h2>\n\n  <indexterm zone=\"catalog-pg-rewrite\">   <primary>pg_rewrite</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_rewrite</structname> stores rewrite rules for tables and views.\n  </para>\n\n  \n\n  <note>   <para>    <literal>pg_class.relhasrules</literal>\n    must be true if a table has any rules in this catalog.\n   </para>\n  </note>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "rulename": {
    "type": "name",
    "ref": "",
    "details": "Rule name"
   },
   "ev_class": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The table this rule is for"
   },
   "ev_type": {
    "type": "char",
    "ref": "",
    "details": "       Event type that the rule is for: 1 = <command>SELECT</command>, 2 =\n       <command>UPDATE</command>, 3 = <command>INSERT</command>, 4 =\n       <command>DELETE</command>\n      "
   },
   "ev_enabled": {
    "type": "char",
    "ref": "",
    "details": "       Controls in which <xref linkend=\"guc-session-replication-role\"> modes\n       the rule fires.\n       <literal>O</literal> = rule fires in <quote>origin</quote> and <quote>local</quote> modes,\n       <literal>D</literal> = rule is disabled,\n       <literal>R</literal> = rule fires in <quote>replica</quote> mode,\n       <literal>A</literal> = rule fires always.\n      </xref>"
   },
   "is_instead": {
    "type": "bool",
    "ref": "",
    "details": "True if the rule is an <literal>INSTEAD</literal> rule"
   },
   "ev_qual": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "       Expression tree (in the form of a\n       <function>nodeToString()</function> representation) for the\n       rule's qualifying condition\n      "
   },
   "ev_action": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "       Query tree (in the form of a\n       <function>nodeToString()</function> representation) for the\n       rule's action\n      "
   }
  }
 },
 "catalog-pg-replication-origin": {
  "doc": "  <h2><structname>pg_replication_origin</structname></h2>\n\n  <indexterm zone=\"catalog-pg-replication-origin\">   <primary>pg_replication_origin</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_replication_origin</structname> catalog contains\n   all replication origins created.  For more on replication origins\n   see <xref linkend=\"replication-origins\">.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "roident": {
    "type": "Oid",
    "ref": "",
    "details": "A unique, cluster-wide identifier for the replication\n      origin. Should never leave the system."
   },
   "roname": {
    "type": "text",
    "ref": "",
    "details": "The external, user defined, name of a replication\n      origin."
   }
  }
 },
 "catalog-pg-replication-origin-status": {
  "doc": "  <h2><structname>pg_replication_origin_status</structname></h2>\n\n  <indexterm zone=\"catalog-pg-replication-origin-status\">   <primary>pg_replication_origin_status</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_replication_origin_status</structname> view\n   contains information about how far replay for a certain origin has\n   progressed.  For more on replication origins\n   see <xref linkend=\"replication-origins\">.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "local_id": {
    "type": "Oid",
    "ref": "<literal><link linkend=\"catalog-pg-replication-origin\"><structname>pg_replication_origin</structname></link>.roident</literal>",
    "details": "internal node identifier"
   },
   "external_id": {
    "type": "text",
    "ref": "<literal><link linkend=\"catalog-pg-replication-origin\"><structname>pg_replication_origin</structname></link>.roname</literal>",
    "details": "external node identifier"
   },
   "remote_lsn": {
    "type": "pg_lsn",
    "ref": "",
    "details": "The origin node's LSN up to which data has been replicated."
   },
   "local_lsn": {
    "type": "pg_lsn",
    "ref": "",
    "details": "       This node's LSN at which <literal>remote_lsn</literal> has\n       been replicated. Used to flush commit records before persisting\n       data to disk when using asynchronous commits.\n      "
   }
  }
 },
 "catalog-pg-replication-slots": {
  "doc": "  <h2><structname>pg_replication_slots</structname></h2>\n\n  <indexterm zone=\"catalog-pg-replication-slots\">   <primary>pg_replication_slots</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_replication_slots</structname> view provides a listing\n   of all replication slots that currently exist on the database cluster,\n   along with their current state.\n  </para>\n\n  <para>   For more on replication slots,\n   see <xref linkend=\"streaming-replication-slots\"> and <xref linkend=\"logicaldecoding\">.\n  </xref></xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "slot_name": {
    "type": "name",
    "ref": "",
    "details": "A unique, cluster-wide identifier for the replication slot"
   },
   "plugin": {
    "type": "name",
    "ref": "",
    "details": "The base name of the shared object containing the output plugin this logical slot is using, or null for physical slots."
   },
   "slot_type": {
    "type": "text",
    "ref": "",
    "details": "The slot type - <literal>physical</literal> or <literal>logical</literal>"
   },
   "datoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-database\"><structname>pg_database</structname></link>.oid</literal>",
    "details": "The OID of the database this slot is associated with, or\n      null. Only logical slots have an associated database."
   },
   "database": {
    "type": "text",
    "ref": "<literal><link linkend=\"catalog-pg-database\"><structname>pg_database</structname></link>.datname</literal>",
    "details": "The name of the database this slot is associated with, or\n      null. Only logical slots have an associated database."
   },
   "active": {
    "type": "boolean",
    "ref": "",
    "details": "True if this slot is currently actively being used"
   },
   "active_pid": {
    "type": "integer",
    "ref": "",
    "details": "The process ID of the session using this slot if the slot\n       is currently actively being used. <literal>NULL</literal> if\n       inactive.\n      "
   },
   "xmin": {
    "type": "xid",
    "ref": "",
    "details": "The oldest transaction that this slot needs the database to\n      retain.  <literal>VACUUM</literal> cannot remove tuples deleted\n      by any later transaction.\n      "
   },
   "catalog_xmin": {
    "type": "xid",
    "ref": "",
    "details": "The oldest transaction affecting the system catalogs that this\n      slot needs the database to retain.  <literal>VACUUM</literal> cannot\n      remove catalog tuples deleted by any later transaction.\n      "
   },
   "restart_lsn": {
    "type": "pg_lsn",
    "ref": "",
    "details": "The address (<literal>LSN</literal>) of oldest WAL which still\n      might be required by the consumer of this slot and thus won't be\n      automatically removed during checkpoints.\n      "
   },
   "confirmed_flush_lsn": {
    "type": "pg_lsn",
    "ref": "",
    "details": "The address (<literal>LSN</literal>) up to which the logical\n      slot's consumer has confirmed receiving data. Data older than this is\n      not available anymore. <literal>NULL</literal> for physical slots.\n      "
   }
  }
 },
 "catalog-pg-seclabel": {
  "doc": "  <h2><structname>pg_seclabel</structname></h2>\n\n  <indexterm zone=\"catalog-pg-seclabel\">   <primary>pg_seclabel</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_seclabel</structname> stores security\n   labels on database objects.  Security labels can be manipulated\n   with the <xref linkend=\"sql-security-label\"> command.  For an easier\n   way to view security labels, see <xref linkend=\"view-pg-seclabels\">.\n  </xref></xref></para>\n\n  <para>   See also <link linkend=\"catalog-pg-shseclabel\"><structname>pg_shseclabel</structname></link>,\n   which performs a similar function for security labels of database objects\n   that are shared across a database cluster.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "objoid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the object this security label pertains to"
   },
   "classoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog this object appears in"
   },
   "objsubid": {
    "type": "int4",
    "ref": "",
    "details": "       For a security label on a table column, this is the column number (the\n       <structfield>objoid</structfield> and <structfield>classoid</structfield> refer to\n       the table itself).  For all other object types, this column is\n       zero.\n      "
   },
   "provider": {
    "type": "text",
    "ref": "",
    "details": "The label provider associated with this label."
   },
   "label": {
    "type": "text",
    "ref": "",
    "details": "The security label applied to this object."
   }
  }
 },
 "catalog-pg-shdepend": {
  "doc": "  <h2><structname>pg_shdepend</structname></h2>\n\n  <indexterm zone=\"catalog-pg-shdepend\">   <primary>pg_shdepend</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_shdepend</structname> records the\n   dependency relationships between database objects and shared objects,\n   such as roles.  This information allows\n   <productname>PostgreSQL</productname> to ensure that those objects are\n   unreferenced before attempting to delete them.\n  </para>\n\n  <para>   See also <link linkend=\"catalog-pg-depend\"><structname>pg_depend</structname></link>,\n   which performs a similar function for dependencies involving objects\n   within a single database.\n  </para>\n\n  <para>   Unlike most system catalogs, <structname>pg_shdepend</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_shdepend</structname> per cluster, not\n   one per database.\n  </para>\n\n  \n\n  <para>   In all cases, a <structname>pg_shdepend</structname> entry indicates that\n   the referenced object cannot be dropped without also dropping the dependent\n   object.  However, there are several subflavors identified by\n   <structfield>deptype</structfield>:\n\n   <variablelist>    <varlistentry>     <term><symbol>SHARED_DEPENDENCY_OWNER</symbol> (<literal>o</literal>)</term>\n     <listitem>      <para>       The referenced object (which must be a role) is the owner of the\n       dependent object.\n      </para>\n     </listitem>\n    </varlistentry>\n\n    <varlistentry>     <term><symbol>SHARED_DEPENDENCY_ACL</symbol> (<literal>a</literal>)</term>\n     <listitem>      <para>       The referenced object (which must be a role) is mentioned in the\n       ACL (access control list, i.e., privileges list) of the\n       dependent object.  (A <symbol>SHARED_DEPENDENCY_ACL</symbol> entry is\n       not made for the owner of the object, since the owner will have\n       a <symbol>SHARED_DEPENDENCY_OWNER</symbol> entry anyway.)\n      </para>\n     </listitem>\n    </varlistentry>\n\n    <varlistentry>     <term><symbol>SHARED_DEPENDENCY_POLICY</symbol> (<literal>r</literal>)</term>\n     <listitem>      <para>       The referenced object (which must be a role) is mentioned as the\n       target of a dependent policy object.\n      </para>\n     </listitem>\n    </varlistentry>\n\n    <varlistentry>     <term><symbol>SHARED_DEPENDENCY_PIN</symbol> (<literal>p</literal>)</term>\n     <listitem>      <para>       There is no dependent object; this type of entry is a signal\n       that the system itself depends on the referenced object, and so\n       that object must never be deleted.  Entries of this type are\n       created only by <command>initdb</command>.  The columns for the\n       dependent object contain zeroes.\n      </para>\n     </listitem>\n    </varlistentry>\n   </variablelist>\n\n   Other dependency flavors might be needed in future.  Note in particular\n   that the current definition only supports roles as referenced objects.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "dbid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-database\"><structname>pg_database</structname></link>.oid</literal>",
    "details": "The OID of the database the dependent object is in,\n       or zero for a shared object"
   },
   "classid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog the dependent object is in"
   },
   "objid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the specific dependent object"
   },
   "objsubid": {
    "type": "int4",
    "ref": "",
    "details": "       For a table column, this is the column number (the\n       <structfield>objid</structfield> and <structfield>classid</structfield> refer to the\n       table itself).  For all other object types, this column is zero.\n      "
   },
   "refclassid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog the referenced object is in\n       (must be a shared catalog)"
   },
   "refobjid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the specific referenced object"
   },
   "deptype": {
    "type": "char",
    "ref": "",
    "details": "       A code defining the specific semantics of this dependency relationship; see text\n      "
   }
  }
 },
 "catalog-pg-shdescription": {
  "doc": "  <h2><structname>pg_shdescription</structname></h2>\n\n  <indexterm zone=\"catalog-pg-shdescription\">   <primary>pg_shdescription</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_shdescription</structname> stores optional\n   descriptions (comments) for shared database objects.  Descriptions can be\n   manipulated with the <xref linkend=\"sql-comment\"> command and viewed with\n   <application>psql</application>'s <literal>\\d</literal> commands.\n  </xref></para>\n\n  <para>   See also <link linkend=\"catalog-pg-description\"><structname>pg_description</structname></link>,\n   which performs a similar function for descriptions involving objects\n   within a single database.\n  </para>\n\n  <para>   Unlike most system catalogs, <structname>pg_shdescription</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_shdescription</structname> per cluster, not\n   one per database.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "objoid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the object this description pertains to"
   },
   "classoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog this object appears in"
   },
   "description": {
    "type": "text",
    "ref": "",
    "details": "Arbitrary text that serves as the description of this object"
   }
  }
 },
 "catalog-pg-shseclabel": {
  "doc": "  <h2><structname>pg_shseclabel</structname></h2>\n\n  <indexterm zone=\"catalog-pg-shseclabel\">   <primary>pg_shseclabel</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_shseclabel</structname> stores security\n   labels on shared database objects.  Security labels can be manipulated\n   with the <xref linkend=\"sql-security-label\"> command.  For an easier\n   way to view security labels, see <xref linkend=\"view-pg-seclabels\">.\n  </xref></xref></para>\n\n  <para>   See also <link linkend=\"catalog-pg-seclabel\"><structname>pg_seclabel</structname></link>,\n   which performs a similar function for security labels involving objects\n   within a single database.\n  </para>\n\n  <para>   Unlike most system catalogs, <structname>pg_shseclabel</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_shseclabel</structname> per cluster, not\n   one per database.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "objoid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the object this security label pertains to"
   },
   "classoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog this object appears in"
   },
   "provider": {
    "type": "text",
    "ref": "",
    "details": "The label provider associated with this label."
   },
   "label": {
    "type": "text",
    "ref": "",
    "details": "The security label applied to this object."
   }
  }
 },
 "catalog-pg-statistic": {
  "doc": "  <h2><structname>pg_statistic</structname></h2>\n\n  <indexterm zone=\"catalog-pg-statistic\">   <primary>pg_statistic</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_statistic</structname> stores\n   statistical data about the contents of the database.  Entries are\n   created by <xref linkend=\"sql-analyze\">   and subsequently used by the query planner.  Note that all the\n   statistical data is inherently approximate, even assuming that it\n   is up-to-date.\n  </xref></para>\n\n  <para>   Normally there is one entry, with <structfield>stainherit</structfield> =\n   <literal>false</literal>, for each table column that has been analyzed.\n   If the table has inheritance children, a second entry with\n   <structfield>stainherit</structfield> = <literal>true</literal> is also created.  This row\n   represents the column's statistics over the inheritance tree, i.e.,\n   statistics for the data you'd see with\n   <literal>SELECT <replaceable>column</replaceable> FROM <replaceable>table</replaceable>*</literal>,\n   whereas the <structfield>stainherit</structfield> = <literal>false</literal> row represents\n   the results of\n   <literal>SELECT <replaceable>column</replaceable> FROM ONLY <replaceable>table</replaceable></literal>.\n  </para>\n\n  <para>   <structname>pg_statistic</structname> also stores statistical data about\n   the values of index expressions.  These are described as if they were\n   actual data columns; in particular, <structfield>starelid</structfield>\n   references the index.  No entry is made for an ordinary non-expression\n   index column, however, since it would be redundant with the entry\n   for the underlying table column.  Currently, entries for index expressions\n   always have <structfield>stainherit</structfield> = <literal>false</literal>.\n  </para>\n\n  <para>   Since different kinds of statistics might be appropriate for different\n   kinds of data, <structname>pg_statistic</structname> is designed not\n   to assume very much about what sort of statistics it stores.  Only\n   extremely general statistics (such as nullness) are given dedicated\n   columns in <structname>pg_statistic</structname>.  Everything else\n   is stored in <quote>slots</quote>, which are groups of associated columns\n   whose content is identified by a code number in one of the slot's columns.\n   For more information see\n   <filename>src/include/catalog/pg_statistic.h</filename>.\n  </para>\n\n  <para>   <structname>pg_statistic</structname> should not be readable by the\n   public, since even statistical information about a table's contents\n   might be considered sensitive.  (Example: minimum and maximum values\n   of a salary column might be quite interesting.)\n   <link linkend=\"view-pg-stats\"><structname>pg_stats</structname></link>\n   is a publicly readable view on\n   <structname>pg_statistic</structname> that only exposes information\n   about those tables that are readable by the current user.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "starelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The table or index that the described column belongs to"
   },
   "staattnum": {
    "type": "int2",
    "ref": "<literal><link linkend=\"catalog-pg-attribute\"><structname>pg_attribute</structname></link>.attnum</literal>",
    "details": "The number of the described column"
   },
   "stainherit": {
    "type": "bool",
    "ref": "",
    "details": "If true, the stats include inheritance child columns, not just the\n       values in the specified relation"
   },
   "stanullfrac": {
    "type": "float4",
    "ref": "",
    "details": "The fraction of the column's entries that are null"
   },
   "stawidth": {
    "type": "int4",
    "ref": "",
    "details": "The average stored width, in bytes, of nonnull entries"
   },
   "stadistinct": {
    "type": "float4",
    "ref": "",
    "details": "The number of distinct nonnull data values in the column.\n      A value greater than zero is the actual number of distinct values.\n      A value less than zero is the negative of a multiplier for the number\n      of rows in the table; for example, a column in which values appear about\n      twice on the average could be represented by\n      <structfield>stadistinct</structfield> = -0.5.\n      A zero value means the number of distinct values is unknown.\n      "
   },
   "stakind<replaceable>N</replaceable>": {
    "type": "int2",
    "ref": "",
    "details": "       A code number indicating the kind of statistics stored in the\n       <replaceable>N</replaceable>th <quote>slot</quote> of the\n       <structname>pg_statistic</structname> row.\n      "
   },
   "staop<replaceable>N</replaceable>": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-operator\"><structname>pg_operator</structname></link>.oid</literal>",
    "details": "       An operator used to derive the statistics stored in the\n       <replaceable>N</replaceable>th <quote>slot</quote>.  For example, a\n       histogram slot would show the <literal/> operator\n       that defines the sort order of the data.\n      "
   },
   "stanumbers<replaceable>N</replaceable>": {
    "type": "float4[]",
    "ref": "",
    "details": "       Numerical statistics of the appropriate kind for the\n       <replaceable>N</replaceable>th <quote>slot</quote>, or null if the slot\n       kind does not involve numerical values\n      "
   },
   "stavalues<replaceable>N</replaceable>": {
    "type": "anyarray",
    "ref": "",
    "details": "       Column data values of the appropriate kind for the\n       <replaceable>N</replaceable>th <quote>slot</quote>, or null if the slot\n       kind does not store any data values.  Each array's element\n       values are actually of the specific column's data type, or a related\n       type such as an array's element type, so there is no way to define\n       these columns' type more specifically than <type>anyarray</type>.\n      "
   }
  }
 },
 "catalog-pg-tablespace": {
  "doc": "  <h2><structname>pg_tablespace</structname></h2>\n\n  <indexterm zone=\"catalog-pg-tablespace\">   <primary>pg_tablespace</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_tablespace</structname> stores information\n   about the available tablespaces.  Tables can be placed in particular\n   tablespaces to aid administration of disk layout.\n  </para>\n\n  <para>   Unlike most system catalogs, <structname>pg_tablespace</structname>\n   is shared across all databases of a cluster: there is only one\n   copy of <structname>pg_tablespace</structname> per cluster, not\n   one per database.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "spcname": {
    "type": "name",
    "ref": "",
    "details": "Tablespace name"
   },
   "spcowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the tablespace, usually the user who created it"
   },
   "spcacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   },
   "spcoptions": {
    "type": "text[]",
    "ref": "",
    "details": "       Tablespace-level options, as <quote>keyword=value</quote> strings\n      "
   }
  }
 },
 "catalog-pg-transform": {
  "doc": "  <h2><structname>pg_transform</structname></h2>\n\n  <indexterm zone=\"catalog-pg-transform\">   <primary>pg_transform</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_transform</structname> stores information about\n   transforms, which are a mechanism to adapt data types to procedural\n   languages.  See <xref linkend=\"sql-createtransform\"> for more information.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "trftype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "OID of the data type this transform is for"
   },
   "trflang": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-language\"><structname>pg_language</structname></link>.oid</literal>",
    "details": "OID of the language this transform is for"
   },
   "trffromsql": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       The OID of the function to use when converting the data type for input\n       to the procedural language (e.g., function parameters).  Zero is stored\n       if this operation is not supported.\n      "
   },
   "trftosql": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "       The OID of the function to use when converting output from the\n       procedural language (e.g., return values) to the data type.  Zero is\n       stored if this operation is not supported.\n      "
   }
  }
 },
 "catalog-pg-trigger": {
  "doc": "  <h2><structname>pg_trigger</structname></h2>\n\n  <indexterm zone=\"catalog-pg-trigger\">   <primary>pg_trigger</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_trigger</structname> stores triggers on tables\n   and views.\n   See <xref linkend=\"sql-createtrigger\">   for more information.\n  </xref></para>\n\n  \n\n  <para>   Currently, column-specific triggering is supported only for\n   <literal>UPDATE</literal> events, and so <structfield>tgattr</structfield> is relevant\n   only for that event type.  <structfield>tgtype</structfield> might\n   contain bits for other event types as well, but those are presumed\n   to be table-wide regardless of what is in <structfield>tgattr</structfield>.\n  </para>\n\n  <note>   <para>    When <structfield>tgconstraint</structfield> is nonzero,\n    <structfield>tgconstrrelid</structfield>, <structfield>tgconstrindid</structfield>,\n    <structfield>tgdeferrable</structfield>, and <structfield>tginitdeferred</structfield> are\n    largely redundant with the referenced <structname>pg_constraint</structname> entry.\n    However, it is possible for a non-deferrable trigger to be associated\n    with a deferrable constraint: foreign key constraints can have some\n    deferrable and some non-deferrable triggers.\n   </para>\n  </note>\n\n  <note>   <para>    <literal>pg_class.relhastriggers</literal>\n    must be true if a relation has any triggers in this catalog.\n   </para>\n  </note>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "tgrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The table this trigger is on"
   },
   "tgname": {
    "type": "name",
    "ref": "",
    "details": "Trigger name (must be unique among triggers of same table)"
   },
   "tgfoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "The function to be called"
   },
   "tgtype": {
    "type": "int2",
    "ref": "",
    "details": "Bit mask identifying trigger firing conditions"
   },
   "tgenabled": {
    "type": "char",
    "ref": "",
    "details": "       Controls in which <xref linkend=\"guc-session-replication-role\"> modes\n       the trigger fires.\n       <literal>O</literal> = trigger fires in <quote>origin</quote> and <quote>local</quote> modes,\n       <literal>D</literal> = trigger is disabled,\n       <literal>R</literal> = trigger fires in <quote>replica</quote> mode,\n       <literal>A</literal> = trigger fires always.\n      </xref>"
   },
   "tgisinternal": {
    "type": "bool",
    "ref": "",
    "details": "True if trigger is internally generated (usually, to enforce\n       the constraint identified by <structfield>tgconstraint</structfield>)"
   },
   "tgconstrrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The table referenced by a referential integrity constraint"
   },
   "tgconstrindid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The index supporting a unique, primary key, referential integrity,\n       or exclusion constraint"
   },
   "tgconstraint": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-constraint\"><structname>pg_constraint</structname></link>.oid</literal>",
    "details": "The <structname>pg_constraint</structname> entry associated with the trigger, if any"
   },
   "tgdeferrable": {
    "type": "bool",
    "ref": "",
    "details": "True if constraint trigger is deferrable"
   },
   "tginitdeferred": {
    "type": "bool",
    "ref": "",
    "details": "True if constraint trigger is initially deferred"
   },
   "tgnargs": {
    "type": "int2",
    "ref": "",
    "details": "Number of argument strings passed to trigger function"
   },
   "tgattr": {
    "type": "int2vector",
    "ref": "<literal><link linkend=\"catalog-pg-attribute\"><structname>pg_attribute</structname></link>.attnum</literal>",
    "details": "Column numbers, if trigger is column-specific; otherwise an\n       empty array"
   },
   "tgargs": {
    "type": "bytea",
    "ref": "",
    "details": "Argument strings to pass to trigger, each NULL-terminated"
   },
   "tgqual": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "Expression tree (in <function>nodeToString()</function>\n       representation) for the trigger's <literal>WHEN</literal> condition, or null\n       if none"
   }
  }
 },
 "catalog-pg-ts-config": {
  "doc": "  <h2><structname>pg_ts_config</structname></h2>\n\n  <indexterm zone=\"catalog-pg-ts-config\">   <primary>pg_ts_config</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_ts_config</structname> catalog contains entries\n   representing text search configurations.  A configuration specifies\n   a particular text search parser and a list of dictionaries to use\n   for each of the parser's output token types.  The parser is shown\n   in the <structname>pg_ts_config</structname> entry, but the\n   token-to-dictionary mapping is defined by subsidiary entries in <link linkend=\"catalog-pg-ts-config-map\"><structname>pg_ts_config_map</structname></link>.\n  </para>\n\n  <para>   <productname>PostgreSQL</productname>'s text search features are\n   described at length in <xref linkend=\"textsearch\">.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "cfgname": {
    "type": "name",
    "ref": "",
    "details": "Text search configuration name"
   },
   "cfgnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this configuration\n      "
   },
   "cfgowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the configuration"
   },
   "cfgparser": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-ts-parser\"><structname>pg_ts_parser</structname></link>.oid</literal>",
    "details": "The OID of the text search parser for this configuration"
   }
  }
 },
 "catalog-pg-ts-config-map": {
  "doc": "  <h2><structname>pg_ts_config_map</structname></h2>\n\n  <indexterm zone=\"catalog-pg-ts-config-map\">   <primary>pg_ts_config_map</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_ts_config_map</structname> catalog contains entries\n   showing which text search dictionaries should be consulted, and in\n   what order, for each output token type of each text search configuration's\n   parser.\n  </para>\n\n  <para>   <productname>PostgreSQL</productname>'s text search features are\n   described at length in <xref linkend=\"textsearch\">.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "mapcfg": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-ts-config\"><structname>pg_ts_config</structname></link>.oid</literal>",
    "details": "The OID of the <structname>pg_ts_config</structname> entry owning this map entry"
   },
   "maptokentype": {
    "type": "integer",
    "ref": "",
    "details": "A token type emitted by the configuration's parser"
   },
   "mapseqno": {
    "type": "integer",
    "ref": "",
    "details": "Order in which to consult this entry (lower\n       <structfield>mapseqno</structfield>s first)"
   },
   "mapdict": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-ts-dict\"><structname>pg_ts_dict</structname></link>.oid</literal>",
    "details": "The OID of the text search dictionary to consult"
   }
  }
 },
 "catalog-pg-ts-dict": {
  "doc": "  <h2><structname>pg_ts_dict</structname></h2>\n\n  <indexterm zone=\"catalog-pg-ts-dict\">   <primary>pg_ts_dict</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_ts_dict</structname> catalog contains entries\n   defining text search dictionaries.  A dictionary depends on a text\n   search template, which specifies all the implementation functions\n   needed; the dictionary itself provides values for the user-settable\n   parameters supported by the template.  This division of labor allows\n   dictionaries to be created by unprivileged users.  The parameters\n   are specified by a text string <structfield>dictinitoption</structfield>,\n   whose format and meaning vary depending on the template.\n  </para>\n\n  <para>   <productname>PostgreSQL</productname>'s text search features are\n   described at length in <xref linkend=\"textsearch\">.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "dictname": {
    "type": "name",
    "ref": "",
    "details": "Text search dictionary name"
   },
   "dictnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this dictionary\n      "
   },
   "dictowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the dictionary"
   },
   "dicttemplate": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-ts-template\"><structname>pg_ts_template</structname></link>.oid</literal>",
    "details": "The OID of the text search template for this dictionary"
   },
   "dictinitoption": {
    "type": "text",
    "ref": "",
    "details": "Initialization option string for the template"
   }
  }
 },
 "catalog-pg-ts-parser": {
  "doc": "  <h2><structname>pg_ts_parser</structname></h2>\n\n  <indexterm zone=\"catalog-pg-ts-parser\">   <primary>pg_ts_parser</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_ts_parser</structname> catalog contains entries\n   defining text search parsers.  A parser is responsible for splitting\n   input text into lexemes and assigning a token type to each lexeme.\n   Since a parser must be implemented by C-language-level functions,\n   creation of new parsers is restricted to database superusers.\n  </para>\n\n  <para>   <productname>PostgreSQL</productname>'s text search features are\n   described at length in <xref linkend=\"textsearch\">.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "prsname": {
    "type": "name",
    "ref": "",
    "details": "Text search parser name"
   },
   "prsnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this parser\n      "
   },
   "prsstart": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the parser's startup function"
   },
   "prstoken": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the parser's next-token function"
   },
   "prsend": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the parser's shutdown function"
   },
   "prsheadline": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the parser's headline function"
   },
   "prslextype": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the parser's lextype function"
   }
  }
 },
 "catalog-pg-ts-template": {
  "doc": "  <h2><structname>pg_ts_template</structname></h2>\n\n  <indexterm zone=\"catalog-pg-ts-template\">   <primary>pg_ts_template</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_ts_template</structname> catalog contains entries\n   defining text search templates.  A template is the implementation\n   skeleton for a class of text search dictionaries.\n   Since a template must be implemented by C-language-level functions,\n   creation of new templates is restricted to database superusers.\n  </para>\n\n  <para>   <productname>PostgreSQL</productname>'s text search features are\n   described at length in <xref linkend=\"textsearch\">.\n  </xref></para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "tmplname": {
    "type": "name",
    "ref": "",
    "details": "Text search template name"
   },
   "tmplnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this template\n      "
   },
   "tmplinit": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the template's initialization function"
   },
   "tmpllexize": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "OID of the template's lexize function"
   }
  }
 },
 "catalog-pg-type": {
  "doc": "  <h2><structname>pg_type</structname></h2>\n\n  <indexterm zone=\"catalog-pg-type\">   <primary>pg_type</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_type</structname> stores information about data\n   types.  Base types and enum types (scalar types) are created with\n   <xref linkend=\"sql-createtype\">, and\n   domains with\n   <xref linkend=\"sql-createdomain\">.\n   A composite type is automatically created for each table in the database, to\n   represent the row structure of the table.  It is also possible to create\n   composite types with <command>CREATE TYPE AS</command>.\n  </xref></xref></para>\n\n  \n\n  <para>   <xref linkend=\"catalog-typcategory-table\"> lists the system-defined values\n   of <structfield>typcategory</structfield>.  Any future additions to this list will\n   also be upper-case ASCII letters.  All other ASCII characters are reserved\n   for user-defined categories.\n  </xref></para>\n\n  <table id=\"catalog-typcategory-table\">   <h2><structfield>typcategory</structfield> Codes</h2>\n\n   <tgroup cols=\"2\">    <thead>     <row>      <entry>Code</entry>\n      <entry>Category</entry>\n     </row>\n    </thead>\n\n    <tbody>     <row>      <entry><literal>A</literal></entry>\n      <entry>Array types</entry>\n     </row>\n     <row>      <entry><literal>B</literal></entry>\n      <entry>Boolean types</entry>\n     </row>\n     <row>      <entry><literal>C</literal></entry>\n      <entry>Composite types</entry>\n     </row>\n     <row>      <entry><literal>D</literal></entry>\n      <entry>Date/time types</entry>\n     </row>\n     <row>      <entry><literal>E</literal></entry>\n      <entry>Enum types</entry>\n     </row>\n     <row>      <entry><literal>G</literal></entry>\n      <entry>Geometric types</entry>\n     </row>\n     <row>      <entry><literal>I</literal></entry>\n      <entry>Network address types</entry>\n     </row>\n     <row>      <entry><literal>N</literal></entry>\n      <entry>Numeric types</entry>\n     </row>\n     <row>      <entry><literal>P</literal></entry>\n      <entry>Pseudo-types</entry>\n     </row>\n     <row>      <entry><literal>R</literal></entry>\n      <entry>Range types</entry>\n     </row>\n     <row>      <entry><literal>S</literal></entry>\n      <entry>String types</entry>\n     </row>\n     <row>      <entry><literal>T</literal></entry>\n      <entry>Timespan types</entry>\n     </row>\n     <row>      <entry><literal>U</literal></entry>\n      <entry>User-defined types</entry>\n     </row>\n     <row>      <entry><literal>V</literal></entry>\n      <entry>Bit-string types</entry>\n     </row>\n     <row>      <entry><literal>X</literal></entry>\n      <entry><type>unknown</type> type</entry>\n     </row>\n    </tbody>\n   </tgroup>\n  </table>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "typname": {
    "type": "name",
    "ref": "",
    "details": "Data type name"
   },
   "typnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace that contains this type\n      "
   },
   "typowner": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "Owner of the type"
   },
   "typlen": {
    "type": "int2",
    "ref": "",
    "details": "       For a fixed-size type, <structfield>typlen</structfield> is the number\n       of bytes in the internal representation of the type.  But for a\n       variable-length type, <structfield>typlen</structfield> is negative.\n       -1 indicates a <quote>varlena</quote> type (one that has a length word),\n       -2 indicates a null-terminated C string.\n      "
   },
   "typbyval": {
    "type": "bool",
    "ref": "",
    "details": "       <structfield>typbyval</structfield> determines whether internal\n       routines pass a value of this type by value or by reference.\n       <structfield>typbyval</structfield> had better be false if\n       <structfield>typlen</structfield> is not 1, 2, or 4 (or 8 on machines\n       where Datum is 8 bytes).\n       Variable-length types are always passed by reference. Note that\n       <structfield>typbyval</structfield> can be false even if the\n       length would allow pass-by-value.\n      "
   },
   "typtype": {
    "type": "char",
    "ref": "",
    "details": "       <structfield>typtype</structfield> is\n       <literal>b</literal> for a base type,\n       <literal>c</literal> for a composite type (e.g., a table's row type),\n       <literal>d</literal> for a domain,\n       <literal>e</literal> for an enum type,\n       <literal>p</literal> for a pseudo-type, or\n       <literal>r</literal> for a range type.\n       See also <structfield>typrelid</structfield> and\n       <structfield>typbasetype</structfield>.\n      "
   },
   "typcategory": {
    "type": "char",
    "ref": "",
    "details": "       <structfield>typcategory</structfield> is an arbitrary classification\n       of data types that is used by the parser to determine which implicit\n       casts should be <quote>preferred</quote>.\n       See <xref linkend=\"catalog-typcategory-table\">.\n      </xref>"
   },
   "typispreferred": {
    "type": "bool",
    "ref": "",
    "details": "       True if the type is a preferred cast target within its\n       <structfield>typcategory</structfield>\n      "
   },
   "typisdefined": {
    "type": "bool",
    "ref": "",
    "details": "       True if the type is defined, false if this is a placeholder\n       entry for a not-yet-defined type.  When\n       <structfield>typisdefined</structfield> is false, nothing\n       except the type name, namespace, and OID can be relied on.\n      "
   },
   "typdelim": {
    "type": "char",
    "ref": "",
    "details": "       Character that separates two values of this type when parsing\n       array input.  Note that the delimiter is associated with the array\n       element data type, not the array data type.\n      "
   },
   "typrelid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "       If this is a composite type (see\n       <structfield>typtype</structfield>), then this column points to\n       the <structname>pg_class</structname> entry that defines the\n       corresponding table.  (For a free-standing composite type, the\n       <structname>pg_class</structname> entry doesn't really represent\n       a table, but it is needed anyway for the type's\n       <structname>pg_attribute</structname> entries to link to.)\n       Zero for non-composite types.\n      "
   },
   "typelem": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "       If <structfield>typelem</structfield> is not 0 then it\n       identifies another row in <structname>pg_type</structname>.\n       The current type can then be subscripted like an array yielding\n       values of type <structfield>typelem</structfield>.  A\n       <quote>true</quote> array type is variable length\n       (<structfield>typlen</structfield> = -1),\n       but some fixed-length (<structfield>typlen</structfield>  0) types\n       also have nonzero <structfield>typelem</structfield>, for example\n       <type>name</type> and <type>point</type>.\n       If a fixed-length type has a <structfield>typelem</structfield> then\n       its internal representation must be some number of values of the\n       <structfield>typelem</structfield> data type with no other data.\n       Variable-length array types have a header defined by the array\n       subroutines.\n      "
   },
   "typarray": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "       If <structfield>typarray</structfield> is not 0 then it\n       identifies another row in <structname>pg_type</structname>, which\n       is the <quote>true</quote> array type having this type as element\n      "
   },
   "typinput": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Input conversion function (text format)"
   },
   "typoutput": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Output conversion function (text format)"
   },
   "typreceive": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Input conversion function (binary format), or 0 if none"
   },
   "typsend": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Output conversion function (binary format), or 0 if none"
   },
   "typmodin": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Type modifier input function, or 0 if type does not support modifiers"
   },
   "typmodout": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Type modifier output function, or 0 to use the standard format"
   },
   "typanalyze": {
    "type": "regproc",
    "ref": "<literal><link linkend=\"catalog-pg-proc\"><structname>pg_proc</structname></link>.oid</literal>",
    "details": "Custom <command>ANALYZE</command> function, or 0 to use the standard function"
   },
   "typalign": {
    "type": "char",
    "ref": "",
    "details": "<para>\n       <structfield>typalign</structfield> is the alignment required\n       when storing a value of this type.  It applies to storage on\n       disk as well as most representations of the value inside\n       <productname>PostgreSQL</productname>.\n       When multiple values are stored consecutively, such\n       as in the representation of a complete row on disk, padding is\n       inserted before a datum of this type so that it begins on the\n       specified boundary.  The alignment reference is the beginning\n       of the first datum in the sequence.\n      </para>\n\n      <para>       Possible values are:\n       <itemizedlist>        <listitem>         <para><literal>c</literal> = <type>char</type> alignment, i.e., no alignment needed.</para>\n        </listitem>\n        <listitem>         <para><literal>s</literal> = <type>short</type> alignment (2 bytes on most machines).</para>\n        </listitem>\n        <listitem>         <para><literal>i</literal> = <type>int</type> alignment (4 bytes on most machines).</para>\n        </listitem>\n        <listitem>         <para><literal>d</literal> = <type>double</type> alignment (8 bytes on many machines, but by no means all).</para>\n        </listitem>\n       </itemizedlist>\n      </para><note>       <para>        For types used in system tables, it is critical that the size\n        and alignment defined in <structname>pg_type</structname>\n        agree with the way that the compiler will lay out the column in\n        a structure representing a table row.\n       </para>\n      </note>"
   },
   "typstorage": {
    "type": "char",
    "ref": "",
    "details": "<para>       <structfield>typstorage</structfield> tells for varlena\n       types (those with <structfield>typlen</structfield> = -1) if\n       the type is prepared for toasting and what the default strategy\n       for attributes of this type should be.\n       Possible values are\n       <itemizedlist>        <listitem>         <para><literal>p</literal>: Value must always be stored plain.</para>\n        </listitem>\n        <listitem>         <para>          <literal>e</literal>: Value can be stored in a <quote>secondary</quote>\n          relation (if relation has one, see\n          <literal>pg_class.reltoastrelid</literal>).\n         </para>\n        </listitem>\n        <listitem>         <para><literal>m</literal>: Value can be stored compressed inline.</para>\n        </listitem>\n        <listitem>         <para><literal>x</literal>: Value can be stored compressed inline or stored in <quote>secondary</quote> storage.</para>\n        </listitem>\n       </itemizedlist>\n       Note that <literal>m</literal> columns can also be moved out to secondary\n       storage, but only as a last resort (<literal>e</literal> and <literal>x</literal> columns are\n       moved first).\n      </para>"
   },
   "typnotnull": {
    "type": "bool",
    "ref": "",
    "details": "<para>       <structfield>typnotnull</structfield> represents a not-null\n       constraint on a type.  Used for domains only.\n      </para>"
   },
   "typbasetype": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-type\"><structname>pg_type</structname></link>.oid</literal>",
    "details": "<para>       If this is a domain (see <structfield>typtype</structfield>), then\n       <structfield>typbasetype</structfield> identifies the type that this\n       one is based on.  Zero if this type is not a domain.\n      </para>"
   },
   "typtypmod": {
    "type": "int4",
    "ref": "",
    "details": "<para>       Domains use <structfield>typtypmod</structfield> to record the <literal>typmod</literal>\n       to be applied to their base type (-1 if base type does not use a\n       <literal>typmod</literal>).  -1 if this type is not a domain.\n      </para>"
   },
   "typndims": {
    "type": "int4",
    "ref": "",
    "details": "<para>       <structfield>typndims</structfield> is the number of array dimensions\n       for a domain over an array (that is, <structfield>typbasetype</structfield> is\n       an array type).\n       Zero for types other than domains over array types.\n       </para>"
   },
   "typcollation": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-collation\"><structname>pg_collation</structname></link>.oid</literal>",
    "details": "<para>       <structfield>typcollation</structfield> specifies the collation\n       of the type.  If the type does not support collations, this will\n       be zero.  A base type that supports collations will have\n       <symbol>DEFAULT_COLLATION_OID</symbol> here.  A domain over a\n       collatable type can have some other collation OID, if one was\n       specified for the domain.\n      </para>"
   },
   "typdefaultbin": {
    "type": "pg_node_tree",
    "ref": "",
    "details": "<para>       If <structfield>typdefaultbin</structfield> is not null, it is the\n       <function>nodeToString()</function>\n       representation of a default expression for the type.  This is\n       only used for domains.\n      </para>"
   },
   "typdefault": {
    "type": "text",
    "ref": "",
    "details": "<para>       <structfield>typdefault</structfield> is null if the type has no associated\n       default value. If <structfield>typdefaultbin</structfield> is not null,\n       <structfield>typdefault</structfield> must contain a human-readable version of the\n       default expression represented by <structfield>typdefaultbin</structfield>.  If\n       <structfield>typdefaultbin</structfield> is null and <structfield>typdefault</structfield> is\n       not, then <structfield>typdefault</structfield> is the external representation of\n       the type's default value, which can be fed to the type's input\n       converter to produce a constant.\n      </para>"
   },
   "typacl": {
    "type": "aclitem[]",
    "ref": "",
    "details": "       Access privileges; see\n       <xref linkend=\"sql-grant\"> and\n       <xref linkend=\"sql-revoke\">       for details\n      </xref></xref>"
   }
  }
 },
 "catalog-pg-user-mapping": {
  "doc": "  <h2><structname>pg_user_mapping</structname></h2>\n\n  <indexterm zone=\"catalog-pg-user-mapping\">   <primary>pg_user_mapping</primary>\n  </indexterm>\n\n  <para>   The catalog <structname>pg_user_mapping</structname> stores\n   the mappings from local user to remote.  Access to this catalog is\n   restricted from normal users, use the view\n   <link linkend=\"view-pg-user-mappings\"><structname>pg_user_mappings</structname></link>\n   instead.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "oid": {
    "type": "oid",
    "ref": "",
    "details": "Row identifier (hidden attribute; must be explicitly selected)"
   },
   "umuser": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "OID of the local role being mapped, 0 if the user mapping is public"
   },
   "umserver": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-foreign-server\"><structname>pg_foreign_server</structname></link>.oid</literal>",
    "details": "       The OID of the foreign server that contains this mapping\n      "
   },
   "umoptions": {
    "type": "text[]",
    "ref": "",
    "details": "       User mapping specific options, as <quote>keyword=value</quote> strings\n      "
   }
  }
 },
 "views-overview": {
  "doc": "  <h2>System Views</h2>\n\n  <para>   In addition to the system catalogs, <productname>PostgreSQL</productname>\n   provides a number of built-in views.  Some system views provide convenient\n   access to some commonly used queries on the system catalogs.  Other views\n   provide access to internal server state.\n  </para>\n\n  <para>   The information schema (<xref linkend=\"information-schema\">) provides\n   an alternative set of views which overlap the functionality of the system\n   views.  Since the information schema is SQL-standard whereas the views\n   described here are <productname>PostgreSQL</productname>-specific,\n   it's usually better to use the information schema if it provides all\n   the information you need.\n  </xref></para>\n\n  <para>   <xref linkend=\"view-table\"> lists the system views described here.\n   More detailed documentation of each view follows below.\n   There are some additional views that provide access to the results of\n   the statistics collector; they are described in <xref linkend=\"monitoring-stats-views-table\">.\n  </xref></xref></para>\n\n  <para>   Except where noted, all the views described here are read-only.\n  </para>\n\n  <table id=\"view-table\">   <h2>System Views</h2>\n\n   <tgroup cols=\"2\">    <thead>     <row>      <entry>View Name</entry>\n      <entry>Purpose</entry>\n     </row>\n    </thead>\n\n    <tbody>     <row>      <entry><link linkend=\"view-pg-available-extensions\"><structname>pg_available_extensions</structname></link></entry>\n      <entry>available extensions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-available-extension-versions\"><structname>pg_available_extension_versions</structname></link></entry>\n      <entry>available versions of extensions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-config\"><structname>pg_config</structname></link></entry>\n      <entry>compile-time configuration parameters</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-cursors\"><structname>pg_cursors</structname></link></entry>\n      <entry>open cursors</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-file-settings\"><structname>pg_file_settings</structname></link></entry>\n      <entry>summary of configuration file contents</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-group\"><structname>pg_group</structname></link></entry>\n      <entry>groups of database users</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-indexes\"><structname>pg_indexes</structname></link></entry>\n      <entry>indexes</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-locks\"><structname>pg_locks</structname></link></entry>\n      <entry>locks currently held or awaited</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-matviews\"><structname>pg_matviews</structname></link></entry>\n      <entry>materialized views</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-policies\"><structname>pg_policies</structname></link></entry>\n      <entry>policies</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-prepared-statements\"><structname>pg_prepared_statements</structname></link></entry>\n      <entry>prepared statements</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-prepared-xacts\"><structname>pg_prepared_xacts</structname></link></entry>\n      <entry>prepared transactions</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-roles\"><structname>pg_roles</structname></link></entry>\n      <entry>database roles</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-rules\"><structname>pg_rules</structname></link></entry>\n      <entry>rules</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-seclabels\"><structname>pg_seclabels</structname></link></entry>\n      <entry>security labels</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-settings\"><structname>pg_settings</structname></link></entry>\n      <entry>parameter settings</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-shadow\"><structname>pg_shadow</structname></link></entry>\n      <entry>database users</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-stats\"><structname>pg_stats</structname></link></entry>\n      <entry>planner statistics</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-tables\"><structname>pg_tables</structname></link></entry>\n      <entry>tables</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-timezone-abbrevs\"><structname>pg_timezone_abbrevs</structname></link></entry>\n      <entry>time zone abbreviations</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-timezone-names\"><structname>pg_timezone_names</structname></link></entry>\n      <entry>time zone names</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-user\"><structname>pg_user</structname></link></entry>\n      <entry>database users</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-user-mappings\"><structname>pg_user_mappings</structname></link></entry>\n      <entry>user mappings</entry>\n     </row>\n\n     <row>      <entry><link linkend=\"view-pg-views\"><structname>pg_views</structname></link></entry>\n      <entry>views</entry>\n     </row>\n\n    </tbody>\n   </tgroup>\n  </table>\n ",
  "columns": {}
 },
 "view-pg-available-extensions": {
  "doc": "  <h2><structname>pg_available_extensions</structname></h2>\n\n  <indexterm zone=\"view-pg-available-extensions\">   <primary>pg_available_extensions</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_available_extensions</structname> view lists the\n   extensions that are available for installation.\n   See also the\n   <link linkend=\"catalog-pg-extension\"><structname>pg_extension</structname></link>\n   catalog, which shows the extensions currently installed.\n  </para>\n\n  \n\n  <para>   The <structname>pg_available_extensions</structname> view is read only.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "name": {
    "type": "name",
    "ref": "Extension name",
    "details": null
   },
   "default_version": {
    "type": "text",
    "ref": "Name of default version, or <literal>NULL</literal> if none is\n       specified",
    "details": null
   },
   "installed_version": {
    "type": "text",
    "ref": "Currently installed version of the extension,\n       or <literal>NULL</literal> if not installed",
    "details": null
   },
   "comment": {
    "type": "text",
    "ref": "Comment string from the extension's control file",
    "details": null
   }
  }
 },
 "view-pg-available-extension-versions": {
  "doc": "  <h2><structname>pg_available_extension_versions</structname></h2>\n\n  <indexterm zone=\"view-pg-available-extension-versions\">   <primary>pg_available_extension_versions</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_available_extension_versions</structname> view lists the\n   specific extension versions that are available for installation.\n   See also the <link linkend=\"catalog-pg-extension\"><structname>pg_extension</structname></link>\n   catalog, which shows the extensions currently installed.\n  </para>\n\n  \n\n  <para>   The <structname>pg_available_extension_versions</structname> view is read\n   only.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "name": {
    "type": "name",
    "ref": "Extension name",
    "details": null
   },
   "version": {
    "type": "text",
    "ref": "Version name",
    "details": null
   },
   "installed": {
    "type": "bool",
    "ref": "True if this version of this extension is currently\n       installed",
    "details": null
   },
   "superuser": {
    "type": "bool",
    "ref": "True if only superusers are allowed to install this extension",
    "details": null
   },
   "relocatable": {
    "type": "bool",
    "ref": "True if extension can be relocated to another schema",
    "details": null
   },
   "schema": {
    "type": "name",
    "ref": "Name of the schema that the extension must be installed into,\n       or <literal>NULL</literal> if partially or fully relocatable",
    "details": null
   },
   "requires": {
    "type": "name[]",
    "ref": "Names of prerequisite extensions,\n       or <literal>NULL</literal> if none",
    "details": null
   },
   "comment": {
    "type": "text",
    "ref": "Comment string from the extension's control file",
    "details": null
   }
  }
 },
 "view-pg-config": {
  "doc": "  <h2><structname>pg_config</structname></h2>\n\n  <indexterm zone=\"view-pg-config\">   <primary>pg_config</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_config</structname> describes the\n   compile-time configuration parameters of the currently installed\n   version of <productname>PostgreSQL</productname>. It is intended, for example, to\n   be used by software packages that want to interface to\n   <productname>PostgreSQL</productname> to facilitate finding the required header\n   files and libraries. It provides the same basic information as the\n   <xref linkend=\"app-pgconfig\"> <productname>PostgreSQL</productname> Client\n   Application.\n  </xref></para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "name": {
    "type": "text",
    "ref": "The parameter name",
    "details": null
   },
   "setting": {
    "type": "text",
    "ref": "The parameter value",
    "details": null
   }
  }
 },
 "view-pg-cursors": {
  "doc": "  <h2><structname>pg_cursors</structname></h2>\n\n  <indexterm zone=\"view-pg-cursors\">   <primary>pg_cursors</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_cursors</structname> view lists the cursors that\n   are currently available. Cursors can be defined in several ways:\n   <itemizedlist>    <listitem>     <para>      via the <xref linkend=\"sql-declare\">      statement in SQL\n     </xref></para>\n    </listitem>\n\n    <listitem>     <para>      via the Bind message in the frontend/backend protocol, as\n      described in <xref linkend=\"protocol-flow-ext-query\">     </xref></para>\n    </listitem>\n\n    <listitem>     <para>      via the Server Programming Interface (SPI), as described in\n      <xref linkend=\"spi-interface\">     </xref></para>\n    </listitem>\n   </itemizedlist>\n\n   The <structname>pg_cursors</structname> view displays cursors\n   created by any of these means. Cursors only exist for the duration\n   of the transaction that defines them, unless they have been\n   declared <literal>WITH HOLD</literal>. Therefore non-holdable\n   cursors are only present in the view until the end of their\n   creating transaction.\n\n   <note>    <para>     Cursors are used internally to implement some of the components\n     of <productname>PostgreSQL</productname>, such as procedural languages.\n     Therefore, the <structname>pg_cursors</structname> view might include cursors\n     that have not been explicitly created by the user.\n    </para>\n   </note>\n  </para>\n\n  \n\n  <para>   The <structname>pg_cursors</structname> view is read only.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "name": {
    "type": "text",
    "ref": "The name of the cursor",
    "details": null
   },
   "statement": {
    "type": "text",
    "ref": "The verbatim query string submitted to declare this cursor",
    "details": null
   },
   "is_holdable": {
    "type": "boolean",
    "ref": "       <literal>true</literal> if the cursor is holdable (that is, it\n       can be accessed after the transaction that declared the cursor\n       has committed); <literal>false</literal> otherwise\n       ",
    "details": null
   },
   "is_binary": {
    "type": "boolean",
    "ref": "       <literal>true</literal> if the cursor was declared\n       <literal>BINARY</literal>; <literal>false</literal>\n       otherwise\n       ",
    "details": null
   },
   "is_scrollable": {
    "type": "boolean",
    "ref": "       <literal>true</literal> if the cursor is scrollable (that is, it\n       allows rows to be retrieved in a nonsequential manner);\n       <literal>false</literal> otherwise\n       ",
    "details": null
   },
   "creation_time": {
    "type": "timestamptz",
    "ref": "The time at which the cursor was declared",
    "details": null
   }
  }
 },
 "view-pg-file-settings": {
  "doc": "  <h2><structname>pg_file_settings</structname></h2>\n\n  <indexterm zone=\"view-pg-file-settings\">   <primary>pg_file_settings</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_file_settings</structname> provides a summary of\n   the contents of the server's configuration file(s).  A row appears in\n   this view for each <quote>name = value</quote> entry appearing in the files,\n   with annotations indicating whether the value could be applied\n   successfully.  Additional row(s) may appear for problems not linked to\n   a <quote>name = value</quote> entry, such as syntax errors in the files.\n  </para>\n\n  <para>   This view is helpful for checking whether planned changes in the\n   configuration files will work, or for diagnosing a previous failure.\n   Note that this view reports on the <emphasis>current</emphasis> contents of the\n   files, not on what was last applied by the server.  (The\n   <link linkend=\"view-pg-settings\"><structname>pg_settings</structname></link>\n   view is usually sufficient to determine that.)\n  </para>\n\n  <para>   The <structname>pg_file_settings</structname> view can be read only by\n   superusers.\n  </para>\n\n  \n\n  <para>   If the configuration file contains syntax errors or invalid parameter\n   names, the server will not attempt to apply any settings from it, and\n   therefore all the <structfield>applied</structfield> fields will read as false.\n   In such a case there will be one or more rows with\n   non-null <structfield>error</structfield> fields indicating the\n   problem(s).  Otherwise, individual settings will be applied if possible.\n   If an individual setting cannot be applied (e.g., invalid value, or the\n   setting cannot be changed after server start) it will have an appropriate\n   message in the <structfield>error</structfield> field.  Another way that\n   an entry might have <structfield>applied</structfield> = false is that it is\n   overridden by a later entry for the same parameter name; this case is not\n   considered an error so nothing appears in\n   the <structfield>error</structfield> field.\n  </para>\n\n  <para>   See <xref linkend=\"config-setting\"> for more information about the various\n   ways to change run-time parameters.\n  </xref></para>\n",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "sourcefile": {
    "type": null,
    "ref": "Full path name of the configuration file",
    "details": null
   },
   "sourceline": {
    "type": null,
    "ref": "      Line number within the configuration file where the entry appears\n     ",
    "details": null
   },
   "seqno": {
    "type": null,
    "ref": "Order in which the entries are processed (1..<replaceable>n</replaceable>)",
    "details": null
   },
   "name": {
    "type": null,
    "ref": "Configuration parameter name",
    "details": null
   },
   "setting": {
    "type": null,
    "ref": "Value to be assigned to the parameter",
    "details": null
   },
   "applied": {
    "type": null,
    "ref": "True if the value can be applied successfully",
    "details": null
   },
   "error": {
    "type": null,
    "ref": "If not null, an error message indicating why this entry could\n      not be applied",
    "details": null
   }
  }
 },
 "view-pg-group": {
  "doc": "  <h2><structname>pg_group</structname></h2>\n\n  <indexterm zone=\"view-pg-group\">   <primary>pg_group</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_group</structname> exists for backwards\n   compatibility: it emulates a catalog that existed in\n   <productname>PostgreSQL</productname> before version 8.1.\n   It shows the names and members of all roles that are marked as not\n   <structfield>rolcanlogin</structfield>, which is an approximation to the set\n   of roles that are being used as groups.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "groname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.rolname</literal>",
    "details": "Name of the group"
   },
   "grosysid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "ID of this group"
   },
   "grolist": {
    "type": "oid[]",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "An array containing the IDs of the roles in this group"
   }
  }
 },
 "view-pg-indexes": {
  "doc": "  <h2><structname>pg_indexes</structname></h2>\n\n  <indexterm zone=\"view-pg-indexes\">   <primary>pg_indexes</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_indexes</structname> provides access to\n   useful information about each index in the database.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "schemaname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.nspname</literal>",
    "details": "Name of schema containing table and index"
   },
   "tablename": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relname</literal>",
    "details": "Name of table the index is for"
   },
   "indexname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relname</literal>",
    "details": "Name of index"
   },
   "tablespace": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-tablespace\"><structname>pg_tablespace</structname></link>.spcname</literal>",
    "details": "Name of tablespace containing index (null if default for database)"
   },
   "indexdef": {
    "type": "text",
    "ref": "",
    "details": "Index definition (a reconstructed <command>CREATE INDEX</command>\n      command)"
   }
  }
 },
 "view-pg-locks": {
  "doc": "  <h2><structname>pg_locks</structname></h2>\n\n  <indexterm zone=\"view-pg-locks\">   <primary>pg_locks</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_locks</structname> provides access to\n   information about the locks held by active processes within the\n   database server.  See <xref linkend=\"mvcc\"> for more discussion\n   of locking.\n  </xref></para>\n\n  <para>   <structname>pg_locks</structname> contains one row per active lockable\n   object, requested lock mode, and relevant process.  Thus, the same\n   lockable object might\n   appear many times, if multiple processes are holding or waiting\n   for locks on it.  However, an object that currently has no locks on it\n   will not appear at all.\n  </para>\n\n  <para>   There are several distinct types of lockable objects:\n   whole relations (e.g., tables), individual pages of relations,\n   individual tuples of relations,\n   transaction IDs (both virtual and permanent IDs),\n   and general database objects (identified by class OID and object OID,\n   in the same way as in <structname>pg_description</structname> or\n   <structname>pg_depend</structname>).  Also, the right to extend a\n   relation is represented as a separate lockable object.\n   Also, <quote>advisory</quote> locks can be taken on numbers that have\n   user-defined meanings.\n  </para>\n\n  \n\n  <para>   <structfield>granted</structfield> is true in a row representing a lock\n   held by the indicated process.  False indicates that this process is\n   currently waiting to acquire this lock, which implies that at least one\n   other process is holding or waiting for a conflicting lock mode on the same\n   lockable object.  The waiting process will sleep until the other lock is\n   released (or a deadlock situation is detected).  A single process can be\n   waiting to acquire at most one lock at a time.\n  </para>\n\n  <para>   Throughout running a transaction, a server process holds an exclusive lock\n   on the transaction's virtual transaction ID.  If a permanent ID is assigned\n   to the transaction (which normally happens only if the transaction changes\n   the state of the database), it also holds an exclusive lock on the\n   transaction's permanent transaction ID until it ends.  When a process finds\n   it necessary to wait specifically for another transaction to end, it does\n   so by attempting to acquire share lock on the other transaction's ID\n   (either virtual or permanent ID depending on the situation). That will\n   succeed only when the other transaction terminates and releases its locks.\n  </para>\n\n  <para>   Although tuples are a lockable type of object,\n   information about row-level locks is stored on disk, not in memory,\n   and therefore row-level locks normally do not appear in this view.\n   If a process is waiting for a\n   row-level lock, it will usually appear in the view as waiting for the\n   permanent transaction ID of the current holder of that row lock.\n  </para>\n\n  <para>   Advisory locks can be acquired on keys consisting of either a single\n   <type>bigint</type> value or two integer values.\n   A <type>bigint</type> key is displayed with its\n   high-order half in the <structfield>classid</structfield> column, its low-order half\n   in the <structfield>objid</structfield> column, and <structfield>objsubid</structfield> equal\n   to 1. The original <type>bigint</type> value can be reassembled with the\n   expression <literal>(classid::bigint  32) |\n   objid::bigint</literal>. Integer keys are displayed with the\n   first key in the\n   <structfield>classid</structfield> column, the second key in the <structfield>objid</structfield>\n   column, and <structfield>objsubid</structfield> equal to 2.  The actual meaning of\n   the keys is up to the user.  Advisory locks are local to each database,\n   so the <structfield>database</structfield> column is meaningful for an advisory lock.\n  </para>\n\n  <para>   <structname>pg_locks</structname> provides a global view of all locks\n   in the database cluster, not only those relevant to the current database.\n   Although its <structfield>relation</structfield> column can be joined\n   against <structname>pg_class</structname>.<structfield>oid</structfield> to identify locked\n   relations, this will only work correctly for relations in the current\n   database (those for which the <structfield>database</structfield> column\n   is either the current database's OID or zero).\n  </para>\n\n  <para>   The <structfield>pid</structfield> column can be joined to the\n   <structfield>pid</structfield> column of the <link linkend=\"pg-stat-activity-view\"><structname>pg_stat_activity</structname></link>\n   view to get more\n   information on the session holding or awaiting each lock,\n   for example\n<programlisting>SELECT * FROM pg_locks pl LEFT JOIN pg_stat_activity psa\n    ON pl.pid = psa.pid;</programlisting>\n   Also, if you are using prepared transactions, the\n   <structfield>virtualtransaction</structfield> column can be joined to the\n   <structfield>transaction</structfield> column of the <link linkend=\"view-pg-prepared-xacts\"><structname>pg_prepared_xacts</structname></link>\n   view to get more information on prepared transactions that hold locks.\n   (A prepared transaction can never be waiting for a lock,\n   but it continues to hold the locks it acquired while running.)\n   For example:\n<programlisting>SELECT * FROM pg_locks pl LEFT JOIN pg_prepared_xacts ppx\n    ON pl.virtualtransaction = '-1/' || ppx.transaction;</programlisting>\n  </para>\n\n  <para>   While it is possible to obtain information about which processes block\n   which other processes by joining <structname>pg_locks</structname> against\n   itself, this is very difficult to get right in detail.  Such a query would\n   have to encode knowledge about which lock modes conflict with which\n   others.  Worse, the <structname>pg_locks</structname> view does not expose\n   information about which processes are ahead of which others in lock wait\n   queues, nor information about which processes are parallel workers running\n   on behalf of which other client sessions.  It is better to use\n   the <function>pg_blocking_pids()</function> function\n   (see <xref linkend=\"functions-info-session-table\">) to identify which\n   process(es) a waiting process is blocked behind.\n  </xref></para>\n\n  <para>   The <structname>pg_locks</structname> view displays data from both the\n   regular lock manager and the predicate lock manager, which are\n   separate systems; in addition, the regular lock manager subdivides its\n   locks into regular and <firstterm>fast-path</firstterm> locks.\n   This data is not guaranteed to be entirely consistent.\n   When the view is queried,\n   data on fast-path locks (with <structfield>fastpath</structfield> = <literal>true</literal>)\n   is gathered from each backend one at a time, without freezing the state of\n   the entire lock manager, so it is possible for locks to be taken or\n   released while information is gathered.  Note, however, that these locks are\n   known not to conflict with any other lock currently in place.  After\n   all backends have been queried for fast-path locks, the remainder of the\n   regular lock manager is locked as a unit, and a consistent snapshot of all\n   remaining locks is collected as an atomic action.  After unlocking the\n   regular lock manager, the predicate lock manager is similarly locked and all\n   predicate locks are collected as an atomic action.  Thus, with the exception\n   of fast-path locks, each lock manager will deliver a consistent set of\n   results, but as we do not lock both lock managers simultaneously, it is\n   possible for locks to be taken or released after we interrogate the regular\n   lock manager and before we interrogate the predicate lock manager.\n  </para>\n\n  <para>   Locking the regular and/or predicate lock manager could have some\n   impact on database performance if this view is very frequently accessed.\n   The locks are held only for the minimum amount of time necessary to\n   obtain data from the lock managers, but this does not completely eliminate\n   the possibility of a performance impact.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "locktype": {
    "type": "text",
    "ref": "",
    "details": "       Type of the lockable object:\n       <literal>relation</literal>,\n       <literal>extend</literal>,\n       <literal>page</literal>,\n       <literal>tuple</literal>,\n       <literal>transactionid</literal>,\n       <literal>virtualxid</literal>,\n       <literal>object</literal>,\n       <literal>userlock</literal>, or\n       <literal>advisory</literal>\n      "
   },
   "database": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-database\"><structname>pg_database</structname></link>.oid</literal>",
    "details": "       OID of the database in which the lock target exists, or\n       zero if the target is a shared object, or\n       null if the target is a transaction ID\n      "
   },
   "relation": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "       OID of the relation targeted by the lock, or null if the target is not\n       a relation or part of a relation\n      "
   },
   "page": {
    "type": "integer",
    "ref": "",
    "details": "       Page number targeted by the lock within the relation,\n       or null if the target is not a relation page or tuple\n      "
   },
   "tuple": {
    "type": "smallint",
    "ref": "",
    "details": "       Tuple number targeted by the lock within the page,\n       or null if the target is not a tuple\n      "
   },
   "virtualxid": {
    "type": "text",
    "ref": "",
    "details": "       Virtual ID of the transaction targeted by the lock,\n       or null if the target is not a virtual transaction ID\n      "
   },
   "transactionid": {
    "type": "xid",
    "ref": "",
    "details": "       ID of the transaction targeted by the lock,\n       or null if the target is not a transaction ID\n      "
   },
   "classid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "       OID of the system catalog containing the lock target, or null if the\n       target is not a general database object\n      "
   },
   "objid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "       OID of the lock target within its system catalog, or null if the\n       target is not a general database object\n      "
   },
   "objsubid": {
    "type": "smallint",
    "ref": "",
    "details": "       Column number targeted by the lock (the\n       <structfield>classid</structfield> and <structfield>objid</structfield> refer to the\n       table itself),\n       or zero if the target is some other general database object,\n       or null if the target is not a general database object\n      "
   },
   "virtualtransaction": {
    "type": "text",
    "ref": "",
    "details": "       Virtual ID of the transaction that is holding or awaiting this lock\n      "
   },
   "pid": {
    "type": "integer",
    "ref": "",
    "details": "       Process ID of the server process holding or awaiting this\n       lock, or null if the lock is held by a prepared transaction\n      "
   },
   "mode": {
    "type": "text",
    "ref": "",
    "details": "Name of the lock mode held or desired by this process (see <xref linkend=\"locking-tables\"> and <xref linkend=\"xact-serializable\">)</xref></xref>"
   },
   "granted": {
    "type": "boolean",
    "ref": "",
    "details": "True if lock is held, false if lock is awaited"
   },
   "fastpath": {
    "type": "boolean",
    "ref": "",
    "details": "True if lock was taken via fast path, false if taken via main\n       lock table"
   }
  }
 },
 "view-pg-matviews": {
  "doc": "  <h2><structname>pg_matviews</structname></h2>\n\n  <indexterm zone=\"view-pg-matviews\">   <primary>pg_matviews</primary>\n  </indexterm>\n\n  <indexterm zone=\"view-pg-matviews\">   <primary>materialized views</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_matviews</structname> provides access to\n   useful information about each materialized view in the database.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "schemaname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.nspname</literal>",
    "details": "Name of schema containing materialized view"
   },
   "matviewname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relname</literal>",
    "details": "Name of materialized view"
   },
   "matviewowner": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.rolname</literal>",
    "details": "Name of materialized view's owner"
   },
   "tablespace": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-tablespace\"><structname>pg_tablespace</structname></link>.spcname</literal>",
    "details": "Name of tablespace containing materialized view (null if default for database)"
   },
   "hasindexes": {
    "type": "boolean",
    "ref": "",
    "details": "True if materialized view has (or recently had) any indexes"
   },
   "ispopulated": {
    "type": "boolean",
    "ref": "",
    "details": "True if materialized view is currently populated"
   },
   "definition": {
    "type": "text",
    "ref": "",
    "details": "Materialized view definition (a reconstructed <command>SELECT</command> query)"
   }
  }
 },
 "view-pg-policies": {
  "doc": "  <h2><structname>pg_policies</structname></h2>\n\n  <indexterm zone=\"view-pg-policies\">   <primary>pg_policies</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_policies</structname> provides access to\n   useful information about each row-level security policy in the database.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "schemaname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.nspname</literal>",
    "details": "Name of schema containing table policy is on"
   },
   "tablename": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relname</literal>",
    "details": "Name of table policy is on"
   },
   "policyname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-policy\"><structname>pg_policy</structname></link>.polname</literal>",
    "details": "Name of policy"
   },
   "roles": {
    "type": "name[]",
    "ref": "",
    "details": "The roles to which this policy applies"
   },
   "cmd": {
    "type": "text",
    "ref": "",
    "details": "The command type to which the policy is applied"
   },
   "qual": {
    "type": "text",
    "ref": "",
    "details": "The expression added to the security barrier qualifications for\n      queries that this policy applies to"
   },
   "with_check": {
    "type": "text",
    "ref": "",
    "details": "The expression added to the WITH CHECK qualifications for\n      queries that attempt to add rows to this table"
   }
  }
 },
 "view-pg-prepared-statements": {
  "doc": "  <h2><structname>pg_prepared_statements</structname></h2>\n\n  <indexterm zone=\"view-pg-prepared-statements\">   <primary>pg_prepared_statements</primary>\n  </indexterm>\n\n  <para>   The <structname>pg_prepared_statements</structname> view displays\n   all the prepared statements that are available in the current\n   session. See <xref linkend=\"sql-prepare\"> for more information about prepared\n   statements.\n  </xref></para>\n\n  <para>   <structname>pg_prepared_statements</structname> contains one row\n   for each prepared statement. Rows are added to the view when a new\n   prepared statement is created and removed when a prepared statement\n   is released (for example, via the <xref linkend=\"sql-deallocate\"> command).\n  </xref></para>\n\n  \n\n  <para>   The <structname>pg_prepared_statements</structname> view is read only.\n  </para>\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "name": {
    "type": "text",
    "ref": "       The identifier of the prepared statement\n      ",
    "details": null
   },
   "statement": {
    "type": "text",
    "ref": "       The query string submitted by the client to create this\n       prepared statement. For prepared statements created via SQL,\n       this is the <command>PREPARE</command> statement submitted by\n       the client. For prepared statements created via the\n       frontend/backend protocol, this is the text of the prepared\n       statement itself.\n      ",
    "details": null
   },
   "prepare_time": {
    "type": "timestamptz",
    "ref": "       The time at which the prepared statement was created\n      ",
    "details": null
   },
   "parameter_types": {
    "type": "regtype[]",
    "ref": "       The expected parameter types for the prepared statement in the\n       form of an array of <type>regtype</type>. The OID corresponding\n       to an element of this array can be obtained by casting the\n       <type>regtype</type> value to <type>oid</type>.\n      ",
    "details": null
   },
   "from_sql": {
    "type": "boolean",
    "ref": "       <literal>true</literal> if the prepared statement was created\n       via the <command>PREPARE</command> SQL statement;\n       <literal>false</literal> if the statement was prepared via the\n       frontend/backend protocol\n      ",
    "details": null
   }
  }
 },
 "view-pg-prepared-xacts": {
  "doc": "  <h2><structname>pg_prepared_xacts</structname></h2>\n\n  <indexterm zone=\"view-pg-prepared-xacts\">   <primary>pg_prepared_xacts</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_prepared_xacts</structname> displays\n   information about transactions that are currently prepared for two-phase\n   commit (see <xref linkend=\"sql-prepare-transaction\"> for details).\n  </xref></para>\n\n  <para>   <structname>pg_prepared_xacts</structname> contains one row per prepared\n   transaction.  An entry is removed when the transaction is committed or\n   rolled back.\n  </para>\n\n  \n\n  <para>   When the <structname>pg_prepared_xacts</structname> view is accessed, the\n   internal transaction manager data structures are momentarily locked, and\n   a copy is made for the view to display.  This ensures that the\n   view produces a consistent set of results, while not blocking\n   normal operations longer than necessary.  Nonetheless\n   there could be some impact on database performance if this view is\n   frequently accessed.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "transaction": {
    "type": "xid",
    "ref": "",
    "details": "       Numeric transaction identifier of the prepared transaction\n      "
   },
   "gid": {
    "type": "text",
    "ref": "",
    "details": "       Global transaction identifier that was assigned to the transaction\n      "
   },
   "prepared": {
    "type": "timestamp with time zone",
    "ref": "",
    "details": "       Time at which the transaction was prepared for commit\n      "
   },
   "owner": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.rolname</literal>",
    "details": "       Name of the user that executed the transaction\n      "
   },
   "database": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-database\"><structname>pg_database</structname></link>.datname</literal>",
    "details": "       Name of the database in which the transaction was executed\n      "
   }
  }
 },
 "view-pg-roles": {
  "doc": "  <h2><structname>pg_roles</structname></h2>\n\n  <indexterm zone=\"view-pg-roles\">   <primary>pg_roles</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_roles</structname> provides access to\n   information about database roles.  This is simply a publicly\n   readable view of\n   <link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>\n   that blanks out the password field.\n  </para>\n\n  <para>   This view explicitly exposes the OID column of the underlying table,\n   since that is needed to do joins to other catalogs.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "rolname": {
    "type": "name",
    "ref": "",
    "details": "Role name"
   },
   "rolsuper": {
    "type": "bool",
    "ref": "",
    "details": "Role has superuser privileges"
   },
   "rolinherit": {
    "type": "bool",
    "ref": "",
    "details": "Role automatically inherits privileges of roles it is a\n       member of"
   },
   "rolcreaterole": {
    "type": "bool",
    "ref": "",
    "details": "Role can create more roles"
   },
   "rolcreatedb": {
    "type": "bool",
    "ref": "",
    "details": "Role can create databases"
   },
   "rolcanlogin": {
    "type": "bool",
    "ref": "",
    "details": "       Role can log in. That is, this role can be given as the initial\n       session authorization identifier\n      "
   },
   "rolreplication": {
    "type": "bool",
    "ref": "",
    "details": "       Role is a replication role. That is, this role can initiate streaming\n       replication (see <xref linkend=\"streaming-replication\">) and set/unset\n       the system backup mode using <function>pg_start_backup</function> and\n       <function>pg_stop_backup</function>\n      </xref>"
   },
   "rolconnlimit": {
    "type": "int4",
    "ref": "",
    "details": "       For roles that can log in, this sets maximum number of concurrent\n       connections this role can make.  -1 means no limit.\n      "
   },
   "rolpassword": {
    "type": "text",
    "ref": "",
    "details": "Not the password (always reads as <literal>********</literal>)"
   },
   "rolvaliduntil": {
    "type": "timestamptz",
    "ref": "",
    "details": "Password expiry time (only used for password authentication);\n       null if no expiration"
   },
   "rolconfig": {
    "type": "text[]",
    "ref": "",
    "details": "Role-specific defaults for run-time configuration variables"
   },
   "oid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "ID of role"
   }
  }
 },
 "view-pg-rules": {
  "doc": "  <h2><structname>pg_rules</structname></h2>\n\n  <indexterm zone=\"view-pg-rules\">   <primary>pg_rules</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_rules</structname> provides access to\n   useful information about query rewrite rules.\n  </para>\n\n  \n\n  <para>   The <structname>pg_rules</structname> view excludes the <literal>ON SELECT</literal> rules\n   of views and materialized views; those can be seen in\n   <structname>pg_views</structname> and <structname>pg_matviews</structname>.\n  </para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "schemaname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.nspname</literal>",
    "details": "Name of schema containing table"
   },
   "tablename": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relname</literal>",
    "details": "Name of table the rule is for"
   },
   "rulename": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-rewrite\"><structname>pg_rewrite</structname></link>.rulename</literal>",
    "details": "Name of rule"
   },
   "definition": {
    "type": "text",
    "ref": "",
    "details": "Rule definition (a reconstructed creation command)"
   }
  }
 },
 "view-pg-seclabels": {
  "doc": "  <h2><structname>pg_seclabels</structname></h2>\n\n  <indexterm zone=\"view-pg-seclabels\">   <primary>pg_seclabels</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_seclabels</structname> provides information about\n   security labels.  It as an easier-to-query version of the\n   <link linkend=\"catalog-pg-seclabel\"><structname>pg_seclabel</structname></link> catalog.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "objoid": {
    "type": "oid",
    "ref": "any OID column",
    "details": "The OID of the object this security label pertains to"
   },
   "classoid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.oid</literal>",
    "details": "The OID of the system catalog this object appears in"
   },
   "objsubid": {
    "type": "int4",
    "ref": "",
    "details": "       For a security label on a table column, this is the column number (the\n       <structfield>objoid</structfield> and <structfield>classoid</structfield> refer to\n       the table itself).  For all other object types, this column is\n       zero.\n      "
   },
   "objtype": {
    "type": "text",
    "ref": "",
    "details": "         The type of object to which this label applies, as text.\n      "
   },
   "objnamespace": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.oid</literal>",
    "details": "       The OID of the namespace for this object, if applicable;\n       otherwise NULL.\n      "
   },
   "objname": {
    "type": "text",
    "ref": "",
    "details": "       The name of the object to which this label applies, as text.\n      "
   },
   "provider": {
    "type": "text",
    "ref": "<literal><link linkend=\"catalog-pg-seclabel\"><structname>pg_seclabel</structname></link>.provider</literal>",
    "details": "The label provider associated with this label."
   },
   "label": {
    "type": "text",
    "ref": "<literal><link linkend=\"catalog-pg-seclabel\"><structname>pg_seclabel</structname></link>.label</literal>",
    "details": "The security label applied to this object."
   }
  }
 },
 "view-pg-settings": {
  "doc": "  <h2><structname>pg_settings</structname></h2>\n\n  <indexterm zone=\"view-pg-settings\">   <primary>pg_settings</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_settings</structname> provides access to\n   run-time parameters of the server.  It is essentially an alternative\n   interface to the <xref linkend=\"sql-show\">   and <xref linkend=\"sql-set\"> commands.\n   It also provides access to some facts about each parameter that are\n   not directly available from <command>SHOW</command>, such as minimum and\n   maximum values.\n  </xref></xref></para>\n\n  \n\n  <para>   There are several possible values of <structfield>context</structfield>.\n   In order of decreasing difficulty of changing the setting, they are:\n  </para>\n\n  <variablelist>   <varlistentry>    \n    <term><literal>internal</literal></term>\n    <listitem>     <para>      These settings cannot be changed directly; they reflect internally\n      determined values.  Some of them may be adjustable by rebuilding the\n      server with different configuration options, or by changing options\n      supplied to <command>initdb</command>.\n     </para>\n    </listitem>\n   </varlistentry>\n   <varlistentry>    \n    <term><literal>postmaster</literal></term>\n    <listitem>     <para>      These settings can only be applied when the server starts, so any change\n      requires restarting the server.  Values for these settings are typically\n      stored in the <filename>postgresql.conf</filename> file, or passed on\n      the command line when starting the server.  Of course, settings with any\n      of the lower <structfield>context</structfield> types can also be\n      set at server start time.\n     </para>\n    </listitem>\n   </varlistentry>\n   <varlistentry>    \n    <term><literal>sighup</literal></term>\n    <listitem>     <para>      Changes to these settings can be made in\n      <filename>postgresql.conf</filename> without restarting the server.\n      Send a <systemitem>SIGHUP</systemitem> signal to the postmaster to\n      cause it to re-read <filename>postgresql.conf</filename> and apply\n      the changes.  The postmaster will also forward the\n      <systemitem>SIGHUP</systemitem> signal to its child processes so that\n      they all pick up the new value.\n     </para>\n    </listitem>\n   </varlistentry>\n   <varlistentry>    \n    <term><literal>superuser-backend</literal></term>\n    <listitem>     <para>      Changes to these settings can be made in\n      <filename>postgresql.conf</filename> without restarting the server.\n      They can also be set for a particular session in the connection request\n      packet (for example, via <application>libpq</application>'s <literal>PGOPTIONS</literal>\n      environment variable), but only if the connecting user is a superuser.\n      However, these settings never change in a session after it is started.\n      If you change them in <filename>postgresql.conf</filename>, send a\n      <systemitem>SIGHUP</systemitem> signal to the postmaster to cause it to\n      re-read <filename>postgresql.conf</filename>.  The new values will only\n      affect subsequently-launched sessions.\n     </para>\n    </listitem>\n   </varlistentry>\n   <varlistentry>    \n    <term><literal>backend</literal></term>\n    <listitem>     <para>      Changes to these settings can be made in\n      <filename>postgresql.conf</filename> without restarting the server.\n      They can also be set for a particular session in the connection request\n      packet (for example, via <application>libpq</application>'s <literal>PGOPTIONS</literal>\n      environment variable); any user can make such a change for their session.\n      However, these settings never change in a session after it is started.\n      If you change them in <filename>postgresql.conf</filename>, send a\n      <systemitem>SIGHUP</systemitem> signal to the postmaster to cause it to\n      re-read <filename>postgresql.conf</filename>.  The new values will only\n      affect subsequently-launched sessions.\n     </para>\n    </listitem>\n   </varlistentry>\n   <varlistentry>    \n    <term><literal>superuser</literal></term>\n    <listitem>     <para>      These settings can be set from <filename>postgresql.conf</filename>,\n      or within a session via the <command>SET</command> command; but only superusers\n      can change them via <command>SET</command>.  Changes in\n      <filename>postgresql.conf</filename> will affect existing sessions\n      only if no session-local value has been established with <command>SET</command>.\n     </para>\n    </listitem>\n   </varlistentry>\n   <varlistentry>    \n    <term><literal>user</literal></term>\n    <listitem>     <para>      These settings can be set from <filename>postgresql.conf</filename>,\n      or within a session via the <command>SET</command> command.  Any user is\n      allowed to change their session-local value.  Changes in\n      <filename>postgresql.conf</filename> will affect existing sessions\n      only if no session-local value has been established with <command>SET</command>.\n     </para>\n    </listitem>\n   </varlistentry>\n  </variablelist>\n\n  <para>   See <xref linkend=\"config-setting\"> for more information about the various\n   ways to change these parameters.\n  </xref></para>\n\n  <para>   The <structname>pg_settings</structname> view cannot be inserted into or\n   deleted from, but it can be updated.  An <command>UPDATE</command> applied\n   to a row of <structname>pg_settings</structname> is equivalent to executing\n   the <xref linkend=\"sql-set\"> command on that named\n   parameter. The change only affects the value used by the current\n   session. If an <command>UPDATE</command> is issued within a transaction\n   that is later aborted, the effects of the <command>UPDATE</command> command\n   disappear when the transaction is rolled back. Once the surrounding\n   transaction is committed, the effects will persist until the end of the\n   session, unless overridden by another <command>UPDATE</command> or\n   <command>SET</command>.\n  </xref></para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "name": {
    "type": "text",
    "ref": "Run-time configuration parameter name",
    "details": null
   },
   "setting": {
    "type": "text",
    "ref": "Current value of the parameter",
    "details": null
   },
   "unit": {
    "type": "text",
    "ref": "Implicit unit of the parameter",
    "details": null
   },
   "category": {
    "type": "text",
    "ref": "Logical group of the parameter",
    "details": null
   },
   "short_desc": {
    "type": "text",
    "ref": "A brief description of the parameter",
    "details": null
   },
   "extra_desc": {
    "type": "text",
    "ref": "Additional, more detailed, description of the parameter",
    "details": null
   },
   "context": {
    "type": "text",
    "ref": "Context required to set the parameter's value (see below)",
    "details": null
   },
   "vartype": {
    "type": "text",
    "ref": "Parameter type (<literal>bool</literal>, <literal>enum</literal>,\n       <literal>integer</literal>, <literal>real</literal>, or <literal>string</literal>)\n      ",
    "details": null
   },
   "source": {
    "type": "text",
    "ref": "Source of the current parameter value",
    "details": null
   },
   "min_val": {
    "type": "text",
    "ref": "Minimum allowed value of the parameter (null for non-numeric\n      values)",
    "details": null
   },
   "max_val": {
    "type": "text",
    "ref": "Maximum allowed value of the parameter (null for non-numeric\n      values)",
    "details": null
   },
   "enumvals": {
    "type": "text[]",
    "ref": "Allowed values of an enum parameter (null for non-enum\n      values)",
    "details": null
   },
   "boot_val": {
    "type": "text",
    "ref": "Parameter value assumed at server startup if the parameter is\n      not otherwise set",
    "details": null
   },
   "reset_val": {
    "type": "text",
    "ref": "Value that <command>RESET</command> would reset the parameter to\n      in the current session",
    "details": null
   },
   "sourcefile": {
    "type": "text",
    "ref": "Configuration file the current value was set in (null for\n      values set from sources other than configuration files, or when\n      examined by a non-superuser);\n      helpful when using <literal>include</literal> directives in configuration files",
    "details": null
   },
   "sourceline": {
    "type": "integer",
    "ref": "Line number within the configuration file the current value was\n      set at (null for values set from sources other than configuration files,\n      or when examined by a non-superuser)\n      ",
    "details": null
   },
   "pending_restart": {
    "type": "boolean",
    "ref": "<literal>true</literal> if the value has been changed in the\n      configuration file but needs a restart; or <literal>false</literal>\n      otherwise.\n      ",
    "details": null
   }
  }
 },
 "view-pg-shadow": {
  "doc": "  <h2><structname>pg_shadow</structname></h2>\n\n  <indexterm zone=\"view-pg-shadow\">   <primary>pg_shadow</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_shadow</structname> exists for backwards\n   compatibility: it emulates a catalog that existed in\n   <productname>PostgreSQL</productname> before version 8.1.\n   It shows properties of all roles that are marked as\n   <structfield>rolcanlogin</structfield> in\n   <link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.\n  </para>\n\n  <para>   The name stems from the fact that this table\n   should not be readable by the public since it contains passwords.\n   <link linkend=\"view-pg-user\"><structname>pg_user</structname></link>\n   is a publicly readable view on\n   <structname>pg_shadow</structname> that blanks out the password field.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "usename": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.rolname</literal>",
    "details": "User name"
   },
   "usesysid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "ID of this user"
   },
   "usecreatedb": {
    "type": "bool",
    "ref": "",
    "details": "User can create databases"
   },
   "usesuper": {
    "type": "bool",
    "ref": "",
    "details": "User is a superuser"
   },
   "userepl": {
    "type": "bool",
    "ref": "",
    "details": "       User can initiate streaming replication and put the system in and\n       out of backup mode.\n      "
   },
   "usebypassrls": {
    "type": "bool",
    "ref": "",
    "details": "       User bypasses every row level security policy, see\n       <xref linkend=\"ddl-rowsecurity\"> for more information.\n      </xref>"
   },
   "passwd": {
    "type": "text",
    "ref": "",
    "details": "Password (possibly encrypted); null if none.  See\n      <link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>\n      for details of how encrypted passwords are stored."
   },
   "valuntil": {
    "type": "abstime",
    "ref": "",
    "details": "Password expiry time (only used for password authentication)"
   },
   "useconfig": {
    "type": "text[]",
    "ref": "",
    "details": "Session defaults for run-time configuration variables"
   }
  }
 },
 "view-pg-stats": {
  "doc": "  <h2><structname>pg_stats</structname></h2>\n\n  <indexterm zone=\"view-pg-stats\">   <primary>pg_stats</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_stats</structname> provides access to\n   the information stored in the <link linkend=\"catalog-pg-statistic\"><structname>pg_statistic</structname></link>\n   catalog.  This view allows access only to rows of\n   <structname>pg_statistic</structname> that correspond to tables the\n   user has permission to read, and therefore it is safe to allow public\n   read access to this view.\n  </para>\n\n  <para>   <structname>pg_stats</structname> is also designed to present the\n   information in a more readable format than the underlying catalog\n    at the cost that its schema must be extended whenever new slot types\n   are defined for <structname>pg_statistic</structname>.\n  </para>\n\n  \n\n  <para>   The maximum number of entries in the array fields can be controlled on a\n   column-by-column basis using the <command>ALTER TABLE SET STATISTICS</command>\n   command, or globally by setting the\n   <xref linkend=\"guc-default-statistics-target\"> run-time parameter.\n  </xref></para>\n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "schemaname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.nspname</literal>",
    "details": "Name of schema containing table"
   },
   "tablename": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relname</literal>",
    "details": "Name of table"
   },
   "attname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-attribute\"><structname>pg_attribute</structname></link>.attname</literal>",
    "details": "Name of the column described by this row"
   },
   "inherited": {
    "type": "bool",
    "ref": "",
    "details": "If true, this row includes inheritance child columns, not just the\n       values in the specified table"
   },
   "null_frac": {
    "type": "real",
    "ref": "",
    "details": "Fraction of column entries that are null"
   },
   "avg_width": {
    "type": "integer",
    "ref": "",
    "details": "Average width in bytes of column's entries"
   },
   "n_distinct": {
    "type": "real",
    "ref": "",
    "details": "       If greater than zero, the estimated number of distinct values in the\n       column.  If less than zero, the negative of the number of distinct\n       values divided by the number of rows.  (The negated form is used when\n       <command>ANALYZE</command> believes that the number of distinct values is\n       likely to increase as the table grows; the positive form is used when\n       the column seems to have a fixed number of possible values.)  For\n       example, -1 indicates a unique column in which the number of distinct\n       values is the same as the number of rows.\n      "
   },
   "most_common_vals": {
    "type": "anyarray",
    "ref": "",
    "details": "       A list of the most common values in the column. (Null if\n       no values seem to be more common than any others.)\n      "
   },
   "most_common_freqs": {
    "type": "real[]",
    "ref": "",
    "details": "       A list of the frequencies of the most common values,\n       i.e., number of occurrences of each divided by total number of rows.\n       (Null when <structfield>most_common_vals</structfield> is.)\n      "
   },
   "histogram_bounds": {
    "type": "anyarray",
    "ref": "",
    "details": "       A list of values that divide the column's values into groups of\n       approximately equal population.  The values in\n       <structfield>most_common_vals</structfield>, if present, are omitted from this\n       histogram calculation.  (This column is null if the column data type\n       does not have a <literal/> operator or if the\n       <structfield>most_common_vals</structfield> list accounts for the entire\n       population.)\n      "
   },
   "correlation": {
    "type": "real",
    "ref": "",
    "details": "       Statistical correlation between physical row ordering and\n       logical ordering of the column values.  This ranges from -1 to +1.\n       When the value is near -1 or +1, an index scan on the column will\n       be estimated to be cheaper than when it is near zero, due to reduction\n       of random access to the disk.  (This column is null if the column data\n       type does not have a <literal/> operator.)\n      "
   },
   "most_common_elems": {
    "type": "anyarray",
    "ref": "",
    "details": "       A list of non-null element values most often appearing within values of\n       the column. (Null for scalar types.)\n      "
   },
   "most_common_elem_freqs": {
    "type": "real[]",
    "ref": "",
    "details": "       A list of the frequencies of the most common element values, i.e., the\n       fraction of rows containing at least one instance of the given value.\n       Two or three additional values follow the per-element frequencies;\n       these are the minimum and maximum of the preceding per-element\n       frequencies, and optionally the frequency of null elements.\n       (Null when <structfield>most_common_elems</structfield> is.)\n      "
   },
   "elem_count_histogram": {
    "type": "real[]",
    "ref": "",
    "details": "       A histogram of the counts of distinct non-null element values within the\n       values of the column, followed by the average number of distinct\n       non-null elements.  (Null for scalar types.)\n      "
   }
  }
 },
 "view-pg-tables": {
  "doc": "  <h2><structname>pg_tables</structname></h2>\n\n  <indexterm zone=\"view-pg-tables\">   <primary>pg_tables</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_tables</structname> provides access to\n   useful information about each table in the database.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "schemaname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.nspname</literal>",
    "details": "Name of schema containing table"
   },
   "tablename": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relname</literal>",
    "details": "Name of table"
   },
   "tableowner": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.rolname</literal>",
    "details": "Name of table's owner"
   },
   "tablespace": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-tablespace\"><structname>pg_tablespace</structname></link>.spcname</literal>",
    "details": "Name of tablespace containing table (null if default for database)"
   },
   "hasindexes": {
    "type": "boolean",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relhasindex</literal>",
    "details": "True if table has (or recently had) any indexes"
   },
   "hasrules": {
    "type": "boolean",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relhasrules</literal>",
    "details": "True if table has (or once had) rules"
   },
   "hastriggers": {
    "type": "boolean",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relhastriggers</literal>",
    "details": "True if table has (or once had) triggers"
   },
   "rowsecurity": {
    "type": "boolean",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relrowsecurity</literal>",
    "details": "True if row security is enabled on the table"
   }
  }
 },
 "view-pg-timezone-abbrevs": {
  "doc": "  <h2><structname>pg_timezone_abbrevs</structname></h2>\n\n  <indexterm zone=\"view-pg-timezone-abbrevs\">   <primary>pg_timezone_abbrevs</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_timezone_abbrevs</structname> provides a list\n   of time zone abbreviations that are currently recognized by the datetime\n   input routines.  The contents of this view change when the\n   <xref linkend=\"guc-timezone-abbreviations\"> run-time parameter is modified.\n  </xref></para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "abbrev": {
    "type": "text",
    "ref": "Time zone abbreviation",
    "details": null
   },
   "utc_offset": {
    "type": "interval",
    "ref": "Offset from UTC (positive means east of Greenwich)",
    "details": null
   },
   "is_dst": {
    "type": "boolean",
    "ref": "True if this is a daylight-savings abbreviation",
    "details": null
   }
  }
 },
 "view-pg-timezone-names": {
  "doc": "  <h2><structname>pg_timezone_names</structname></h2>\n\n  <indexterm zone=\"view-pg-timezone-names\">   <primary>pg_timezone_names</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_timezone_names</structname> provides a list\n   of time zone names that are recognized by <command>SET TIMEZONE</command>,\n   along with their associated abbreviations, UTC offsets,\n   and daylight-savings status.  (Technically,\n   <productname>PostgreSQL</productname> uses <acronym>UT1</acronym> rather\n   than UTC because leap seconds are not handled.)\n   Unlike the abbreviations shown in <link linkend=\"view-pg-timezone-abbrevs\"><structname>pg_timezone_abbrevs</structname></link>, many of these names imply a set of daylight-savings transition\n   date rules.  Therefore, the associated information changes across local DST\n   boundaries.  The displayed information is computed based on the current\n   value of <function>CURRENT_TIMESTAMP</function>.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "name": {
    "type": "text",
    "ref": "Time zone name",
    "details": null
   },
   "abbrev": {
    "type": "text",
    "ref": "Time zone abbreviation",
    "details": null
   },
   "utc_offset": {
    "type": "interval",
    "ref": "Offset from UTC (positive means east of Greenwich)",
    "details": null
   },
   "is_dst": {
    "type": "boolean",
    "ref": "True if currently observing daylight savings",
    "details": null
   }
  }
 },
 "view-pg-user": {
  "doc": "  <h2><structname>pg_user</structname></h2>\n\n  <indexterm zone=\"view-pg-user\">   <primary>pg_user</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_user</structname> provides access to\n   information about database users.  This is simply a publicly\n   readable view of\n   <link linkend=\"view-pg-shadow\"><structname>pg_shadow</structname></link>\n   that blanks out the password field.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "Description",
    "details": null
   },
   "usename": {
    "type": "name",
    "ref": "User name",
    "details": null
   },
   "usesysid": {
    "type": "oid",
    "ref": "ID of this user",
    "details": null
   },
   "usecreatedb": {
    "type": "bool",
    "ref": "User can create databases",
    "details": null
   },
   "usesuper": {
    "type": "bool",
    "ref": "User is a superuser",
    "details": null
   },
   "userepl": {
    "type": "bool",
    "ref": "       User can initiate streaming replication and put the system in and\n       out of backup mode.\n      ",
    "details": null
   },
   "usebypassrls": {
    "type": "bool",
    "ref": "       User bypasses every row level security policy, see\n       <xref linkend=\"ddl-rowsecurity\"> for more information.\n      </xref>",
    "details": null
   },
   "passwd": {
    "type": "text",
    "ref": "Not the password (always reads as <literal>********</literal>)",
    "details": null
   },
   "valuntil": {
    "type": "abstime",
    "ref": "Password expiry time (only used for password authentication)",
    "details": null
   },
   "useconfig": {
    "type": "text[]",
    "ref": "Session defaults for run-time configuration variables",
    "details": null
   }
  }
 },
 "view-pg-user-mappings": {
  "doc": "  <h2><structname>pg_user_mappings</structname></h2>\n\n  <indexterm zone=\"view-pg-user-mappings\">   <primary>pg_user_mappings</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_user_mappings</structname> provides access\n   to information about user mappings.  This is essentially a publicly\n   readable view of\n   <link linkend=\"catalog-pg-user-mapping\"><structname>pg_user_mapping</structname></link>\n   that leaves out the options field if the user has no rights to use\n   it.\n  </para>\n\n  \n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "umid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-user-mapping\"><structname>pg_user_mapping</structname></link>.oid</literal>",
    "details": "OID of the user mapping"
   },
   "srvid": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-foreign-server\"><structname>pg_foreign_server</structname></link>.oid</literal>",
    "details": "       The OID of the foreign server that contains this mapping\n      "
   },
   "srvname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-foreign-server\"><structname>pg_foreign_server</structname></link>.srvname</literal>",
    "details": "       Name of the foreign server\n      "
   },
   "umuser": {
    "type": "oid",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.oid</literal>",
    "details": "OID of the local role being mapped, 0 if the user mapping is public"
   },
   "usename": {
    "type": "name",
    "ref": "",
    "details": "Name of the local user to be mapped"
   },
   "umoptions": {
    "type": "text[]",
    "ref": "",
    "details": "       User mapping specific options, as <quote>keyword=value</quote>\n       strings, if the current user is the owner of the foreign\n       server, else null\n      "
   }
  }
 },
 "view-pg-views": {
  "doc": "  <h2><structname>pg_views</structname></h2>\n\n  <indexterm zone=\"view-pg-views\">   <primary>pg_views</primary>\n  </indexterm>\n\n  <para>   The view <structname>pg_views</structname> provides access to\n   useful information about each view in the database.\n  </para>\n\n  \n\n ",
  "columns": {
   "null": {
    "type": null,
    "ref": "References",
    "details": "Description"
   },
   "schemaname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-namespace\"><structname>pg_namespace</structname></link>.nspname</literal>",
    "details": "Name of schema containing view"
   },
   "viewname": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-class\"><structname>pg_class</structname></link>.relname</literal>",
    "details": "Name of view"
   },
   "viewowner": {
    "type": "name",
    "ref": "<literal><link linkend=\"catalog-pg-authid\"><structname>pg_authid</structname></link>.rolname</literal>",
    "details": "Name of view's owner"
   },
   "definition": {
    "type": "text",
    "ref": "",
    "details": "View definition (a reconstructed <command>SELECT</command> query)"
   }
  }
 }
}