(ns pgtron.demo
  (:require-macros [cljs.core.async.macros :as am])
  (:require [pgtron.layout :as l]
            [charty.core :as chart]
            [pgtron.chan :as ch]
            [charty.dsl :as dsl]
            [cljs.core.async :as a]
            [clojure.string :as str]
            [pgtron.pg :as pg]
            [reagent.core :as r]
            [pgtron.style :refer [icon style]]))

(defn agg-limit [hsql]
  {:select [[:$call :json_agg :x.*]]
   :from [[(assoc hsql :limit 30) :x]]})

(defn mk-query [q]
  (let [ws (str/split q #"\s+")

        where-fn (fn [col] (into [:and] (map (fn [w] [:or
                                                      [:like col (str "%" w "%")]
                                                      [:like :nspname (str "%" w "%")]]) ws)))

        rels {:select [[:c.oid::text :id] [:c.relname :name] [:n.nspname :schema] [:c.relkind :type]]
              :from [[:pg_class :c]]
              :where (where-fn :c.relname)
              :join [[:pg_namespace :n] [:= :n.oid :c.relnamespace]]
              :order-by [:relname]}

        procs {:select [[:p.oid::text :id] [:p.proname :name] [:n.nspname :schema] [[:$raw "'function'"] :type]]
               :from [[:pg_proc :p] [:pg_namespace :n]]
               :where [:and (where-fn :p.proname)
                       [:= :n.oid :p.pronamespace]]
               :order-by [:proname]}]
    {:select [:x.*]
     :from [[{:union [rels procs]} :x]]
     :order-by [:x.name]
     :limit 30}))

(defn parse-modifiers [in state pth]
  (let [out (a/chan)]
    (am/go-loop []
      (let [q (a/<! in)]
        (println "Parse modifiers:" q)
        (a/>! q)
        (recur)))
    out))

(def icons
  {"v" :eye
   "r" :table
   "S" :key
   "f" :facebook
   "i" :search})

(defn $index [params]
  (let [model l/model
        q-ch (a/chan)
        handle (ch/bind-chan q-ch)
        query-ch (parse-modifiers q-ch model [:query])]

    #_(ch/bind-query (ch/debounce q-ch 400) "sample"  mk-query model [:data])
    (fn []
      (let [data (:data @model)]
        [l/page model
        [:div#demo
         (style [:#demo {:$padding [2 4]}
                 [:.items {:-webkit-columns 3}]
                 [:.item {:display "block"
                          :$color :light-gray
                          :text-decoration "none"
                          :$padding [0.2 1]}
                  [:&:hover {:$color [:white :black]}]
                  [:.fa {:display "inline-block" :$width 2 :$color :gray}]
                  [:.schema {:$text [0.5 0.7] :$color :gray}]]
                 [:input {:$color [:black :white] :width "100%" :display "block"}]])
         [:input {:on-change handle}]
         
         [:br]
         [:div.items
          (for [i data]
            [:a.item {:key (.-id i) :href "#/demo"}
             (icon (or (get icons (.-type i)) :ups)) " " (.-name i)
             " "
             [:span.schema (.-schema i)]])]
         
         #_[:pre (.stringify js/JSON data nil " ")]]]))))
